(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendor"],{

/***/ "01f9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__("2d00");
var $export = __webpack_require__("5ca1");
var redefine = __webpack_require__("2aba");
var hide = __webpack_require__("32e9");
var Iterators = __webpack_require__("84f2");
var $iterCreate = __webpack_require__("41a0");
var setToStringTag = __webpack_require__("7f20");
var getPrototypeOf = __webpack_require__("38fd");
var ITERATOR = __webpack_require__("2b4c")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),

/***/ "0234":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pushParams = pushParams;
exports.popParams = popParams;
exports.withParams = withParams;
exports._setTarget = exports.target = void 0;

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var stack = [];
var target = null;
exports.target = target;

var _setTarget = function _setTarget(x) {
  exports.target = target = x;
};

exports._setTarget = _setTarget;

function pushParams() {
  if (target !== null) {
    stack.push(target);
  }

  exports.target = target = {};
}

function popParams() {
  var lastTarget = target;
  var newTarget = exports.target = target = stack.pop() || null;

  if (newTarget) {
    if (!Array.isArray(newTarget.$sub)) {
      newTarget.$sub = [];
    }

    newTarget.$sub.push(lastTarget);
  }

  return lastTarget;
}

function addParams(params) {
  if (_typeof(params) === 'object' && !Array.isArray(params)) {
    exports.target = target = _objectSpread({}, target, params);
  } else {
    throw new Error('params must be an object');
  }
}

function withParamsDirect(params, validator) {
  return withParamsClosure(function (add) {
    return function () {
      add(params);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return validator.apply(this, args);
    };
  });
}

function withParamsClosure(closure) {
  var validator = closure(addParams);
  return function () {
    pushParams();

    try {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return validator.apply(this, args);
    } finally {
      popParams();
    }
  };
}

function withParams(paramsOrClosure, maybeValidator) {
  if (_typeof(paramsOrClosure) === 'object' && maybeValidator !== undefined) {
    return withParamsDirect(paramsOrClosure, maybeValidator);
  }

  return withParamsClosure(paramsOrClosure);
}

/***/ }),

/***/ "02f4":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("4588");
var defined = __webpack_require__("be13");
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),

/***/ "0390":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var at = __webpack_require__("02f4")(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};


/***/ }),

/***/ "044b":
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),

/***/ "0707":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _directives_ripple_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("1526");
/* harmony import */ var _mixins_align_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("5958");



var sizes = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 20,
  xl: 24,
  form: 14.777,
  'form-label': 21.777,
  'form-hide-underline': 9.333,
  'form-label-hide-underline': 16.333
};
/* harmony default export */ __webpack_exports__["a"] = ({
  mixins: [_mixins_align_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]],
  directives: {
    Ripple: _directives_ripple_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]
  },
  props: {
    type: String,
    loading: Boolean,
    disable: Boolean,
    label: [Number, String],
    noCaps: Boolean,
    noWrap: Boolean,
    icon: String,
    iconRight: String,
    round: Boolean,
    outline: Boolean,
    flat: Boolean,
    rounded: Boolean,
    push: Boolean,
    size: String,
    fab: Boolean,
    fabMini: Boolean,
    color: String,
    textColor: String,
    glossy: Boolean,
    dense: Boolean,
    noRipple: Boolean,
    tabindex: Number,
    to: [Object, String],
    replace: Boolean
  },
  computed: {
    style: function style() {
      if (this.size && !this.fab && !this.fabMini) {
        return {
          fontSize: this.size in sizes ? "".concat(sizes[this.size], "px") : this.size
        };
      }
    },
    isRectangle: function isRectangle() {
      return !this.isRound;
    },
    isRound: function isRound() {
      return this.round || this.fab || this.fabMini;
    },
    shape: function shape() {
      return "q-btn-".concat(this.isRound ? 'round' : 'rectangle');
    },
    isDisabled: function isDisabled() {
      return this.disable || this.loading;
    },
    hasRipple: function hasRipple() {
      return  true && !this.noRipple && !this.isDisabled;
    },
    computedTabIndex: function computedTabIndex() {
      return this.isDisabled ? -1 : this.tabindex || 0;
    },
    isLink: function isLink() {
      return this.type === 'a' || this.to !== void 0;
    },
    attrs: function attrs() {
      var att = {
        tabindex: this.computedTabIndex
      };

      if (this.type !== 'a') {
        att.type = this.type || 'button';
      }

      if (this.to !== void 0) {
        att.href = this.$router.resolve(this.to).href;
      }

      return att;
    },
    classes: function classes() {
      var cls = [this.shape];

      if (this.fab) {
        cls.push('q-btn-fab');
      } else if (this.fabMini) {
        cls.push('q-btn-fab-mini');
      }

      if (this.flat) {
        cls.push('q-btn-flat');
      } else if (this.outline) {
        cls.push('q-btn-outline');
      } else if (this.push) {
        cls.push('q-btn-push');
      }

      if (this.isDisabled) {
        cls.push('disabled');
      } else {
        cls.push('q-focusable q-hoverable');
        this.active && cls.push('active');
      }

      if (this.color) {
        if (this.flat || this.outline) {
          cls.push("text-".concat(this.textColor || this.color));
        } else {
          cls.push("bg-".concat(this.color));
          cls.push("text-".concat(this.textColor || 'white'));
        }
      } else if (this.textColor) {
        cls.push("text-".concat(this.textColor));
      }

      cls.push({
        'q-btn-no-uppercase': this.noCaps,
        'q-btn-rounded': this.rounded,
        'q-btn-dense': this.dense,
        'glossy': this.glossy
      });
      return cls;
    },
    innerClasses: function innerClasses() {
      var classes = [this.alignClass];
      this.noWrap && classes.push('no-wrap', 'text-no-wrap');
      this.repeating && classes.push('non-selectable');
      return classes;
    }
  }
});

/***/ }),

/***/ "097d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__("5ca1");
var core = __webpack_require__("8378");
var global = __webpack_require__("7726");
var speciesConstructor = __webpack_require__("ebd6");
var promiseResolve = __webpack_require__("bcaa");

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),

/***/ "0a06":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__("2444");
var utils = __webpack_require__("c532");
var InterceptorManager = __webpack_require__("f6b4");
var dispatchRequest = __webpack_require__("5270");

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);
  config.method = config.method.toLowerCase();

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "0a49":
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__("9b43");
var IObject = __webpack_require__("626a");
var toObject = __webpack_require__("4bf8");
var toLength = __webpack_require__("9def");
var asc = __webpack_require__("cd1c");
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),

/***/ "0b3d":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["a"] = ({
  props: {
    color: String,
    size: {
      type: [Number, String],
      default: '1em'
    }
  },
  computed: {
    classes: function classes() {
      if (this.color) {
        return "text-".concat(this.color);
      }
    }
  }
});

/***/ }),

/***/ "0bfb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__("cb7c");
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "0d58":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__("ce10");
var enumBugKeys = __webpack_require__("e11e");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),

/***/ "0df6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "1169":
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__("2d95");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),

/***/ "1180":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_string_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b54a");
/* harmony import */ var core_js_modules_es6_string_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_link__WEBPACK_IMPORTED_MODULE_0__);

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QList',
  props: {
    noBorder: Boolean,
    dark: Boolean,
    dense: Boolean,
    sparse: Boolean,
    striped: Boolean,
    stripedOdd: Boolean,
    separator: Boolean,
    insetSeparator: Boolean,
    multiline: Boolean,
    highlight: Boolean,
    link: Boolean
  },
  computed: {
    classes: function classes() {
      return {
        'no-border': this.noBorder,
        'q-list-dark': this.dark,
        'q-list-dense': this.dense,
        'q-list-sparse': this.sparse,
        'q-list-striped': this.striped,
        'q-list-striped-odd': this.stripedOdd,
        'q-list-separator': this.separator,
        'q-list-inset-separator': this.insetSeparator,
        'q-list-multiline': this.multiline,
        'q-list-highlight': this.highlight,
        'q-list-link': this.link
      };
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-list',
      'class': this.classes
    }, this.$slots.default);
  }
});

/***/ }),

/***/ "11e9":
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__("52a7");
var createDesc = __webpack_require__("4630");
var toIObject = __webpack_require__("6821");
var toPrimitive = __webpack_require__("6a99");
var has = __webpack_require__("69a8");
var IE8_DOM_DEFINE = __webpack_require__("c69a");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__("9e1e") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),

/***/ "133b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2fdb");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("6762");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("f751");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _components_alert_QAlert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("ef81");
/* harmony import */ var _utils_uid_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("68c2");
/* harmony import */ var _utils_clone_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("9fe0");
/* harmony import */ var _platform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("a60d");







var defaults = {};
var positionList = ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'top', 'bottom', 'left', 'right', 'center'];

function init(_ref) {
  var Vue = _ref.Vue;
  var node = document.createElement('div');
  document.body.appendChild(node);
  this.__vm = new Vue({
    name: 'QNotifications',
    data: {
      notifs: {
        center: [],
        left: [],
        right: [],
        top: [],
        'top-left': [],
        'top-right': [],
        bottom: [],
        'bottom-left': [],
        'bottom-right': []
      }
    },
    methods: {
      add: function add(config) {
        var _this = this;

        if (!config) {
          console.error('Notify: parameter required');
          return false;
        }

        var notif = Object.assign({}, defaults, typeof config === 'string' ? {
          message: config
        } : Object(_utils_clone_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(config));

        if (notif.position) {
          if (!positionList.includes(notif.position)) {
            console.error("Notify: wrong position: ".concat(notif.position));
            return false;
          }
        } else {
          notif.position = 'bottom';
        }

        notif.__uid = Object(_utils_uid_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"])();

        if (notif.timeout === void 0) {
          notif.timeout = 5000;
        }

        var close = function close() {
          _this.remove(notif);
        };

        if (config.actions) {
          notif.actions = config.actions.map(function (item) {
            var handler = item.handler,
                action = Object(_utils_clone_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])(item);
            action.handler = typeof handler === 'function' ? function () {
              handler();
              !item.noDismiss && close();
            } : function () {
              return close();
            };
            return action;
          });
        }

        if (typeof config.onDismiss === 'function') {
          notif.onDismiss = config.onDismiss;
        }

        if (notif.closeBtn) {
          var btn = [{
            closeBtn: true,
            label: notif.closeBtn,
            handler: close
          }];
          notif.actions = notif.actions ? notif.actions.concat(btn) : btn;
        }

        if (notif.timeout) {
          notif.__timeout = setTimeout(function () {
            close();
          }, notif.timeout + 1000);
        }

        var action = notif.position.indexOf('top') > -1 ? 'unshift' : 'push';
        this.notifs[notif.position][action](notif);
        return close;
      },
      remove: function remove(notif) {
        if (notif.__timeout) {
          clearTimeout(notif.__timeout);
        }

        var index = this.notifs[notif.position].indexOf(notif);

        if (index !== -1) {
          var ref = this.$refs["notif_".concat(notif.__uid)];

          if (ref && ref.$el) {
            var el = ref.$el;
            el.style.left = "".concat(el.offsetLeft, "px");
            el.style.width = getComputedStyle(el).width;
          }

          this.notifs[notif.position].splice(index, 1);

          if (typeof notif.onDismiss === 'function') {
            notif.onDismiss();
          }
        }
      }
    },
    render: function render(h) {
      var _this2 = this;

      return h('div', {
        staticClass: 'q-notifications'
      }, positionList.map(function (pos) {
        var vert = ['left', 'center', 'right'].includes(pos) ? 'center' : pos.indexOf('top') > -1 ? 'top' : 'bottom',
            align = pos.indexOf('left') > -1 ? 'start' : pos.indexOf('right') > -1 ? 'end' : 'center',
            classes = ['left', 'right'].includes(pos) ? "items-".concat(pos === 'left' ? 'start' : 'end', " justify-center") : pos === 'center' ? 'flex-center' : "items-".concat(align);
        return h('transition-group', {
          key: pos,
          staticClass: "q-notification-list q-notification-list-".concat(vert, " fixed column ").concat(classes),
          tag: 'div',
          props: {
            name: "q-notification-".concat(pos),
            mode: 'out-in'
          }
        }, _this2.notifs[pos].map(function (notif) {
          return h(_components_alert_QAlert_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], {
            ref: "notif_".concat(notif.__uid),
            key: notif.__uid,
            staticClass: 'q-notification',
            props: notif
          }, [notif.message]);
        }));
      }));
    }
  });

  this.__vm.$mount(node);
}

/* harmony default export */ __webpack_exports__["a"] = ({
  create: function create(opts) {
    if (_platform_js__WEBPACK_IMPORTED_MODULE_6__[/* isSSR */ "d"]) {
      return function () {};
    }

    return this.__vm.add(opts);
  },
  setDefaults: function setDefaults(opts) {
    Object.assign(defaults, opts);
  },
  install: function install(args) {
    if (_platform_js__WEBPACK_IMPORTED_MODULE_6__[/* isSSR */ "d"]) {
      args.$q.notify = function () {};

      args.$q.notify.setDefaults = function () {};

      return;
    }

    init.call(this, args);
    args.cfg.notify && this.setDefaults(args.cfg.notify);
    args.$q.notify = this.create.bind(this);
    args.$q.notify.setDefaults = this.setDefaults;
  }
});

/***/ }),

/***/ "1495":
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__("86cc");
var anObject = __webpack_require__("cb7c");
var getKeys = __webpack_require__("0d58");

module.exports = __webpack_require__("9e1e") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),

/***/ "1526":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b18c");


function showRipple(evt, el, _ref) {
  var stop = _ref.stop,
      center = _ref.center;

  if (stop) {
    evt.stopPropagation();
  }

  var container = document.createElement('span'),
      animNode = document.createElement('span'),
      size = el.clientWidth > el.clientHeight ? el.clientWidth : el.clientHeight,
      unit = "".concat(center ? size : size * 2, "px"),
      offset = el.getBoundingClientRect();
  container.appendChild(animNode);
  container.className = 'q-ripple-container';
  animNode.className = 'q-ripple-animation';
  animNode.style.width = unit;
  animNode.style.height = unit;
  el.appendChild(container);
  var x, y;

  if (center) {
    x = y = 0;
  } else {
    var pos = Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_0__[/* position */ "g"])(evt);
    x = pos.left - offset.left - size;
    y = pos.top - offset.top - size;
  }

  animNode.classList.add('q-ripple-animation-enter');
  animNode.classList.add('q-ripple-animation-visible');
  animNode.style.transform = "translate(".concat(x, "px, ").concat(y, "px) scale3d(0, 0, 0)");
  setTimeout(function () {
    animNode.classList.remove('q-ripple-animation-enter');
    animNode.style.transform = "translate(".concat(x, "px, ").concat(y, "px) scale3d(1, 1, 1)");
    setTimeout(function () {
      animNode.classList.remove('q-ripple-animation-visible');
      setTimeout(function () {
        container.remove();
      }, 300);
    }, 300);
  }, 10);
}

function shouldAbort(_ref2) {
  var mat = _ref2.mat,
      ios = _ref2.ios;
  return mat && "mat" !== 'mat' || ios && "mat" !== 'ios';
}

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'ripple',
  inserted: function inserted(el, _ref3) {
    var value = _ref3.value,
        modifiers = _ref3.modifiers;

    if (shouldAbort(modifiers)) {
      return;
    }

    var ctx = {
      enabled: value !== false,
      modifiers: {
        stop: modifiers.stop,
        center: modifiers.center
      },
      click: function click(evt) {
        if (ctx.enabled && evt.detail !== -1) {
          showRipple(evt, el, ctx.modifiers);
        }
      },
      keyup: function keyup(evt) {
        if (ctx.enabled && evt.keyCode === 13) {
          showRipple(evt, el, ctx.modifiers);
        }
      }
    };
    el.__qripple = ctx;
    el.addEventListener('click', ctx.click, false);
    el.addEventListener('keyup', ctx.keyup, false);
  },
  update: function update(el, _ref4) {
    var value = _ref4.value,
        _ref4$modifiers = _ref4.modifiers,
        stop = _ref4$modifiers.stop,
        center = _ref4$modifiers.center;
    var ctx = el.__qripple;

    if (ctx) {
      ctx.enabled = value !== false;
      ctx.modifiers = {
        stop: stop,
        center: center
      };
    }
  },
  unbind: function unbind(el, _ref5) {
    var modifiers = _ref5.modifiers;
    var ctx = el.__qripple;

    if (ctx && !shouldAbort(modifiers)) {
      el.removeEventListener('click', ctx.click, false);
      el.removeEventListener('keyup', ctx.keyup, false);
      delete el.__qripple;
    }
  }
});

/***/ }),

/***/ "1528":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getScrollTarget; });
/* unused harmony export getScrollHeight */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getScrollPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getHorizontalScrollPosition; });
/* unused harmony export animScrollTo */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return setScrollPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getScrollbarWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return hasScrollbar; });
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6762");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("2fdb");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("abcf");



function getScrollTarget(el) {
  return el.closest('.scroll,.scroll-y,.overflow-auto') || window;
}
function getScrollHeight(el) {
  return (el === window ? document.body : el).scrollHeight;
}
function getScrollPosition(scrollTarget) {
  if (scrollTarget === window) {
    return window.pageYOffset || window.scrollY || document.body.scrollTop || 0;
  }

  return scrollTarget.scrollTop;
}
function getHorizontalScrollPosition(scrollTarget) {
  if (scrollTarget === window) {
    return window.pageXOffset || window.scrollX || document.body.scrollLeft || 0;
  }

  return scrollTarget.scrollLeft;
}
function animScrollTo(el, to, duration) {
  if (duration <= 0) {
    return;
  }

  var pos = getScrollPosition(el);
  requestAnimationFrame(function () {
    setScroll(el, pos + (to - pos) / Math.max(16, duration) * 16);

    if (el.scrollTop !== to) {
      animScrollTo(el, to, duration - 16);
    }
  });
}

function setScroll(scrollTarget, offset) {
  if (scrollTarget === window) {
    document.documentElement.scrollTop = offset;
    document.body.scrollTop = offset;
    return;
  }

  scrollTarget.scrollTop = offset;
}

function setScrollPosition(scrollTarget, offset, duration) {
  if (duration) {
    animScrollTo(scrollTarget, offset, duration);
    return;
  }

  setScroll(scrollTarget, offset);
}
var size;
function getScrollbarWidth() {
  if (size !== undefined) {
    return size;
  }

  var inner = document.createElement('p'),
      outer = document.createElement('div');
  Object(_dom_js__WEBPACK_IMPORTED_MODULE_2__[/* css */ "a"])(inner, {
    width: '100%',
    height: '200px'
  });
  Object(_dom_js__WEBPACK_IMPORTED_MODULE_2__[/* css */ "a"])(outer, {
    position: 'absolute',
    top: '0px',
    left: '0px',
    visibility: 'hidden',
    width: '200px',
    height: '150px',
    overflow: 'hidden'
  });
  outer.appendChild(inner);
  document.body.appendChild(outer);
  var w1 = inner.offsetWidth;
  outer.style.overflow = 'scroll';
  var w2 = inner.offsetWidth;

  if (w1 === w2) {
    w2 = outer.clientWidth;
  }

  outer.remove();
  size = w1 - w2;
  return size;
}
function hasScrollbar(el) {
  var onY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (!el || el.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }

  return onY ? el.scrollHeight > el.clientHeight && (el.classList.contains('scroll') || el.classList.contains('overflow-auto') || ['auto', 'scroll'].includes(window.getComputedStyle(el)['overflow-y'])) : el.scrollWidth > el.clientWidth && (el.classList.contains('scroll') || el.classList.contains('overflow-auto') || ['auto', 'scroll'].includes(window.getComputedStyle(el)['overflow-x']));
}
/* harmony default export */ __webpack_exports__["a"] = ({
  getScrollTarget: getScrollTarget,
  getScrollHeight: getScrollHeight,
  getScrollPosition: getScrollPosition,
  animScrollTo: animScrollTo,
  setScrollPosition: setScrollPosition,
  getScrollbarWidth: getScrollbarWidth,
  hasScrollbar: hasScrollbar
});

/***/ }),

/***/ "1679":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return routerLinkEventName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return routerLinkProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return evt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RouterLinkMixin; });
/* harmony import */ var _plugins_platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a60d");

var routerLinkEventName = 'qrouterlinkclick';
var evt = null;

if (!_plugins_platform_js__WEBPACK_IMPORTED_MODULE_0__[/* isSSR */ "d"]) {
  try {
    evt = new Event(routerLinkEventName);
  } catch (e) {
    evt = document.createEvent('Event');
    evt.initEvent(routerLinkEventName, true, false);
  }
}

var routerLinkProps = {
  to: [String, Object],
  exact: Boolean,
  append: Boolean,
  replace: Boolean,
  event: [String, Array],
  activeClass: String,
  exactActiveClass: String
};

var RouterLinkMixin = {
  props: routerLinkProps,
  data: function data() {
    return {
      routerLinkEventName: routerLinkEventName
    };
  }
};

/***/ }),

/***/ "177b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return humanStorageSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return capitalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return between; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return normalizeToInterval; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return pad; });
var units = ['B', 'kB', 'MB', 'GB', 'TB', 'PB'];
function humanStorageSize(bytes) {
  var u = 0;

  while (parseInt(bytes, 10) >= 1024 && u < units.length - 1) {
    bytes /= 1024;
    ++u;
  }

  return "".concat(bytes.toFixed(1), " ").concat(units[u]);
}
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function between(v, min, max) {
  if (max <= min) {
    return min;
  }

  return Math.min(max, Math.max(min, v));
}
function normalizeToInterval(v, min, max) {
  if (max <= min) {
    return min;
  }

  var size = max - min + 1;
  var index = min + (v - min) % size;

  if (index < min) {
    index = size + index;
  }

  return index === 0 ? 0 : index;
}
function pad(v) {
  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var char = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';
  var val = '' + v;
  return val.length >= length ? val : new Array(length - val.length + 1).join(char) + val;
}
/* harmony default export */ __webpack_exports__["c"] = ({
  humanStorageSize: humanStorageSize,
  capitalize: capitalize,
  between: between,
  normalizeToInterval: normalizeToInterval,
  pad: pad
});

/***/ }),

/***/ "1991":
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__("9b43");
var invoke = __webpack_require__("31f4");
var html = __webpack_require__("fab2");
var cel = __webpack_require__("230e");
var global = __webpack_require__("7726");
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__("2d95")(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),

/***/ "19aa":
/***/ (function(module) {

module.exports = {"a":"0.17.18"};

/***/ }),

/***/ "1d2b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "1dce":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vuelidate = Vuelidate;
Object.defineProperty(exports, "withParams", {
  enumerable: true,
  get: function get() {
    return _params.withParams;
  }
});
exports.default = exports.validationMixin = void 0;

var _vval = __webpack_require__("fbf4");

var _params = __webpack_require__("0234");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var NIL = function NIL() {
  return null;
};

var buildFromKeys = function buildFromKeys(keys, fn, keyFn) {
  return keys.reduce(function (build, key) {
    build[keyFn ? keyFn(key) : key] = fn(key);
    return build;
  }, {});
};

function isFunction(val) {
  return typeof val === 'function';
}

function isObject(val) {
  return val !== null && (_typeof(val) === 'object' || isFunction(val));
}

function isPromise(object) {
  return isObject(object) && isFunction(object.then);
}

var getPath = function getPath(ctx, obj, path, fallback) {
  if (typeof path === 'function') {
    return path.call(ctx, obj, fallback);
  }

  path = Array.isArray(path) ? path : path.split('.');

  for (var i = 0; i < path.length; i++) {
    if (obj && _typeof(obj) === 'object') {
      obj = obj[path[i]];
    } else {
      return fallback;
    }
  }

  return typeof obj === 'undefined' ? fallback : obj;
};

var __isVuelidateAsyncVm = '__isVuelidateAsyncVm';

function makePendingAsyncVm(Vue, promise) {
  var asyncVm = new Vue({
    data: {
      p: true,
      v: false
    }
  });
  promise.then(function (value) {
    asyncVm.p = false;
    asyncVm.v = value;
  }, function (error) {
    asyncVm.p = false;
    asyncVm.v = false;
    throw error;
  });
  asyncVm[__isVuelidateAsyncVm] = true;
  return asyncVm;
}

var validationGetters = {
  $invalid: function $invalid() {
    var _this = this;

    var proxy = this.proxy;
    return this.nestedKeys.some(function (nested) {
      return _this.refProxy(nested).$invalid;
    }) || this.ruleKeys.some(function (rule) {
      return !proxy[rule];
    });
  },
  $dirty: function $dirty() {
    var _this2 = this;

    if (this.dirty) {
      return true;
    }

    if (this.nestedKeys.length === 0) {
      return false;
    }

    return this.nestedKeys.every(function (key) {
      return _this2.refProxy(key).$dirty;
    });
  },
  $anyDirty: function $anyDirty() {
    var _this3 = this;

    if (this.dirty) {
      return true;
    }

    if (this.nestedKeys.length === 0) {
      return false;
    }

    return this.nestedKeys.some(function (key) {
      return _this3.refProxy(key).$anyDirty;
    });
  },
  $error: function $error() {
    return this.$dirty && !this.$pending && this.$invalid;
  },
  $anyError: function $anyError() {
    return this.$anyDirty && !this.$pending && this.$invalid;
  },
  $pending: function $pending() {
    var _this4 = this;

    return this.ruleKeys.some(function (key) {
      return _this4.getRef(key).$pending;
    }) || this.nestedKeys.some(function (key) {
      return _this4.refProxy(key).$pending;
    });
  },
  $params: function $params() {
    var _this5 = this;

    var vals = this.validations;
    return _objectSpread({}, buildFromKeys(this.nestedKeys, function (key) {
      return vals[key] && vals[key].$params || null;
    }), buildFromKeys(this.ruleKeys, function (key) {
      return _this5.getRef(key).$params;
    }));
  }
};

function setDirtyRecursive(newState) {
  this.dirty = newState;
  var proxy = this.proxy;
  var method = newState ? '$touch' : '$reset';
  this.nestedKeys.forEach(function (key) {
    proxy[key][method]();
  });
}

var validationMethods = {
  $touch: function $touch() {
    setDirtyRecursive.call(this, true);
  },
  $reset: function $reset() {
    setDirtyRecursive.call(this, false);
  },
  $flattenParams: function $flattenParams() {
    var proxy = this.proxy;
    var params = [];

    for (var key in this.$params) {
      if (this.isNested(key)) {
        var childParams = proxy[key].$flattenParams();

        for (var j = 0; j < childParams.length; j++) {
          childParams[j].path.unshift(key);
        }

        params = params.concat(childParams);
      } else {
        params.push({
          path: [],
          name: key,
          params: this.$params[key]
        });
      }
    }

    return params;
  }
};
var getterNames = Object.keys(validationGetters);
var methodNames = Object.keys(validationMethods);
var _cachedComponent = null;

var getComponent = function getComponent(Vue) {
  if (_cachedComponent) {
    return _cachedComponent;
  }

  var VBase = Vue.extend({
    computed: {
      refs: function refs() {
        var oldVval = this._vval;
        this._vval = this.children;
        (0, _vval.patchChildren)(oldVval, this._vval);
        var refs = {};

        this._vval.forEach(function (c) {
          refs[c.key] = c.vm;
        });

        return refs;
      }
    },
    beforeCreate: function beforeCreate() {
      this._vval = null;
    },
    beforeDestroy: function beforeDestroy() {
      if (this._vval) {
        (0, _vval.patchChildren)(this._vval);
        this._vval = null;
      }
    },
    methods: {
      getModel: function getModel() {
        return this.lazyModel ? this.lazyModel(this.prop) : this.model;
      },
      getModelKey: function getModelKey(key) {
        var model = this.getModel();

        if (model) {
          return model[key];
        }
      },
      hasIter: function hasIter() {
        return false;
      }
    }
  });
  var ValidationRule = VBase.extend({
    data: function data() {
      return {
        rule: null,
        lazyModel: null,
        model: null,
        lazyParentModel: null,
        rootModel: null
      };
    },
    methods: {
      runRule: function runRule(parent) {
        var model = this.getModel();
        (0, _params.pushParams)();
        var rawOutput = this.rule.call(this.rootModel, model, parent);
        var output = isPromise(rawOutput) ? makePendingAsyncVm(Vue, rawOutput) : rawOutput;
        var rawParams = (0, _params.popParams)();
        var params = rawParams && rawParams.$sub ? rawParams.$sub.length > 1 ? rawParams : rawParams.$sub[0] : null;
        return {
          output: output,
          params: params
        };
      }
    },
    computed: {
      run: function run() {
        var _this6 = this;

        var parent = this.lazyParentModel();

        var isArrayDependant = Array.isArray(parent) && parent.__ob__;

        if (isArrayDependant) {
          var arrayDep = parent.__ob__.dep;
          arrayDep.depend();
          var target = arrayDep.constructor.target;

          if (!this._indirectWatcher) {
            var Watcher = target.constructor;
            this._indirectWatcher = new Watcher(this, function () {
              return _this6.runRule(parent);
            }, null, {
              lazy: true
            });
          }

          var model = this.getModel();

          if (!this._indirectWatcher.dirty && this._lastModel === model) {
            this._indirectWatcher.depend();

            return target.value;
          }

          this._lastModel = model;

          this._indirectWatcher.evaluate();

          this._indirectWatcher.depend();
        } else if (this._indirectWatcher) {
          this._indirectWatcher.teardown();

          this._indirectWatcher = null;
        }

        return this._indirectWatcher ? this._indirectWatcher.value : this.runRule(parent);
      },
      $params: function $params() {
        return this.run.params;
      },
      proxy: function proxy() {
        var output = this.run.output;

        if (output[__isVuelidateAsyncVm]) {
          return !!output.v;
        }

        return !!output;
      },
      $pending: function $pending() {
        var output = this.run.output;

        if (output[__isVuelidateAsyncVm]) {
          return output.p;
        }

        return false;
      }
    },
    destroyed: function destroyed() {
      if (this._indirectWatcher) {
        this._indirectWatcher.teardown();

        this._indirectWatcher = null;
      }
    }
  });
  var Validation = VBase.extend({
    data: function data() {
      return {
        dirty: false,
        validations: null,
        lazyModel: null,
        model: null,
        prop: null,
        lazyParentModel: null,
        rootModel: null
      };
    },
    methods: _objectSpread({}, validationMethods, {
      refProxy: function refProxy(key) {
        return this.getRef(key).proxy;
      },
      getRef: function getRef(key) {
        return this.refs[key];
      },
      isNested: function isNested(key) {
        return typeof this.validations[key] !== 'function';
      }
    }),
    computed: _objectSpread({}, validationGetters, {
      nestedKeys: function nestedKeys() {
        return this.keys.filter(this.isNested);
      },
      ruleKeys: function ruleKeys() {
        var _this7 = this;

        return this.keys.filter(function (k) {
          return !_this7.isNested(k);
        });
      },
      keys: function keys() {
        return Object.keys(this.validations).filter(function (k) {
          return k !== '$params';
        });
      },
      proxy: function proxy() {
        var _this8 = this;

        var keyDefs = buildFromKeys(this.keys, function (key) {
          return {
            enumerable: true,
            configurable: true,
            get: function get() {
              return _this8.refProxy(key);
            }
          };
        });
        var getterDefs = buildFromKeys(getterNames, function (key) {
          return {
            enumerable: true,
            configurable: true,
            get: function get() {
              return _this8[key];
            }
          };
        });
        var methodDefs = buildFromKeys(methodNames, function (key) {
          return {
            enumerable: false,
            configurable: true,
            get: function get() {
              return _this8[key];
            }
          };
        });
        var iterDefs = this.hasIter() ? {
          $iter: {
            enumerable: true,
            value: Object.defineProperties({}, _objectSpread({}, keyDefs))
          }
        } : {};
        return Object.defineProperties({}, _objectSpread({}, keyDefs, iterDefs, {
          $model: {
            enumerable: true,
            get: function get() {
              var parent = _this8.lazyParentModel();

              if (parent != null) {
                return parent[_this8.prop];
              } else {
                return null;
              }
            },
            set: function set(value) {
              var parent = _this8.lazyParentModel();

              if (parent != null) {
                parent[_this8.prop] = value;

                _this8.$touch();
              }
            }
          }
        }, getterDefs, methodDefs));
      },
      children: function children() {
        var _this9 = this;

        return _toConsumableArray(this.nestedKeys.map(function (key) {
          return renderNested(_this9, key);
        })).concat(_toConsumableArray(this.ruleKeys.map(function (key) {
          return renderRule(_this9, key);
        }))).filter(Boolean);
      }
    })
  });
  var GroupValidation = Validation.extend({
    methods: {
      isNested: function isNested(key) {
        return typeof this.validations[key]() !== 'undefined';
      },
      getRef: function getRef(key) {
        var vm = this;
        return {
          get proxy() {
            return vm.validations[key]() || false;
          }

        };
      }
    }
  });
  var EachValidation = Validation.extend({
    computed: {
      keys: function keys() {
        var model = this.getModel();

        if (isObject(model)) {
          return Object.keys(model);
        } else {
          return [];
        }
      },
      tracker: function tracker() {
        var _this10 = this;

        var trackBy = this.validations.$trackBy;
        return trackBy ? function (key) {
          return "".concat(getPath(_this10.rootModel, _this10.getModelKey(key), trackBy));
        } : function (x) {
          return "".concat(x);
        };
      },
      getModelLazy: function getModelLazy() {
        var _this11 = this;

        return function () {
          return _this11.getModel();
        };
      },
      children: function children() {
        var _this12 = this;

        var def = this.validations;
        var model = this.getModel();

        var validations = _objectSpread({}, def);

        delete validations['$trackBy'];
        var usedTracks = {};
        return this.keys.map(function (key) {
          var track = _this12.tracker(key);

          if (usedTracks.hasOwnProperty(track)) {
            return null;
          }

          usedTracks[track] = true;
          return (0, _vval.h)(Validation, track, {
            validations: validations,
            prop: key,
            lazyParentModel: _this12.getModelLazy,
            model: model[key],
            rootModel: _this12.rootModel
          });
        }).filter(Boolean);
      }
    },
    methods: {
      isNested: function isNested() {
        return true;
      },
      getRef: function getRef(key) {
        return this.refs[this.tracker(key)];
      },
      hasIter: function hasIter() {
        return true;
      }
    }
  });

  var renderNested = function renderNested(vm, key) {
    if (key === '$each') {
      return (0, _vval.h)(EachValidation, key, {
        validations: vm.validations[key],
        lazyParentModel: vm.lazyParentModel,
        prop: key,
        lazyModel: vm.getModel,
        rootModel: vm.rootModel
      });
    }

    var validations = vm.validations[key];

    if (Array.isArray(validations)) {
      var root = vm.rootModel;
      var refVals = buildFromKeys(validations, function (path) {
        return function () {
          return getPath(root, root.$v, path);
        };
      }, function (v) {
        return Array.isArray(v) ? v.join('.') : v;
      });
      return (0, _vval.h)(GroupValidation, key, {
        validations: refVals,
        lazyParentModel: NIL,
        prop: key,
        lazyModel: NIL,
        rootModel: root
      });
    }

    return (0, _vval.h)(Validation, key, {
      validations: validations,
      lazyParentModel: vm.getModel,
      prop: key,
      lazyModel: vm.getModelKey,
      rootModel: vm.rootModel
    });
  };

  var renderRule = function renderRule(vm, key) {
    return (0, _vval.h)(ValidationRule, key, {
      rule: vm.validations[key],
      lazyParentModel: vm.lazyParentModel,
      lazyModel: vm.getModel,
      rootModel: vm.rootModel
    });
  };

  _cachedComponent = {
    VBase: VBase,
    Validation: Validation
  };
  return _cachedComponent;
};

var _cachedVue = null;

function getVue(rootVm) {
  if (_cachedVue) return _cachedVue;
  var Vue = rootVm.constructor;

  while (Vue.super) {
    Vue = Vue.super;
  }

  _cachedVue = Vue;
  return Vue;
}

var validateModel = function validateModel(model, validations) {
  var Vue = getVue(model);

  var _getComponent = getComponent(Vue),
      Validation = _getComponent.Validation,
      VBase = _getComponent.VBase;

  var root = new VBase({
    computed: {
      children: function children() {
        var vals = typeof validations === 'function' ? validations.call(model) : validations;
        return [(0, _vval.h)(Validation, '$v', {
          validations: vals,
          lazyParentModel: NIL,
          prop: '$v',
          model: model,
          rootModel: model
        })];
      }
    }
  });
  return root;
};

var validationMixin = {
  data: function data() {
    var vals = this.$options.validations;

    if (vals) {
      this._vuelidate = validateModel(this, vals);
    }

    return {};
  },
  beforeCreate: function beforeCreate() {
    var options = this.$options;
    var vals = options.validations;
    if (!vals) return;
    if (!options.computed) options.computed = {};
    if (options.computed.$v) return;

    options.computed.$v = function () {
      return this._vuelidate ? this._vuelidate.refs.$v.proxy : null;
    };
  },
  beforeDestroy: function beforeDestroy() {
    if (this._vuelidate) {
      this._vuelidate.$destroy();

      this._vuelidate = null;
    }
  }
};
exports.validationMixin = validationMixin;

function Vuelidate(Vue) {
  Vue.mixin(validationMixin);
}

var _default = Vuelidate;
exports.default = _default;

/***/ }),

/***/ "1e55":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QListHeader',
  props: {
    inset: Boolean
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-list-header',
      'class': {
        'q-list-header-inset': this.inset
      }
    }, this.$slots.default);
  }
});

/***/ }),

/***/ "1fa8":
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__("cb7c");
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),

/***/ "2040":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_string_fixed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("d263");
/* harmony import */ var core_js_modules_es6_string_fixed__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_fixed__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _observables_QResizeObservable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("363b");
/* harmony import */ var _mixins_can_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("559e");




/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QLayoutHeader',
  mixins: [_mixins_can_render_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]],
  inject: {
    layout: {
      default: function _default() {
        console.error('QLayoutHeader needs to be child of QLayout');
      }
    }
  },
  props: {
    value: {
      type: Boolean,
      default: true
    },
    reveal: Boolean,
    revealOffset: {
      type: Number,
      default: 250
    }
  },
  data: function data() {
    return {
      size: 0,
      revealed: true
    };
  },
  watch: {
    value: function value(val) {
      this.__update('space', val);

      this.__updateLocal('revealed', true);

      this.layout.__animate();
    },
    offset: function offset(val) {
      this.__update('offset', val);
    },
    reveal: function reveal(val) {
      if (!val) {
        this.__updateLocal('revealed', this.value);
      }
    },
    revealed: function revealed(val) {
      this.layout.__animate();

      this.$emit('reveal', val);
    },
    'layout.scroll': function layoutScroll(scroll) {
      if (!this.reveal) {
        return;
      }

      this.__updateLocal('revealed', scroll.direction === 'up' || scroll.position <= this.revealOffset || scroll.position - scroll.inflexionPosition < 100);
    }
  },
  computed: {
    fixed: function fixed() {
      return this.reveal || this.layout.view.indexOf('H') > -1 || this.layout.container;
    },
    offset: function offset() {
      if (!this.canRender || !this.value) {
        return 0;
      }

      if (this.fixed) {
        return this.revealed ? this.size : 0;
      }

      var offset = this.size - this.layout.scroll.position;
      return offset > 0 ? offset : 0;
    },
    computedClass: function computedClass() {
      return {
        'fixed-top': this.fixed,
        'absolute-top': !this.fixed,
        'q-layout-header-hidden': !this.canRender || !this.value || this.fixed && !this.revealed
      };
    },
    computedStyle: function computedStyle() {
      var view = this.layout.rows.top,
          css = {};

      if (view[0] === 'l' && this.layout.left.space) {
        css[this.$q.i18n.rtl ? 'right' : 'left'] = "".concat(this.layout.left.size, "px");
      }

      if (view[2] === 'r' && this.layout.right.space) {
        css[this.$q.i18n.rtl ? 'left' : 'right'] = "".concat(this.layout.right.size, "px");
      }

      return css;
    }
  },
  render: function render(h) {
    return h('header', {
      staticClass: 'q-layout-header q-layout-marginal q-layout-transition',
      'class': this.computedClass,
      style: this.computedStyle
    }, [h(_observables_QResizeObservable_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], {
      props: {
        debounce: 0
      },
      on: {
        resize: this.__onResize
      }
    }), this.$slots.default]);
  },
  created: function created() {
    this.layout.instances.header = this;

    this.__update('space', this.value);

    this.__update('offset', this.offset);
  },
  beforeDestroy: function beforeDestroy() {
    if (this.layout.instances.header === this) {
      this.layout.instances.header = null;

      this.__update('size', 0);

      this.__update('offset', 0);

      this.__update('space', false);
    }
  },
  methods: {
    __onResize: function __onResize(_ref) {
      var height = _ref.height;

      this.__updateLocal('size', height);

      this.__update('size', height);
    },
    __update: function __update(prop, val) {
      if (this.layout.header[prop] !== val) {
        this.layout.header[prop] = val;
      }
    },
    __updateLocal: function __updateLocal(prop, val) {
      if (this[prop] !== val) {
        this[prop] = val;
      }
    }
  }
});

/***/ }),

/***/ "2054":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mixins_input_frame_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("cd88");
/* harmony import */ var _mixins_parent_field_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("e660");
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("52b5");




/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QInputFrame',
  mixins: [_mixins_input_frame_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"], _mixins_parent_field_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]],
  props: {
    focused: Boolean,
    length: Number,
    focusable: Boolean,
    additionalLength: Boolean
  },
  computed: {
    hasStackLabel: function hasStackLabel() {
      return typeof this.stackLabel === 'string' && this.stackLabel.length > 0;
    },
    hasLabel: function hasLabel() {
      return this.hasStackLabel || typeof this.floatLabel === 'string' && this.floatLabel.length > 0;
    },
    label: function label() {
      return this.hasStackLabel ? this.stackLabel : this.floatLabel;
    },
    addonClass: function addonClass() {
      return {
        'q-if-addon-visible': !this.hasLabel || this.labelIsAbove
      };
    },
    classes: function classes() {
      var cls = [{
        'q-if-has-label': this.label,
        'q-if-focused': this.focused,
        'q-if-error': this.hasError,
        'q-if-warning': this.hasWarning,
        'q-if-disabled': this.disable,
        'q-if-readonly': this.readonly,
        'q-if-focusable': this.focusable && !this.disable,
        'q-if-inverted': this.isInverted,
        'q-if-inverted-light': this.isInvertedLight,
        'q-if-light-color': this.lightColor,
        'q-if-dark': this.dark,
        'q-if-hide-underline': this.isHideUnderline,
        'q-if-standard': this.isStandard,
        'q-if-has-content': this.hasContent
      }];
      var color = this.hasError ? 'negative' : this.hasWarning ? 'warning' : this.color;

      if (this.isInverted) {
        cls.push("bg-".concat(color));
        cls.push("text-".concat(this.isInvertedLight ? 'black' : 'white'));
      } else if (color) {
        cls.push("text-".concat(color));
      }

      return cls;
    }
  },
  methods: {
    __onClick: function __onClick(e) {
      this.$emit('click', e);
    },
    __onMouseDown: function __onMouseDown(e) {
      var _this = this;

      !this.disable && this.$nextTick(function () {
        return _this.$emit('focus', e);
      });
    },
    __additionalHidden: function __additionalHidden(item, hasError, hasWarning, length) {
      if (item.condition !== void 0) {
        return item.condition === false;
      }

      return item.content !== void 0 && !item.content === length > 0 || item.error !== void 0 && !item.error === hasError || item.warning !== void 0 && !item.warning === hasWarning;
    },
    __baHandler: function __baHandler(evt, item) {
      if (!item.allowPropagation) {
        evt.stopPropagation();
      }

      if (item.handler) {
        item.handler(evt);
      }
    }
  },
  render: function render(h) {
    var _this2 = this;

    return h('div', {
      staticClass: 'q-if row no-wrap relative-position',
      'class': this.classes,
      attrs: {
        tabindex: this.focusable && !this.disable ? 0 : -1
      },
      on: {
        click: this.__onClick
      }
    }, [h('div', {
      staticClass: 'q-if-baseline'
    }, '|'), this.before && this.before.map(function (item) {
      return h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], {
        key: "b".concat(item.icon),
        staticClass: 'q-if-control q-if-control-before',
        'class': [item.class, {
          hidden: _this2.__additionalHidden(item, _this2.hasError, _this2.hasWarning, _this2.length)
        }],
        props: {
          name: item.icon
        },
        nativeOn: {
          mousedown: _this2.__onMouseDown,
          touchstart: _this2.__onMouseDown,
          click: function click(e) {
            _this2.__baHandler(e, item);
          }
        }
      });
    }) || void 0, h('div', {
      staticClass: 'q-if-inner col column'
    }, [h('div', {
      staticClass: 'row no-wrap relative-position'
    }, [this.prefix && h('span', {
      staticClass: 'q-if-addon q-if-addon-left',
      'class': this.addonClass,
      domProps: {
        innerHTML: this.prefix
      }
    }) || void 0, this.hasLabel && h('div', {
      staticClass: 'q-if-label',
      'class': {
        'q-if-label-above': this.labelIsAbove
      }
    }, [h('div', {
      staticClass: 'q-if-label-inner ellipsis',
      domProps: {
        innerHTML: this.label
      }
    })]) || void 0].concat(this.$slots.default).concat([this.suffix && h('span', {
      staticClass: 'q-if-addon q-if-addon-right',
      'class': this.addonClass,
      domProps: {
        innerHTML: this.suffix
      }
    }) || void 0])), this.hasLabel && h('div', {
      staticClass: 'q-if-label-spacer',
      domProps: {
        innerHTML: this.label
      }
    }) || void 0]), this.after && this.after.map(function (item) {
      return h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], {
        key: "a".concat(item.icon),
        staticClass: 'q-if-control',
        'class': [item.class, {
          hidden: _this2.__additionalHidden(item, _this2.hasError, _this2.hasWarning, _this2.length)
        }],
        props: {
          name: item.icon
        },
        nativeOn: {
          mousedown: _this2.__onMouseDown,
          touchstart: _this2.__onMouseDown,
          click: function click(e) {
            _this2.__baHandler(e, item);
          }
        }
      });
    }) || void 0].concat(this.$slots.after));
  }
});

/***/ }),

/***/ "20d6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__("5ca1");
var $find = __webpack_require__("0a49")(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__("9c6c")(KEY);


/***/ }),

/***/ "214f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__("b0c5");
var redefine = __webpack_require__("2aba");
var hide = __webpack_require__("32e9");
var fails = __webpack_require__("79e5");
var defined = __webpack_require__("be13");
var wks = __webpack_require__("2b4c");
var regexpExec = __webpack_require__("520a");

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),

/***/ "2259":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.8a9a261c.woff2";

/***/ }),

/***/ "230e":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("d3f4");
var document = __webpack_require__("7726").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "2350":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "23c6":
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__("2d95");
var TAG = __webpack_require__("2b4c")('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),

/***/ "2444":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__("c532");
var normalizeHeaderName = __webpack_require__("c8af");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__("b50d");
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__("b50d");
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "2621":
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "27ee":
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__("23c6");
var ITERATOR = __webpack_require__("2b4c")('iterator');
var Iterators = __webpack_require__("84f2");
module.exports = __webpack_require__("8378").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "2828":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6762");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("2fdb");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("b18c");



/* harmony default export */ __webpack_exports__["a"] = ({
  props: {
    value: {
      required: true
    },
    label: String,
    leftLabel: Boolean,
    color: {
      type: String,
      default: 'primary'
    },
    keepColor: Boolean,
    dark: Boolean,
    disable: Boolean,
    readonly: Boolean,
    noFocus: Boolean,
    checkedIcon: String,
    uncheckedIcon: String
  },
  computed: {
    classes: function classes() {
      return [this.__kebabTag, {
        disabled: this.disable,
        reverse: this.leftLabel,
        'q-focusable': this.focusable
      }];
    },
    innerClasses: function innerClasses() {
      if (this.isTrue || this.isIndeterminate) {
        return ['active', "text-".concat(this.color)];
      } else {
        var color = this.keepColor ? this.color : this.dark ? 'light' : 'faded';
        return "text-".concat(color);
      }
    },
    focusable: function focusable() {
      return !this.noFocus && !this.disable && !this.readonly;
    },
    tabindex: function tabindex() {
      return this.focusable ? 0 : -1;
    }
  },
  methods: {
    __update: function __update(value) {
      var _this = this;

      var ref = this.$refs.ripple;

      if (ref) {
        ref.classList.add('active');
        setTimeout(function () {
          ref.classList.remove('active');
        }, 10);
      }

      this.$emit('input', value);
      this.$nextTick(function () {
        if (JSON.stringify(value) !== JSON.stringify(_this.value)) {
          _this.$emit('change', value);
        }
      });
    },
    __handleKeyDown: function __handleKeyDown(e) {
      if ([13, 32].includes(Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_2__[/* getEventKey */ "b"])(e))) {
        this.toggle(e, false);
      }
    }
  },
  render: function render(h) {
    var _this2 = this;

    return h('div', {
      staticClass: 'q-option cursor-pointer no-outline row inline no-wrap items-center',
      'class': this.classes,
      attrs: {
        tabindex: this.tabindex
      },
      on: {
        click: this.toggle,
        focus: function focus() {
          _this2.$emit('focus');
        },
        blur: function blur() {
          _this2.$emit('blur');
        },
        keydown: this.__handleKeyDown
      },
      directives: this.__kebabTag === 'q-toggle' && !this.disable && !this.readonly ? [{
        name: 'touch-swipe',
        modifiers: {
          horizontal: true
        },
        value: this.__swipe
      }] : null
    }, [h('div', {
      staticClass: 'q-option-inner relative-position',
      'class': this.innerClasses
    }, [h('input', {
      attrs: {
        type: 'checkbox'
      },
      on: {
        change: this.toggle
      }
    }), this.$q.platform.is.desktop ? h('div', {
      staticClass: 'q-focus-helper',
      'class': this.__kebabTag === 'q-radio' ? 'q-focus-helper-round' : 'q-focus-helper-rounded'
    }) : null, this.__getContent(h)]), this.label ? h('span', {
      staticClass: 'q-option-label',
      domProps: {
        innerHTML: this.label
      }
    }) : null, this.$slots.default]);
  }
});

/***/ }),

/***/ "2877":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "28a5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__("aae3");
var anObject = __webpack_require__("cb7c");
var speciesConstructor = __webpack_require__("ebd6");
var advanceStringIndex = __webpack_require__("0390");
var toLength = __webpack_require__("9def");
var callRegExpExec = __webpack_require__("5f1b");
var regexpExec = __webpack_require__("520a");
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';

// eslint-disable-next-line no-empty
var SUPPORTS_Y = !!(function () { try { return new RegExp('x', 'y'); } catch (e) {} })();

// @@split logic
__webpack_require__("214f")('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit = $split;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                    (rx.multiline ? 'm' : '') +
                    (rx.unicode ? 'u' : '') +
                    (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? 0xffffffff : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});


/***/ }),

/***/ "28c4":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("456d");
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("ac6a");
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("b18c");




function getDirection(mod) {
  var dir = {};
  ['left', 'right', 'up', 'down', 'horizontal', 'vertical'].forEach(function (direction) {
    if (mod[direction]) {
      dir[direction] = true;
    }
  });

  if (Object.keys(dir).length === 0) {
    return {
      left: true,
      right: true,
      up: true,
      down: true,
      horizontal: true,
      vertical: true
    };
  }

  if (dir.horizontal) {
    dir.left = dir.right = true;
  }

  if (dir.vertical) {
    dir.up = dir.down = true;
  }

  if (dir.left && dir.right) {
    dir.horizontal = true;
  }

  if (dir.up && dir.down) {
    dir.vertical = true;
  }

  return dir;
}

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'touch-swipe',
  bind: function bind(el, binding) {
    var mouse = !binding.modifiers.noMouse;
    var ctx = {
      handler: binding.value,
      threshold: parseInt(binding.arg, 10) || 300,
      direction: getDirection(binding.modifiers),
      mouseStart: function mouseStart(evt) {
        if (Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_2__[/* leftClick */ "e"])(evt)) {
          document.addEventListener('mousemove', ctx.move);
          document.addEventListener('mouseup', ctx.mouseEnd);
          ctx.start(evt);
        }
      },
      mouseEnd: function mouseEnd(evt) {
        document.removeEventListener('mousemove', ctx.move);
        document.removeEventListener('mouseup', ctx.mouseEnd);
        ctx.end(evt);
      },
      start: function start(evt) {
        var pos = Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_2__[/* position */ "g"])(evt);
        ctx.event = {
          x: pos.left,
          y: pos.top,
          time: new Date().getTime(),
          detected: false,
          abort: false
        };
        el.classList.add('q-touch');
      },
      move: function move(evt) {
        if (ctx.event.abort) {
          return;
        }

        if (new Date().getTime() - ctx.event.time > ctx.threshold) {
          ctx.event.abort = true;
          return;
        }

        if (ctx.event.detected) {
          evt.stopPropagation();
          evt.preventDefault();
          return;
        }

        var pos = Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_2__[/* position */ "g"])(evt),
            distX = pos.left - ctx.event.x,
            absX = Math.abs(distX),
            distY = pos.top - ctx.event.y,
            absY = Math.abs(distY);

        if (absX === absY) {
          return;
        }

        ctx.event.detected = true;
        ctx.event.abort = !(ctx.direction.vertical && absX < absY || ctx.direction.horizontal && absX > absY || ctx.direction.up && absX < absY && distY < 0 || ctx.direction.down && absX < absY && distY > 0 || ctx.direction.left && absX > absY && distX < 0 || ctx.direction.right && absX > absY && distX > 0);
        ctx.move(evt);
      },
      end: function end(evt) {
        el.classList.remove('q-touch');

        if (ctx.event.abort || !ctx.event.detected) {
          return;
        }

        var duration = new Date().getTime() - ctx.event.time;

        if (duration > ctx.threshold) {
          return;
        }

        evt.stopPropagation();
        evt.preventDefault();
        var direction,
            pos = Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_2__[/* position */ "g"])(evt),
            distX = pos.left - ctx.event.x,
            absX = Math.abs(distX),
            distY = pos.top - ctx.event.y,
            absY = Math.abs(distY);

        if (absX >= absY) {
          if (absX < 50) {
            return;
          }

          direction = distX < 0 ? 'left' : 'right';
        } else {
          if (absY < 50) {
            return;
          }

          direction = distY < 0 ? 'up' : 'down';
        }

        if (ctx.direction[direction]) {
          ctx.handler({
            evt: evt,
            direction: direction,
            duration: duration,
            distance: {
              x: absX,
              y: absY
            }
          });
        }
      }
    };
    el.__qtouchswipe = ctx;

    if (mouse) {
      el.addEventListener('mousedown', ctx.mouseStart);
    }

    el.addEventListener('touchstart', ctx.start);
    el.addEventListener('touchmove', ctx.move);
    el.addEventListener('touchend', ctx.end);
  },
  update: function update(el, binding) {
    if (binding.oldValue !== binding.value) {
      el.__qtouchswipe.handler = binding.value;
    }
  },
  unbind: function unbind(el, binding) {
    var ctx = el.__qtouchswipe;

    if (!ctx) {
      return;
    }

    el.removeEventListener('mousedown', ctx.mouseStart);
    el.removeEventListener('touchstart', ctx.start);
    el.removeEventListener('touchmove', ctx.move);
    el.removeEventListener('touchend', ctx.end);
    delete el.__qtouchswipe;
  }
});

/***/ }),

/***/ "2aba":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("7726");
var hide = __webpack_require__("32e9");
var has = __webpack_require__("69a8");
var SRC = __webpack_require__("ca5a")('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__("8378").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),

/***/ "2aeb":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__("cb7c");
var dPs = __webpack_require__("1495");
var enumBugKeys = __webpack_require__("e11e");
var IE_PROTO = __webpack_require__("613b")('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__("230e")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__("fab2").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),

/***/ "2b0e":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.5.21
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : typeof val === 'object'
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "production" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "production" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (false) { var repeat, classify, classifyRE, hasConsole; }

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (false) {}
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (false) {}
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (false
  ) {}
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     false && false;
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (false
  ) {}
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     false && false;
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (false) {}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       false && false;

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  return childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
     false && false;
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (false) {}
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "production" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'can only contain alphanumeric characters and the hyphen, ' +
      'and must start with a letter.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (false) {}
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (false) {}
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (false) {}
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (false) {}

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  
  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (false) {}
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    false
  ) {}
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (false) {}
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  if (vm) {
    var cur = vm;
    while ((cur = cur.$parent)) {
      var hooks = cur.$options.errorCaptured;
      if (hooks) {
        for (var i = 0; i < hooks.length; i++) {
          try {
            var capture = hooks[i].call(cur, err, vm, info) === false;
            if (capture) { return }
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook');
          }
        }
      }
    }
  }
  globalHandleError(err, vm, info);
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      logError(e, null, 'config.errorHandler');
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (false) {}
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using both microtasks and (macro) tasks.
// In < 2.4 we used microtasks everywhere, but there are some scenarios where
// microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using (macro) tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use microtask by default, but expose a way to force (macro) task when
// needed (e.g. in event handlers attached by v-on).
var microTimerFunc;
var macroTimerFunc;
var useMacroTask = false;

// Determine (macro) task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.
/* istanbul ignore if */
if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  macroTimerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else if (typeof MessageChannel !== 'undefined' && (
  isNative(MessageChannel) ||
  // PhantomJS
  MessageChannel.toString() === '[object MessageChannelConstructor]'
)) {
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;
  macroTimerFunc = function () {
    port.postMessage(1);
  };
} else {
  /* istanbul ignore next */
  macroTimerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

// Determine microtask defer implementation.
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  microTimerFunc = function () {
    p.then(flushCallbacks);
    // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
} else {
  // fallback to macro
  microTimerFunc = macroTimerFunc;
}

/**
 * Wrap a function so that if any code inside triggers state change,
 * the changes are queued using a (macro) task instead of a microtask.
 */
function withMacroTask (fn) {
  return fn._withTask || (fn._withTask = function () {
    useMacroTask = true;
    try {
      return fn.apply(null, arguments)
    } finally {
      useMacroTask = false;    
    }
  })
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (false) { var getHandler, hasHandler, isBuiltInModifier, hasProxy, warnReservedPrefix, warnNonPresent, allowedGlobals; }

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (false) { var perf; }

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments)
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
       false && false;
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (false) { var keyInLowerCase; }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor,
  context
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }

      if (renderCompleted) {
        contexts.length = 0;
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      }
    });

    var reject = once(function (reason) {
       false && false;
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(
                 false
                  ? (undefined)
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$off(event[i], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    if (fn) {
      // specific handler
      var cb;
      var i$1 = cbs.length;
      while (i$1--) {
        cb = cbs[i$1];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i$1, 1);
          break
        }
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (false) { var lowerCaseEvent; }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, ("event handler for \"" + event + "\""));
        }
      }
    }
    return vm
  };
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  var slots = {};
  if (!children) {
    return slots
  }
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

function resolveScopedSlots (
  fns, // see flow/vnode
  res
) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (false) {}
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (false) {} else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (false) {}

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (false) {}
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, (hook + " hook"));
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (false) {}
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (false) {}
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (false) {}
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$1 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$1; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  false
    ? undefined
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
       false && false;
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (false) { var hyphenatedKey; } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
     false && false;
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (false) {}
    if (props && hasOwn(props, key)) {
       false && false;
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (false) {}

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (false) {}
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (false) {}
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (false) {}
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (false) {}
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (false) {} else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject).filter(function (key) {
        /* istanbul ignore next */
        return Object.getOwnPropertyDescriptor(inject, key).enumerable
      })
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (false) {}
      }
    }
    return result
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (false) {}
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
       false && false;
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        if (!(key in hash) && !(camelizedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + camelizedKey)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       false && false;
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () { return resolveSlots(children, parent); };

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = data.scopedSlots || emptyObject;
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (false) {}
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (false) {}
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
     false && false;
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (false
  ) {}
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (false) {} else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (false) {} else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (false) {}
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (false) {}

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (false) {} else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (false) {}

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified
}

function dedupe (latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res
  } else {
    return latest
  }
}

function Vue (options) {
  if (false
  ) {}
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (false) {}

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (false) {}
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (false) {}
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.5.21';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
       false && false;
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (false) {}

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (false) {}
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (false) {}
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    if (false) {}

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (false) {}
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    if (false) {}
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (false
              ) {}
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (false
              ) {}
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (false) {}
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      (el.tagName === 'TEXTAREA' || el.tagName === 'INPUT') &&
      key === 'placeholder' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

/*  */

/*  */

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

function add$1 (
  event,
  handler,
  capture,
  passive
) {
  handler = withMacroTask(handler);
  target$1.addEventListener(
    event,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  event,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    event,
    handler._withTask || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.lazy) {
      // inputs with lazy should only be updated when not in focus
      return false
    }
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (false) {}

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (false) {}

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
     false && false;
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (false) {}

    var mode = this.mode;

    // warn invalid mode
    if (false
    ) {}

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (false) { var name, opts; }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (
        false
      ) {}
    }
    if (false
    ) {}
  }, 0);
}

/*  */

/* harmony default export */ __webpack_exports__["default"] = (Vue);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("ac22")))

/***/ }),

/***/ "2b4c":
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__("5537")('wks');
var uid = __webpack_require__("ca5a");
var Symbol = __webpack_require__("7726").Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),

/***/ "2d00":
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "2d83":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__("387f");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "2d95":
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "2e67":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "2f21":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__("79e5");

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),

/***/ "2f62":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
/**
 * vuex v3.0.1
 * (c) 2017 Evan You
 * @license MIT
 */
var applyMixin = function (Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if ( options === void 0 ) options = {};

      options.init = options.init
        ? [vuexInit].concat(options.init)
        : vuexInit;
      _init.call(this, options);
    };
  }

  /**
   * Vuex init hook, injected into each instances init hooks list.
   */

  function vuexInit () {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function'
        ? options.store()
        : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
};

var devtoolHook =
  typeof window !== 'undefined' &&
  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin (store) {
  if (!devtoolHook) { return }

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  });
}

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */
/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */


/**
 * forEach for object
 */
function forEachValue (obj, fn) {
  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
}

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function isPromise (val) {
  return val && typeof val.then === 'function'
}

function assert (condition, msg) {
  if (!condition) { throw new Error(("[vuex] " + msg)) }
}

var Module = function Module (rawModule, runtime) {
  this.runtime = runtime;
  this._children = Object.create(null);
  this._rawModule = rawModule;
  var rawState = rawModule.state;
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors$1 = { namespaced: { configurable: true } };

prototypeAccessors$1.namespaced.get = function () {
  return !!this._rawModule.namespaced
};

Module.prototype.addChild = function addChild (key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild (key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild (key) {
  return this._children[key]
};

Module.prototype.update = function update (rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild (fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter (fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction (fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation (fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties( Module.prototype, prototypeAccessors$1 );

var ModuleCollection = function ModuleCollection (rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get (path) {
  return path.reduce(function (module, key) {
    return module.getChild(key)
  }, this.root)
};

ModuleCollection.prototype.getNamespace = function getNamespace (path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '')
  }, '')
};

ModuleCollection.prototype.update = function update$1 (rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
    var this$1 = this;
    if ( runtime === void 0 ) runtime = true;

  if (false) {}

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  if (!parent.getChild(key).runtime) { return }

  parent.removeChild(key);
};

function update (path, targetModule, newModule) {
  if (false) {}

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if (false) {}
        return
      }
      update(
        path.concat(key),
        targetModule.getChild(key),
        newModule.modules[key]
      );
    }
  }
}

var functionAssert = {
  assert: function (value) { return typeof value === 'function'; },
  expected: 'function'
};

var objectAssert = {
  assert: function (value) { return typeof value === 'function' ||
    (typeof value === 'object' && typeof value.handler === 'function'); },
  expected: 'function or object with "handler" function'
};

var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule (path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) { return }

    var assertOptions = assertTypes[key];

    forEachValue(rawModule[key], function (value, type) {
      assert(
        assertOptions.assert(value),
        makeAssertionMessage(path, key, type, value, assertOptions.expected)
      );
    });
  });
}

function makeAssertionMessage (path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + (path.join('.')) + "\"";
  }
  buf += " is " + (JSON.stringify(value)) + ".";
  return buf
}

var Vue; // bind on install

var Store = function Store (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if (false) {}

  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];
  var strict = options.strict; if ( strict === void 0 ) strict = false;

  var state = options.state; if ( state === void 0 ) state = {};
  if (typeof state === 'function') {
    state = state() || {};
  }

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch (type, payload) {
    return dispatch.call(store, type, payload)
  };
  this.commit = function boundCommit (type, payload, options) {
    return commit.call(store, type, payload, options)
  };

  // strict mode
  this.strict = strict;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) { return plugin(this$1); });

  if (Vue.config.devtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors = { state: { configurable: true } };

prototypeAccessors.state.get = function () {
  return this._vm._data.$$state
};

prototypeAccessors.state.set = function (v) {
  if (false) {}
};

Store.prototype.commit = function commit (_type, _payload, _options) {
    var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if (false) {}
    return
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator (handler) {
      handler(payload);
    });
  });
  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });

  if (
    false
  ) {}
};

Store.prototype.dispatch = function dispatch (_type, _payload) {
    var this$1 = this;

  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;

  var action = { type: type, payload: payload };
  var entry = this._actions[type];
  if (!entry) {
    if (false) {}
    return
  }

  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });

  return entry.length > 1
    ? Promise.all(entry.map(function (handler) { return handler(payload); }))
    : entry[0](payload)
};

Store.prototype.subscribe = function subscribe (fn) {
  return genericSubscribe(fn, this._subscribers)
};

Store.prototype.subscribeAction = function subscribeAction (fn) {
  return genericSubscribe(fn, this._actionSubscribers)
};

Store.prototype.watch = function watch (getter, cb, options) {
    var this$1 = this;

  if (false) {}
  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
};

Store.prototype.replaceState = function replaceState (state) {
    var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule (path, rawModule, options) {
    if ( options === void 0 ) options = {};

  if (typeof path === 'string') { path = [path]; }

  if (false) {}

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule (path) {
    var this$1 = this;

  if (typeof path === 'string') { path = [path]; }

  if (false) {}

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hotUpdate = function hotUpdate (newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit (fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties( Store.prototype, prototypeAccessors );

function genericSubscribe (fn, subs) {
  if (subs.indexOf(fn) < 0) {
    subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  }
}

function resetStore (store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM (store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    computed[key] = function () { return fn(store); };
    Object.defineProperty(store.getters, key, {
      get: function () { return store._vm[key]; },
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () { return oldVm.$destroy(); });
  }
}

function installModule (store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */
function makeLocalContext (store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (false) {}
      }

      return store.dispatch(type, payload)
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (false) {}
      }

      store.commit(type, payload, options);
    }
  };

  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace
        ? function () { return store.getters; }
        : function () { return makeLocalGetters(store, namespace); }
    },
    state: {
      get: function () { return getNestedState(store.state, path); }
    }
  });

  return local
}

function makeLocalGetters (store, namespace) {
  var gettersProxy = {};

  var splitPos = namespace.length;
  Object.keys(store.getters).forEach(function (type) {
    // skip if the target getter is not match this namespace
    if (type.slice(0, splitPos) !== namespace) { return }

    // extract local getter type
    var localType = type.slice(splitPos);

    // Add a port to the getters proxy.
    // Define as getter property because
    // we do not want to evaluate the getters in this time.
    Object.defineProperty(gettersProxy, localType, {
      get: function () { return store.getters[type]; },
      enumerable: true
    });
  });

  return gettersProxy
}

function registerMutation (store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler (payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction (store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler (payload, cb) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload, cb);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err
      })
    } else {
      return res
    }
  });
}

function registerGetter (store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if (false) {}
    return
  }
  store._wrappedGetters[type] = function wrappedGetter (store) {
    return rawGetter(
      local.state, // local state
      local.getters, // local getters
      store.state, // root state
      store.getters // root getters
    )
  };
}

function enableStrictMode (store) {
  store._vm.$watch(function () { return this._data.$$state }, function () {
    if (false) {}
  }, { deep: true, sync: true });
}

function getNestedState (state, path) {
  return path.length
    ? path.reduce(function (state, key) { return state[key]; }, state)
    : state
}

function unifyObjectStyle (type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if (false) {}

  return { type: type, payload: payload, options: options }
}

function install (_Vue) {
  if (Vue && _Vue === Vue) {
    if (false) {}
    return
  }
  Vue = _Vue;
  applyMixin(Vue);
}

var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState () {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function'
        ? val.call(this, state, getters)
        : state[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      var commit = this.$store.commit;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
        if (!module) {
          return
        }
        commit = module.context.commit;
      }
      return typeof val === 'function'
        ? val.apply(this, [commit].concat(args))
        : commit.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    val = namespace + val;
    res[key] = function mappedGetter () {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return
      }
      if (false) {}
      return this.$store.getters[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      var dispatch = this.$store.dispatch;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
        if (!module) {
          return
        }
        dispatch = module.context.dispatch;
      }
      return typeof val === 'function'
        ? val.apply(this, [dispatch].concat(args))
        : dispatch.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

var createNamespacedHelpers = function (namespace) { return ({
  mapState: mapState.bind(null, namespace),
  mapGetters: mapGetters.bind(null, namespace),
  mapMutations: mapMutations.bind(null, namespace),
  mapActions: mapActions.bind(null, namespace)
}); };

function normalizeMap (map) {
  return Array.isArray(map)
    ? map.map(function (key) { return ({ key: key, val: key }); })
    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
}

function normalizeNamespace (fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map)
  }
}

function getModuleByNamespace (store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if (false) {}
  return module
}

var index_esm = {
  Store: Store,
  install: install,
  version: '3.0.1',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers
};


/* harmony default export */ __webpack_exports__["default"] = (index_esm);


/***/ }),

/***/ "2fdb":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__("5ca1");
var context = __webpack_require__("d2c8");
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__("5147")(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "30b5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "30dd":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _history_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("be90");

/* harmony default export */ __webpack_exports__["a"] = ({
  data: function data() {
    return {
      inFullscreen: false
    };
  },
  watch: {
    $route: function $route() {
      this.exitFullscreen();
    },
    inFullscreen: function inFullscreen(v) {
      this.$emit('fullscreen', v);
    }
  },
  methods: {
    toggleFullscreen: function toggleFullscreen() {
      if (this.inFullscreen) {
        this.exitFullscreen();
      } else {
        this.setFullscreen();
      }
    },
    setFullscreen: function setFullscreen() {
      if (this.inFullscreen) {
        return;
      }

      this.inFullscreen = true;
      this.container = this.$el.parentNode;
      this.container.replaceChild(this.fullscreenFillerNode, this.$el);
      document.body.appendChild(this.$el);
      document.body.classList.add('q-body-fullscreen-mixin');
      this.__historyFullscreen = {
        handler: this.exitFullscreen
      };
      _history_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].add(this.__historyFullscreen);
    },
    exitFullscreen: function exitFullscreen() {
      if (!this.inFullscreen) {
        return;
      }

      if (this.__historyFullscreen) {
        _history_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].remove(this.__historyFullscreen);
        this.__historyFullscreen = null;
      }

      this.container.replaceChild(this.$el, this.fullscreenFillerNode);
      document.body.classList.remove('q-body-fullscreen-mixin');
      this.inFullscreen = false;
    }
  },
  beforeMount: function beforeMount() {
    this.fullscreenFillerNode = document.createElement('span');
  },
  beforeDestroy: function beforeDestroy() {
    this.exitFullscreen();
  }
});

/***/ }),

/***/ "31f4":
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),

/***/ "32a1":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QPage',
  inject: {
    pageContainer: {
      default: function _default() {
        console.error('QPage needs to be child of QPageContainer');
      }
    },
    layout: {}
  },
  props: {
    padding: Boolean,
    styleFn: Function
  },
  computed: {
    style: function style() {
      var offset = (this.layout.header.space ? this.layout.header.size : 0) + (this.layout.footer.space ? this.layout.footer.size : 0);

      if (typeof this.styleFn === 'function') {
        return this.styleFn(offset);
      }

      var minHeight = this.layout.container ? this.layout.containerHeight - offset + 'px' : offset ? "calc(100vh - ".concat(offset, "px)") : "100vh";
      return {
        minHeight: minHeight
      };
    },
    classes: function classes() {
      if (this.padding) {
        return 'layout-padding';
      }
    }
  },
  render: function render(h) {
    return h('main', {
      staticClass: 'q-layout-page',
      style: this.style,
      'class': this.classes
    }, this.$slots.default);
  }
});

/***/ }),

/***/ "32e9":
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__("86cc");
var createDesc = __webpack_require__("4630");
module.exports = __webpack_require__("9e1e") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "32f4":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/KFOlCnqEu92Fr1MmWUlfBBc-.cf6613d1.woff";

/***/ }),

/***/ "33a4":
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__("84f2");
var ITERATOR = __webpack_require__("2b4c")('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),

/***/ "363b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("b18c");
/* harmony import */ var _mixins_can_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("559e");
/* harmony import */ var _plugins_platform_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("a60d");




/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QResizeObservable',
  mixins: [_mixins_can_render_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]],
  props: {
    debounce: {
      type: Number,
      default: 100
    }
  },
  data: function data() {
    return this.hasObserver ? {} : {
      url: this.$q.platform.is.ie ? null : 'about:blank'
    };
  },
  methods: {
    onResize: function onResize() {
      this.timer = null;

      if (!this.$el || !this.$el.parentNode) {
        return;
      }

      var parent = this.$el.parentNode,
          size = {
        width: parent.offsetWidth,
        height: parent.offsetHeight
      };

      if (size.width === this.size.width && size.height === this.size.height) {
        return;
      }

      this.size = size;
      this.$emit('resize', this.size);
    },
    trigger: function trigger(immediately) {
      if (immediately === true || this.debounce === 0) {
        this.onResize();
      } else if (!this.timer) {
        this.timer = setTimeout(this.onResize, this.debounce);
      }
    }
  },
  render: function render(h) {
    var _this = this;

    if (!this.canRender || this.hasObserver) {
      return;
    }

    return h('object', {
      style: this.style,
      attrs: {
        tabindex: -1,
        type: 'text/html',
        data: this.url,
        'aria-hidden': true
      },
      on: {
        load: function load() {
          _this.$el.contentDocument.defaultView.addEventListener('resize', _this.trigger, _utils_event_js__WEBPACK_IMPORTED_MODULE_1__[/* listenOpts */ "f"].passive);

          _this.trigger(true);
        }
      }
    });
  },
  beforeCreate: function beforeCreate() {
    this.size = {
      width: -1,
      height: -1
    };

    if (_plugins_platform_js__WEBPACK_IMPORTED_MODULE_3__[/* isSSR */ "d"]) {
      return;
    }

    this.hasObserver = typeof ResizeObserver !== 'undefined';

    if (!this.hasObserver) {
      this.style = "".concat(this.$q.platform.is.ie ? 'visibility:hidden;' : '', "display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;");
    }
  },
  mounted: function mounted() {
    if (this.hasObserver) {
      this.observer = new ResizeObserver(this.trigger);
      this.observer.observe(this.$el.parentNode);
      return;
    }

    this.trigger(true);

    if (this.$q.platform.is.ie) {
      this.url = 'about:blank';
    }
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.timer);

    if (this.hasObserver) {
      this.$el.parentNode && this.observer.unobserve(this.$el.parentNode);
      return;
    }

    if (this.$el.contentDocument) {
      this.$el.contentDocument.defaultView.removeEventListener('resize', this.trigger, _utils_event_js__WEBPACK_IMPORTED_MODULE_1__[/* listenOpts */ "f"].passive);
    }
  }
});

/***/ }),

/***/ "3846":
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__("9e1e") && /./g.flags != 'g') __webpack_require__("86cc").f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__("0bfb")
});


/***/ }),

/***/ "386b":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("5ca1");
var fails = __webpack_require__("79e5");
var defined = __webpack_require__("be13");
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),

/***/ "386d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__("cb7c");
var sameValue = __webpack_require__("83a1");
var regExpExec = __webpack_require__("5f1b");

// @@search logic
__webpack_require__("214f")('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});


/***/ }),

/***/ "387f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),

/***/ "38fd":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__("69a8");
var toObject = __webpack_require__("4bf8");
var IE_PROTO = __webpack_require__("613b")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),

/***/ "3934":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),

/***/ "3b2b":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("7726");
var inheritIfRequired = __webpack_require__("5dbc");
var dP = __webpack_require__("86cc").f;
var gOPN = __webpack_require__("9093").f;
var isRegExp = __webpack_require__("aae3");
var $flags = __webpack_require__("0bfb");
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__("9e1e") && (!CORRECT_NEW || __webpack_require__("79e5")(function () {
  re2[__webpack_require__("2b4c")('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__("2aba")(global, 'RegExp', $RegExp);
}

__webpack_require__("7a56")('RegExp');


/***/ }),

/***/ "41a0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__("2aeb");
var descriptor = __webpack_require__("4630");
var setToStringTag = __webpack_require__("7f20");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__("32e9")(IteratorPrototype, __webpack_require__("2b4c")('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),

/***/ "42b5":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b18c");
/* harmony import */ var _utils_format_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("177b");


/* harmony default export */ __webpack_exports__["a"] = ({
  data: function data() {
    return {
      keyboardIndex: 0,
      keyboardMoveDirection: false,
      keyboardMoveTimer: false
    };
  },
  watch: {
    keyboardIndex: function keyboardIndex(val) {
      var _this = this;

      if (this.$refs.popover && this.$refs.popover.showing && this.keyboardMoveDirection && val > -1) {
        this.$nextTick(function () {
          if (!_this.$refs.popover) {
            return;
          }

          var selected = _this.$refs.popover.$el.querySelector('.q-select-highlight');

          if (selected && selected.scrollIntoView) {
            if (selected.scrollIntoViewIfNeeded) {
              return selected.scrollIntoViewIfNeeded(false);
            }

            selected.scrollIntoView(_this.keyboardMoveDirection < 0);
          }
        });
      }
    }
  },
  methods: {
    __keyboardShow: function __keyboardShow() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.keyboardIndex !== index) {
        this.keyboardIndex = index;
      }
    },
    __keyboardSetCurrentSelection: function __keyboardSetCurrentSelection(navigation) {
      if (this.keyboardIndex >= 0 && this.keyboardIndex <= this.keyboardMaxIndex) {
        this.__keyboardSetSelection(this.keyboardIndex, navigation);
      }
    },
    __keyboardHandleKey: function __keyboardHandleKey(e) {
      var key = Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_0__[/* getEventKey */ "b"])(e);

      switch (key) {
        case 38:
          this.__keyboardMoveCursor(-1, e);

          break;

        case 40:
          this.__keyboardMoveCursor(1, e);

          break;

        case 13:
          if (this.$refs.popover.showing) {
            Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_0__[/* stopAndPrevent */ "h"])(e);

            this.__keyboardSetCurrentSelection();

            return;
          }

          break;

        case 9:
          this.hide();
          break;
      }

      this.__keyboardCustomKeyHandle(key, e);
    },
    __keyboardMoveCursor: function __keyboardMoveCursor(offset, e) {
      var _this2 = this;

      Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_0__[/* stopAndPrevent */ "h"])(e);

      if (this.$refs.popover.showing) {
        clearTimeout(this.keyboardMoveTimer);

        var index = this.keyboardIndex,
            valid = this.__keyboardIsSelectableIndex || function () {
          return true;
        };

        do {
          index = Object(_utils_format_js__WEBPACK_IMPORTED_MODULE_1__[/* normalizeToInterval */ "e"])(index + offset, -1, this.keyboardMaxIndex);
        } while (index !== this.keyboardIndex && !valid(index));

        this.keyboardMoveDirection = index > this.keyboardIndex ? 1 : -1;
        this.keyboardMoveTimer = setTimeout(function () {
          _this2.keyboardMoveDirection = false;
        }, 500);
        this.keyboardIndex = index;
        return;
      }

      this.__keyboardShowTrigger();
    }
  }
});

/***/ }),

/***/ "4362":
/***/ (function(module, exports, __webpack_require__) {

exports.nextTick = function nextTick(fn) {
	setTimeout(fn, 0);
};

exports.platform = exports.arch = 
exports.execPath = exports.title = 'browser';
exports.pid = 1;
exports.browser = true;
exports.env = {};
exports.argv = [];

exports.binding = function (name) {
	throw new Error('No such module. (Possibly not yet loaded)')
};

(function () {
    var cwd = '/';
    var path;
    exports.cwd = function () { return cwd };
    exports.chdir = function (dir) {
        if (!path) path = __webpack_require__("df7c");
        cwd = path.resolve(dir, cwd);
    };
})();

exports.exit = exports.kill = 
exports.umask = exports.dlopen = 
exports.uptime = exports.memoryUsage = 
exports.uvCounters = function() {};
exports.features = {};


/***/ }),

/***/ "456d":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__("4bf8");
var $keys = __webpack_require__("0d58");

__webpack_require__("5eda")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),

/***/ "4588":
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),

/***/ "4630":
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "4679":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("b041");
exports = module.exports = __webpack_require__("2350")(true);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + escape(__webpack_require__("2259")) + ") format('woff2'), url(" + escape(__webpack_require__("bb0b")) + ") format('woff');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  -webkit-font-feature-settings: 'liga';\n          font-feature-settings: 'liga';\n}\n", "", {"version":3,"sources":["D:/AtWork/Projects/Einstein/src/Einstein.WebUI/node_modules/quasar-extras/material-icons/D:/AtWork/Projects/Einstein/src/Einstein.WebUI/node_modules/quasar-extras/material-icons/material-icons.css"],"names":[],"mappings":"AAAA;EACE,8BAA8B;EAC9B,mBAAmB;EACnB,iBAAiB;EACjB,iGAAoJ;CACrJ;;AAED;EACE,8BAA8B;EAC9B,oBAAoB;EACpB,mBAAmB;EACnB,sBAAsB;EACtB,eAAe;EACf,qBAAqB;EACrB,uBAAuB;EACvB,kBAAkB;EAClB,oBAAoB;EACpB,eAAe;;EAEf,sCAAsC;EACtC,oCAAoC;EACpC,oCAAoC;EACpC,mCAAmC;;EAEnC,0BAA0B;EAC1B,mCAAmC;;EAEnC,qBAAqB;EACrB,sCAA8B;UAA9B,8BAA8B;CAC/B","file":"material-icons.css","sourcesContent":["@font-face {\n  font-family: 'Material Icons';\n  font-style: normal;\n  font-weight: 400;\n  src: url('./web-font/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2') format('woff2'), url('./web-font/flUhRq6tzZclQEJ-Vdg-IuiaDsNa.woff') format('woff');\n}\n\n.material-icons {\n  font-family: 'Material Icons';\n  font-weight: normal;\n  font-style: normal;\n  display: inline-block;\n  line-height: 1;\n  text-transform: none;\n  letter-spacing: normal;\n  word-wrap: normal;\n  white-space: nowrap;\n  direction: ltr;\n\n  /* Support for all WebKit browsers. */\n  -webkit-font-smoothing: antialiased;\n  /* Support for Safari and Chrome. */\n  text-rendering: optimizeLegibility;\n\n  /* Support for Firefox. */\n  -moz-osx-font-smoothing: grayscale;\n\n  /* Support for IE. */\n  font-feature-settings: 'liga';\n}\n"],"sourceRoot":""}]);

// exports


/***/ }),

/***/ "467f":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__("2d83");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "46a9":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QPageContainer',
  inject: {
    layout: {
      default: function _default() {
        console.error('QPageContainer needs to be child of QLayout');
      }
    }
  },
  provide: {
    pageContainer: true
  },
  computed: {
    style: function style() {
      var css = {};

      if (this.layout.header.space) {
        css.paddingTop = "".concat(this.layout.header.size, "px");
      }

      if (this.layout.right.space) {
        css["padding".concat(this.$q.i18n.rtl ? 'Left' : 'Right')] = "".concat(this.layout.right.size, "px");
      }

      if (this.layout.footer.space) {
        css.paddingBottom = "".concat(this.layout.footer.size, "px");
      }

      if (this.layout.left.space) {
        css["padding".concat(this.$q.i18n.rtl ? 'Right' : 'Left')] = "".concat(this.layout.left.size, "px");
      }

      return css;
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-layout-page-container q-layout-transition',
      style: this.style
    }, this.$slots.default);
  }
});

/***/ }),

/***/ "482e":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a481");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("f751");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _btn_mixin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("0707");
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("52b5");
/* harmony import */ var _spinner_QSpinner_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("b70a");
/* harmony import */ var _utils_format_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("177b");
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("b18c");








/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QBtn',
  mixins: [_btn_mixin_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]],
  props: {
    percentage: Number,
    darkPercentage: Boolean,
    waitForRipple: Boolean,
    repeatTimeout: [Number, Function]
  },
  computed: {
    hasPercentage: function hasPercentage() {
      return this.percentage !== void 0;
    },
    width: function width() {
      return "".concat(Object(_utils_format_js__WEBPACK_IMPORTED_MODULE_6__[/* between */ "a"])(this.percentage, 0, 100), "%");
    },
    events: function events() {
      var _this = this;

      return this.isDisabled || !this.repeatTimeout ? {
        click: this.click,
        keydown: this.__onKeyDown,
        keyup: this.__onKeyUp
      } : {
        mousedown: this.__startRepeat,
        touchstart: this.__startRepeat,
        keydown: function keydown(e) {
          _this.__onKeyDown(e, true);
        },
        mouseup: this.__endRepeat,
        touchend: this.__endRepeat,
        keyup: function keyup(e) {
          _this.__onKeyUp(e, true);
        },
        mouseleave: this.__abortRepeat,
        touchmove: this.__abortRepeat,
        blur: this.__abortRepeat
      };
    }
  },
  data: function data() {
    return {
      repeating: false,
      active: false
    };
  },
  methods: {
    click: function click(e) {
      var _this2 = this;

      this.__cleanup();

      if (this.to !== void 0 || this.isDisabled) {
        e && Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_7__[/* stopAndPrevent */ "h"])(e);

        if (this.isDisabled) {
          return;
        }
      }

      if (e && e.detail !== -1 && this.type === 'submit') {
        Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_7__[/* stopAndPrevent */ "h"])(e);
        var ev = new MouseEvent('click', Object.assign({}, e, {
          detail: -1
        }));
        this.timer = setTimeout(function () {
          return _this2.$el && _this2.$el.dispatchEvent(ev);
        }, 200);
        return;
      }

      var go = function go() {
        _this2.$router[_this2.replace ? 'replace' : 'push'](_this2.to);
      };

      var trigger = function trigger() {
        if (!_this2.isDisabled) {
          _this2.$emit('click', e, go);

          _this2.to !== void 0 && e.navigate !== false && go();
        }
      };

      if (this.waitForRipple && this.hasRipple) {
        this.timer = setTimeout(trigger, 300);
      } else {
        trigger();
      }
    },
    __cleanup: function __cleanup() {
      clearTimeout(this.timer);
    },
    __onKeyDown: function __onKeyDown(e, repeat) {
      if (this.isDisabled || e.keyCode !== 13) {
        return;
      }

      this.active = true;
      repeat ? this.__startRepeat(e) : Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_7__[/* stopAndPrevent */ "h"])(e);
    },
    __onKeyUp: function __onKeyUp(e, repeat) {
      if (!this.active) {
        return;
      }

      this.active = false;

      if (this.isDisabled || e.keyCode !== 13) {
        return;
      }

      this[repeat ? '__endRepeat' : 'click'](e);
    },
    __startRepeat: function __startRepeat(e) {
      var _this3 = this;

      if (this.repeating) {
        return;
      }

      var setTimer = function setTimer() {
        _this3.timer = setTimeout(trigger, typeof _this3.repeatTimeout === 'function' ? _this3.repeatTimeout(_this3.repeatCount) : _this3.repeatTimeout);
      };

      var trigger = function trigger() {
        if (_this3.isDisabled) {
          return;
        }

        _this3.repeatCount += 1;
        e.repeatCount = _this3.repeatCount;

        _this3.$emit('click', e);

        setTimer();
      };

      this.repeatCount = 0;
      this.repeating = true;
      setTimer();
    },
    __abortRepeat: function __abortRepeat() {
      this.repeating = false;

      this.__cleanup();
    },
    __endRepeat: function __endRepeat(e) {
      if (!this.repeating) {
        return;
      }

      this.repeating = false;

      if (this.repeatCount) {
        this.repeatCount = 0;
      } else if (e.detail || e.keyCode) {
        e.repeatCount = 0;
        this.$emit('click', e);
      }

      this.__cleanup();
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.__cleanup();
  },
  render: function render(h) {
    return h(this.isLink ? 'a' : 'button', {
      staticClass: 'q-btn inline relative-position q-btn-item non-selectable',
      'class': this.classes,
      style: this.style,
      attrs: this.attrs,
      on: this.events,
      directives: this.hasRipple ? [{
        name: 'ripple',
        value: true,
        modifiers: {
          center: this.isRound
        }
      }] : null
    }, [ false || this.$q.platform.is.desktop ? h('div', {
      staticClass: 'q-focus-helper'
    }) : null, this.loading && this.hasPercentage ? h('div', {
      staticClass: 'q-btn-progress absolute-full',
      'class': {
        'q-btn-dark-progress': this.darkPercentage
      },
      style: {
        width: this.width
      }
    }) : null, h('div', {
      staticClass: 'q-btn-inner row col items-center',
      'class': this.innerClasses
    }, this.loading ? [this.$slots.loading || h(_spinner_QSpinner_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"])] : [this.icon ? h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"], {
      'class': {
        'on-left': this.label && this.isRectangle
      },
      props: {
        name: this.icon
      }
    }) : null, this.label && this.isRectangle ? h('div', [this.label]) : null, this.$slots.default, this.iconRight && this.isRectangle ? h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"], {
      staticClass: 'on-right',
      props: {
        name: this.iconRight
      }
    }) : null])]);
  }
});

/***/ }),

/***/ "48c0":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__("386b")('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),

/***/ "4917":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__("cb7c");
var toLength = __webpack_require__("9def");
var advanceStringIndex = __webpack_require__("0390");
var regExpExec = __webpack_require__("5f1b");

// @@match logic
__webpack_require__("214f")('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),

/***/ "499e":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js
/**
 * Translates the list format produced by css-loader into something
 * easier to manipulate.
 */
function listToStyles (parentId, list) {
  var styles = []
  var newStyles = {}
  for (var i = 0; i < list.length; i++) {
    var item = list[i]
    var id = item[0]
    var css = item[1]
    var media = item[2]
    var sourceMap = item[3]
    var part = {
      id: parentId + ':' + i,
      css: css,
      media: media,
      sourceMap: sourceMap
    }
    if (!newStyles[id]) {
      styles.push(newStyles[id] = { id: id, parts: [part] })
    } else {
      newStyles[id].parts.push(part)
    }
  }
  return styles
}

// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesClient.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return addStylesClient; });
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
  Modified by Evan You @yyx990803
*/



var hasDocument = typeof document !== 'undefined'

if (typeof DEBUG !== 'undefined' && DEBUG) {
  if (!hasDocument) {
    throw new Error(
    'vue-style-loader cannot be used in a non-browser environment. ' +
    "Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
  ) }
}

/*
type StyleObject = {
  id: number;
  parts: Array<StyleObjectPart>
}

type StyleObjectPart = {
  css: string;
  media: string;
  sourceMap: ?string
}
*/

var stylesInDom = {/*
  [id: number]: {
    id: number,
    refs: number,
    parts: Array<(obj?: StyleObjectPart) => void>
  }
*/}

var head = hasDocument && (document.head || document.getElementsByTagName('head')[0])
var singletonElement = null
var singletonCounter = 0
var isProduction = false
var noop = function () {}
var options = null
var ssrIdKey = 'data-vue-ssr-id'

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
// tags it will allow on a page
var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase())

function addStylesClient (parentId, list, _isProduction, _options) {
  isProduction = _isProduction

  options = _options || {}

  var styles = listToStyles(parentId, list)
  addStylesToDom(styles)

  return function update (newList) {
    var mayRemove = []
    for (var i = 0; i < styles.length; i++) {
      var item = styles[i]
      var domStyle = stylesInDom[item.id]
      domStyle.refs--
      mayRemove.push(domStyle)
    }
    if (newList) {
      styles = listToStyles(parentId, newList)
      addStylesToDom(styles)
    } else {
      styles = []
    }
    for (var i = 0; i < mayRemove.length; i++) {
      var domStyle = mayRemove[i]
      if (domStyle.refs === 0) {
        for (var j = 0; j < domStyle.parts.length; j++) {
          domStyle.parts[j]()
        }
        delete stylesInDom[domStyle.id]
      }
    }
  }
}

function addStylesToDom (styles /* Array<StyleObject> */) {
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i]
    var domStyle = stylesInDom[item.id]
    if (domStyle) {
      domStyle.refs++
      for (var j = 0; j < domStyle.parts.length; j++) {
        domStyle.parts[j](item.parts[j])
      }
      for (; j < item.parts.length; j++) {
        domStyle.parts.push(addStyle(item.parts[j]))
      }
      if (domStyle.parts.length > item.parts.length) {
        domStyle.parts.length = item.parts.length
      }
    } else {
      var parts = []
      for (var j = 0; j < item.parts.length; j++) {
        parts.push(addStyle(item.parts[j]))
      }
      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }
    }
  }
}

function createStyleElement () {
  var styleElement = document.createElement('style')
  styleElement.type = 'text/css'
  head.appendChild(styleElement)
  return styleElement
}

function addStyle (obj /* StyleObjectPart */) {
  var update, remove
  var styleElement = document.querySelector('style[' + ssrIdKey + '~="' + obj.id + '"]')

  if (styleElement) {
    if (isProduction) {
      // has SSR styles and in production mode.
      // simply do nothing.
      return noop
    } else {
      // has SSR styles but in dev mode.
      // for some reason Chrome can't handle source map in server-rendered
      // style tags - source maps in <style> only works if the style tag is
      // created and inserted dynamically. So we remove the server rendered
      // styles and inject new ones.
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  if (isOldIE) {
    // use singleton mode for IE9.
    var styleIndex = singletonCounter++
    styleElement = singletonElement || (singletonElement = createStyleElement())
    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)
    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)
  } else {
    // use multi-style-tag mode in all other cases
    styleElement = createStyleElement()
    update = applyToTag.bind(null, styleElement)
    remove = function () {
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  update(obj)

  return function updateStyle (newObj /* StyleObjectPart */) {
    if (newObj) {
      if (newObj.css === obj.css &&
          newObj.media === obj.media &&
          newObj.sourceMap === obj.sourceMap) {
        return
      }
      update(obj = newObj)
    } else {
      remove()
    }
  }
}

var replaceText = (function () {
  var textStore = []

  return function (index, replacement) {
    textStore[index] = replacement
    return textStore.filter(Boolean).join('\n')
  }
})()

function applyToSingletonTag (styleElement, index, remove, obj) {
  var css = remove ? '' : obj.css

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = replaceText(index, css)
  } else {
    var cssNode = document.createTextNode(css)
    var childNodes = styleElement.childNodes
    if (childNodes[index]) styleElement.removeChild(childNodes[index])
    if (childNodes.length) {
      styleElement.insertBefore(cssNode, childNodes[index])
    } else {
      styleElement.appendChild(cssNode)
    }
  }
}

function applyToTag (styleElement, obj) {
  var css = obj.css
  var media = obj.media
  var sourceMap = obj.sourceMap

  if (media) {
    styleElement.setAttribute('media', media)
  }
  if (options.ssrId) {
    styleElement.setAttribute(ssrIdKey, obj.id)
  }

  if (sourceMap) {
    // https://developer.chrome.com/devtools/docs/javascript-debugging
    // this makes source maps inside style tags work properly in Chrome
    css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
    // http://stackoverflow.com/a/26603875
    css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
  }

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild)
    }
    styleElement.appendChild(document.createTextNode(css))
  }
}


/***/ }),

/***/ "4a59":
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__("9b43");
var call = __webpack_require__("1fa8");
var isArrayIter = __webpack_require__("33a4");
var anObject = __webpack_require__("cb7c");
var toLength = __webpack_require__("9def");
var getIterFn = __webpack_require__("27ee");
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),

/***/ "4bb5":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/vue-class-component/dist/vue-class-component.common.js
var vue_class_component_common = __webpack_require__("65d9");

// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js
var vuex_esm = __webpack_require__("2f62");

// CONCATENATED MODULE: ./node_modules/vuex-class/lib/bindings.js


var State = createBindingHelper('computed', vuex_esm["mapState"]);
var Getter = createBindingHelper('computed', vuex_esm["mapGetters"]);
var Action = createBindingHelper('methods', vuex_esm["mapActions"]);
var Mutation = createBindingHelper('methods', vuex_esm["mapMutations"]);
function bindings_namespace(namespace, helper) {
    function createNamespacedHelper(helper) {
        function namespacedHelper(a, b) {
            if (typeof b === 'string') {
                var key = b;
                var proto = a;
                return helper(key, { namespace: namespace })(proto, key);
            }
            var type = a;
            var options = merge(b || {}, { namespace: namespace });
            return helper(type, options);
        }
        return namespacedHelper;
    }
    if (helper) {
        console.warn('[vuex-class] passing the 2nd argument to `namespace` function is deprecated. pass only namespace string instead.');
        return createNamespacedHelper(helper);
    }
    return {
        State: createNamespacedHelper(State),
        Getter: createNamespacedHelper(Getter),
        Mutation: createNamespacedHelper(Mutation),
        Action: createNamespacedHelper(Action)
    };
}
function createBindingHelper(bindTo, mapFn) {
    function makeDecorator(map, namespace) {
        return Object(vue_class_component_common["createDecorator"])(function (componentOptions, key) {
            if (!componentOptions[bindTo]) {
                componentOptions[bindTo] = {};
            }
            var mapObject = (_a = {}, _a[key] = map, _a);
            componentOptions[bindTo][key] = namespace !== undefined
                ? mapFn(namespace, mapObject)[key]
                : mapFn(mapObject)[key];
            var _a;
        });
    }
    function helper(a, b) {
        if (typeof b === 'string') {
            var key = b;
            var proto = a;
            return makeDecorator(key, undefined)(proto, key);
        }
        var namespace = extractNamespace(b);
        var type = a;
        return makeDecorator(type, namespace);
    }
    return helper;
}
function extractNamespace(options) {
    var n = options && options.namespace;
    if (typeof n !== 'string') {
        return undefined;
    }
    if (n[n.length - 1] !== '/') {
        return n + '/';
    }
    return n;
}
function merge(a, b) {
    var res = {};
    [a, b].forEach(function (obj) {
        Object.keys(obj).forEach(function (key) {
            res[key] = obj[key];
        });
    });
    return res;
}

// CONCATENATED MODULE: ./node_modules/vuex-class/lib/index.js
/* concated harmony reexport State */__webpack_require__.d(__webpack_exports__, "State", function() { return State; });
/* concated harmony reexport Getter */__webpack_require__.d(__webpack_exports__, "Getter", function() { return Getter; });
/* concated harmony reexport Action */__webpack_require__.d(__webpack_exports__, "Action", function() { return Action; });
/* concated harmony reexport Mutation */__webpack_require__.d(__webpack_exports__, "Mutation", function() { return Mutation; });
/* concated harmony reexport namespace */__webpack_require__.d(__webpack_exports__, "namespace", function() { return bindings_namespace; });



/***/ }),

/***/ "4bf4":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ac6a");
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("6762");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("2fdb");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("52b5");
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("b18c");





/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QChip',
  props: {
    small: Boolean,
    dense: Boolean,
    tag: Boolean,
    square: Boolean,
    floating: Boolean,
    pointing: {
      type: String,
      validator: function validator(v) {
        return ['up', 'right', 'down', 'left'].includes(v);
      }
    },
    color: String,
    textColor: String,
    icon: String,
    iconRight: String,
    avatar: String,
    closable: Boolean,
    detail: Boolean
  },
  computed: {
    classes: function classes() {
      var _this = this;

      var cls = [];
      this.pointing && cls.push("q-chip-pointing-".concat(this.pointing));
      ['tag', 'square', 'floating', 'pointing', 'small', 'dense'].forEach(function (prop) {
        _this[prop] && cls.push("q-chip-".concat(prop));
      });

      if (this.floating) {
        !this.dense && cls.push('q-chip-dense');
        !this.square && cls.push('q-chip-square');
      }

      if (this.color) {
        cls.push("bg-".concat(this.color));
        !this.textColor && cls.push("text-white");
      }

      if (this.textColor) {
        cls.push("text-".concat(this.textColor));
      }

      return cls;
    }
  },
  methods: {
    __onClick: function __onClick(e) {
      this.$emit('click', e);
    },
    __onMouseDown: function __onMouseDown(e) {
      this.$emit('focus', e);
    },
    __handleKeyDown: function __handleKeyDown(e) {
      if (this.closable && [8, 13, 32].includes(Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_4__[/* getEventKey */ "b"])(e))) {
        Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_4__[/* stopAndPrevent */ "h"])(e);
        this.$emit('hide');
      }
    }
  },
  render: function render(h) {
    var _this2 = this;

    return h('div', {
      staticClass: 'q-chip row no-wrap inline items-center',
      'class': this.classes,
      on: {
        mousedown: this.__onMouseDown,
        touchstart: this.__onMouseDown,
        click: this.__onClick,
        keydown: this.__handleKeyDown
      }
    }, [this.icon || this.avatar ? h('div', {
      staticClass: 'q-chip-side q-chip-left row flex-center',
      'class': {
        'q-chip-detail': this.detail
      }
    }, [this.icon ? h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], {
      staticClass: 'q-chip-icon',
      props: {
        name: this.icon
      }
    }) : this.avatar ? h('img', {
      attrs: {
        src: this.avatar
      }
    }) : null]) : null, h('div', {
      staticClass: 'q-chip-main ellipsis'
    }, this.$slots.default), this.iconRight ? h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], {
      props: {
        name: this.iconRight
      },
      'class': this.closable ? 'on-right q-chip-icon' : 'q-chip-side q-chip-right'
    }) : null, this.closable ? h('div', {
      staticClass: 'q-chip-side q-chip-close q-chip-right row flex-center'
    }, [h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], {
      props: {
        name: this.$q.icon.chip.close
      },
      staticClass: 'cursor-pointer',
      nativeOn: {
        click: function click(e) {
          e && e.stopPropagation();

          _this2.$emit('hide');
        }
      }
    })]) : null]);
  }
});

/***/ }),

/***/ "4bf8":
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__("be13");
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),

/***/ "506f":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("f751");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mixins_item_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("bd60");


/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QItem',
  mixins: [_mixins_item_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]],
  props: {
    active: Boolean,
    link: Boolean
  },
  computed: {
    classes: function classes() {
      return [this.to !== void 0 ? 'q-link' : {
        active: this.active
      }, this.itemClasses];
    }
  },
  render: function render(h) {
    if (this.to !== void 0) {
      return h('router-link', {
        props: Object.assign({}, this.$props, {
          tag: 'a'
        }),
        'class': this.classes
      }, this.$slots.default);
    }

    return h(this.tag, {
      'class': this.classes
    }, this.$slots.default);
  }
});

/***/ }),

/***/ "5147":
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__("2b4c")('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),

/***/ "520a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__("0bfb");

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "525b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _mixins_checkbox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ecdd");
/* harmony import */ var _mixins_option_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("2828");
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("52b5");



/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QCheckbox',
  mixins: [_mixins_checkbox_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"], _mixins_option_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]],
  props: {
    toggleIndeterminate: Boolean,
    indeterminateValue: {
      default: null
    },
    indeterminateIcon: String
  },
  computed: {
    isIndeterminate: function isIndeterminate() {
      return this.value === void 0 || this.value === this.indeterminateValue;
    },
    checkedStyle: function checkedStyle() {
      return this.isTrue ? {
        transition: 'opacity 0ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 800ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',
        opacity: 1,
        transform: 'scale(1)'
      } : {
        transition: 'opacity 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms',
        opacity: 0,
        transform: 'scale(0)'
      };
    },
    indeterminateStyle: function indeterminateStyle() {
      return this.isIndeterminate ? {
        transition: 'opacity 0ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 800ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',
        opacity: 1,
        transform: 'scale(1)'
      } : {
        transition: 'opacity 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms, transform 0ms cubic-bezier(0.23, 1, 0.32, 1) 450ms',
        opacity: 0,
        transform: 'scale(0)'
      };
    },
    uncheckedStyle: function uncheckedStyle() {
      return this.isFalse ? {
        opacity: 1
      } : {
        transition: 'opacity 650ms cubic-bezier(0.23, 1, 0.32, 1) 150ms',
        opacity: 0
      };
    }
  },
  methods: {
    __getContent: function __getContent(h) {
      return [h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], {
        staticClass: 'q-checkbox-icon cursor-pointer',
        props: {
          name: this.uncheckedIcon || this.$q.icon.checkbox.unchecked["mat"]
        },
        style: this.uncheckedStyle
      }), h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], {
        staticClass: 'q-checkbox-icon cursor-pointer absolute-full',
        props: {
          name: this.indeterminateIcon || this.$q.icon.checkbox.indeterminate["mat"]
        },
        style: this.indeterminateStyle
      }), h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], {
        staticClass: 'q-checkbox-icon cursor-pointer absolute-full',
        props: {
          name: this.checkedIcon || this.$q.icon.checkbox.checked["mat"]
        },
        style: this.checkedStyle
      }),  true ? h('div', {
        ref: 'ripple',
        staticClass: 'q-radial-ripple'
      }) : undefined];
    }
  },
  beforeCreate: function beforeCreate() {
    this.__kebabTag = 'q-checkbox';
  }
});

/***/ }),

/***/ "5270":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var transformData = __webpack_require__("c401");
var isCancel = __webpack_require__("2e67");
var defaults = __webpack_require__("2444");
var isAbsoluteURL = __webpack_require__("d925");
var combineURLs = __webpack_require__("e683");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "52a7":
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),

/***/ "52b5":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a481");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_string_starts_with__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("f559");
/* harmony import */ var core_js_modules_es6_string_starts_with__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_starts_with__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("7f7f");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_2__);



var prefix =  true ? 'md' : undefined;
/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QIcon',
  props: {
    name: String,
    color: String,
    size: String
  },
  computed: {
    classes: function classes() {
      var cls;
      var icon = this.name;

      if (!icon) {
        return '';
      } else if (/^fa[s|r|l|b]{0,1} /.test(icon) || icon.startsWith('icon-')) {
        cls = icon;
      } else if (icon.startsWith('bt-')) {
        cls = "bt ".concat(icon);
      } else if (/^ion-(md|ios|logo)/.test(icon)) {
        cls = "ionicons ".concat(icon);
      } else if (icon.startsWith('ion-')) {
        cls = "ionicons ion-".concat(prefix).concat(icon.substr(3));
      } else if (icon.startsWith('mdi-')) {
        cls = "mdi ".concat(icon);
      } else {
        cls = 'material-icons';
      }

      return this.color ? "".concat(cls, " text-").concat(this.color) : cls;
    },
    content: function content() {
      return this.classes.startsWith('material-icons') ? this.name.replace(/ /g, '_') : ' ';
    },
    style: function style() {
      if (this.size) {
        return {
          fontSize: this.size
        };
      }
    }
  },
  render: function render(h) {
    return h('i', {
      staticClass: 'q-icon',
      'class': this.classes,
      style: this.style,
      attrs: {
        'aria-hidden': true
      }
    }, [this.content, this.$slots.default]);
  }
});

/***/ }),

/***/ "551c":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__("2d00");
var global = __webpack_require__("7726");
var ctx = __webpack_require__("9b43");
var classof = __webpack_require__("23c6");
var $export = __webpack_require__("5ca1");
var isObject = __webpack_require__("d3f4");
var aFunction = __webpack_require__("d8e8");
var anInstance = __webpack_require__("f605");
var forOf = __webpack_require__("4a59");
var speciesConstructor = __webpack_require__("ebd6");
var task = __webpack_require__("1991").set;
var microtask = __webpack_require__("8079")();
var newPromiseCapabilityModule = __webpack_require__("a5b8");
var perform = __webpack_require__("9c80");
var userAgent = __webpack_require__("a25f");
var promiseResolve = __webpack_require__("bcaa");
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__("2b4c")('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__("dcbc")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__("7f20")($Promise, PROMISE);
__webpack_require__("7a56")(PROMISE);
Wrapper = __webpack_require__("8378")[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__("5cc5")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),

/***/ "5537":
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__("8378");
var global = __webpack_require__("7726");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__("2d00") ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "559e":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _plugins_platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a60d");

/* harmony default export */ __webpack_exports__["a"] = ({
  data: function data() {
    return {
      canRender: !_plugins_platform_js__WEBPACK_IMPORTED_MODULE_0__[/* onSSR */ "e"]
    };
  },
  mounted: function mounted() {
    this.canRender === false && (this.canRender = true);
  }
});

/***/ }),

/***/ "55dd":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__("5ca1");
var aFunction = __webpack_require__("d8e8");
var toObject = __webpack_require__("4bf8");
var fails = __webpack_require__("79e5");
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__("2f21")($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),

/***/ "5931":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_array_find_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("20d6");
/* harmony import */ var core_js_modules_es6_array_find_index__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find_index__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("7514");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("f751");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("6762");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("2fdb");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _search_QSearch_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("6186");
/* harmony import */ var _popover_QPopover_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("b5b8");
/* harmony import */ var _list_QList_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("1180");
/* harmony import */ var _list_QItemWrapper_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("768b");
/* harmony import */ var _checkbox_QCheckbox_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("525b");
/* harmony import */ var _radio_QRadio_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("dd1f");
/* harmony import */ var _toggle_QToggle_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("bc9b");
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("52b5");
/* harmony import */ var _input_frame_QInputFrame_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("2054");
/* harmony import */ var _chip_QChip_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("4bf4");
/* harmony import */ var _mixins_input_frame_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("cd88");
/* harmony import */ var _mixins_keyboard_selection_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("42b5");


















function defaultFilterFn(terms, obj) {
  return obj.label.toLowerCase().indexOf(terms) > -1;
}

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QSelect',
  mixins: [_mixins_input_frame_js__WEBPACK_IMPORTED_MODULE_15__[/* default */ "a"], _mixins_keyboard_selection_js__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"]],
  props: {
    filter: [Function, Boolean],
    filterPlaceholder: String,
    radio: Boolean,
    placeholder: String,
    separator: Boolean,
    value: {
      required: true
    },
    multiple: Boolean,
    toggle: Boolean,
    chips: Boolean,
    options: {
      type: Array,
      required: true,
      validator: function validator(v) {
        return v.every(function (o) {
          return 'label' in o && 'value' in o;
        });
      }
    },
    chipsColor: String,
    chipsBgColor: String,
    displayValue: String,
    popupMaxHeight: String
  },
  data: function data() {
    return {
      model: this.multiple && Array.isArray(this.value) ? this.value.slice() : this.value,
      terms: '',
      focused: false
    };
  },
  watch: {
    value: function value(val) {
      this.model = this.multiple && Array.isArray(val) ? val.slice() : val;
    },
    visibleOptions: function visibleOptions() {
      this.__keyboardCalcIndex();
    }
  },
  computed: {
    optModel: function optModel() {
      var _this = this;

      if (this.multiple) {
        return this.model.length > 0 ? this.options.map(function (opt) {
          return _this.model.includes(opt.value);
        }) : this.options.map(function (opt) {
          return false;
        });
      }
    },
    visibleOptions: function visibleOptions() {
      var _this2 = this;

      var opts = this.options.map(function (opt, index) {
        return Object.assign({}, opt, {
          index: index
        });
      });

      if (this.filter && this.terms.length) {
        var lowerTerms = this.terms.toLowerCase();
        opts = opts.filter(function (opt) {
          return _this2.filterFn(lowerTerms, opt);
        });
      }

      return opts;
    },
    keyboardMaxIndex: function keyboardMaxIndex() {
      return this.visibleOptions.length - 1;
    },
    filterFn: function filterFn() {
      return typeof this.filter === 'boolean' ? defaultFilterFn : this.filter;
    },
    actualValue: function actualValue() {
      var _this3 = this;

      if (this.displayValue) {
        return this.displayValue;
      }

      if (!this.multiple) {
        var _opt = this.options.find(function (opt) {
          return opt.value === _this3.model;
        });

        return _opt ? _opt.label : '';
      }

      var opt = this.selectedOptions.map(function (opt) {
        return opt.label;
      });
      return opt.length ? opt.join(', ') : '';
    },
    computedClearValue: function computedClearValue() {
      return this.clearValue === void 0 ? this.multiple ? [] : null : this.clearValue;
    },
    isClearable: function isClearable() {
      return this.editable && this.clearable && JSON.stringify(this.computedClearValue) !== JSON.stringify(this.model);
    },
    selectedOptions: function selectedOptions() {
      var _this4 = this;

      if (this.multiple) {
        return this.length > 0 ? this.options.filter(function (opt) {
          return _this4.model.includes(opt.value);
        }) : [];
      }
    },
    hasChips: function hasChips() {
      return this.multiple && this.chips && this.length > 0;
    },
    length: function length() {
      return this.multiple ? this.model.length : [null, undefined, ''].includes(this.model) ? 0 : 1;
    },
    additionalLength: function additionalLength() {
      return this.displayValue && this.displayValue.length > 0;
    }
  },
  methods: {
    togglePopup: function togglePopup() {
      this.$refs.popover && this[this.$refs.popover.showing ? 'hide' : 'show']();
    },
    show: function show() {
      this.__keyboardCalcIndex();

      if (this.$refs.popover) {
        return this.$refs.popover.show();
      }
    },
    hide: function hide() {
      return this.$refs.popover ? this.$refs.popover.hide() : Promise.resolve();
    },
    reposition: function reposition() {
      var popover = this.$refs.popover;

      if (popover && popover.showing) {
        this.$nextTick(function () {
          return popover && popover.reposition();
        });
      }
    },
    __keyboardCalcIndex: function __keyboardCalcIndex() {
      var _this5 = this;

      this.keyboardIndex = -1;
      var sel = this.multiple ? this.selectedOptions.map(function (o) {
        return o.value;
      }) : [this.model];
      this.$nextTick(function () {
        var index = sel === void 0 ? -1 : Math.max(-1, _this5.visibleOptions.findIndex(function (opt) {
          return sel.includes(opt.value);
        }));

        if (index > -1) {
          _this5.keyboardMoveDirection = true;
          setTimeout(function () {
            _this5.keyboardMoveDirection = false;
          }, 500);

          _this5.__keyboardShow(index);
        }
      });
    },
    __keyboardCustomKeyHandle: function __keyboardCustomKeyHandle(key, e) {
      switch (key) {
        case 27:
          if (this.$refs.popover.showing) {
            this.hide();
          }

          break;

        case 13:
        case 32:
          if (!this.$refs.popover.showing) {
            this.show();
          }

          break;
      }
    },
    __keyboardShowTrigger: function __keyboardShowTrigger() {
      this.show();
    },
    __keyboardSetSelection: function __keyboardSetSelection(index) {
      var opt = this.visibleOptions[index];

      if (this.multiple) {
        this.__toggleMultiple(opt.value, opt.disable);
      } else {
        this.__singleSelect(opt.value, opt.disable);
      }
    },
    __keyboardIsSelectableIndex: function __keyboardIsSelectableIndex(index) {
      return index > -1 && index < this.visibleOptions.length && !this.visibleOptions[index].disable;
    },
    __mouseEnterHandler: function __mouseEnterHandler(e, index) {
      if (!this.keyboardMoveDirection) {
        this.keyboardIndex = index;
      }
    },
    __onFocus: function __onFocus() {
      if (this.disable || this.focused) {
        return;
      }

      this.focused = true;
      this.$emit('focus');
    },
    __onShow: function __onShow() {
      if (this.disable) {
        return;
      }

      this.__onFocus();

      if (this.filter && this.$refs.filter) {
        this.$refs.filter.focus();
        this.reposition();
      }
    },
    __onBlur: function __onBlur(e) {
      var _this6 = this;

      if (!this.focused) {
        return;
      }

      setTimeout(function () {
        var el = document.activeElement;

        if (!_this6.$refs.popover || !_this6.$refs.popover.showing || el !== document.body && !_this6.$refs.popover.$el.contains(el)) {
          _this6.__onClose();

          _this6.hide();
        }
      }, 1);
    },
    __onClose: function __onClose(keepFocus) {
      var _this7 = this;

      this.$nextTick(function () {
        if (JSON.stringify(_this7.model) !== JSON.stringify(_this7.value)) {
          _this7.$emit('change', _this7.model);
        }
      });
      this.terms = '';

      if (!this.focused) {
        return;
      }

      if (keepFocus) {
        this.$refs.input && this.$refs.input.$el && this.$refs.input.$el.focus();
        return;
      }

      this.focused = false;
      this.$emit('blur');
    },
    __singleSelect: function __singleSelect(val, disable) {
      if (disable) {
        return;
      }

      this.__emit(val);

      this.hide();
    },
    __toggleMultiple: function __toggleMultiple(value, disable) {
      if (disable) {
        return;
      }

      var model = this.model,
          index = model.indexOf(value);

      if (index > -1) {
        this.$emit('remove', {
          index: index,
          value: model.splice(index, 1)
        });
      } else {
        this.$emit('add', {
          index: model.length,
          value: value
        });
        model.push(value);
      }

      this.$emit('input', model);
    },
    __emit: function __emit(value) {
      var _this8 = this;

      this.$emit('input', value);
      this.$nextTick(function () {
        if (JSON.stringify(value) !== JSON.stringify(_this8.value)) {
          _this8.$emit('change', value);
        }
      });
    },
    __setModel: function __setModel(val, forceUpdate) {
      this.model = val || (this.multiple ? [] : null);
      this.$emit('input', this.model);

      if (forceUpdate || !this.$refs.popover || !this.$refs.popover.showing) {
        this.__onClose(forceUpdate);
      }
    },
    __getChipTextColor: function __getChipTextColor(optColor) {
      if (this.chipsColor) {
        return this.chipsColor;
      }

      if (this.isInvertedLight) {
        return this.invertedLight ? optColor || this.color : 'white';
      }

      if (this.isInverted) {
        return optColor || (this.invertedLight ? 'grey-10' : this.color);
      }

      return this.dark ? optColor || this.color : 'white';
    },
    __getChipBgColor: function __getChipBgColor(optColor) {
      if (this.chipsBgColor) {
        return this.chipsBgColor;
      }

      if (this.isInvertedLight) {
        return this.invertedLight ? 'grey-10' : optColor || this.color;
      }

      if (this.isInverted) {
        return this.invertedLight ? this.color : 'white';
      }

      return this.dark ? 'white' : optColor || this.color;
    }
  },
  render: function render(h) {
    var _this9 = this;

    var child = [];

    if (this.hasChips) {
      var el = h('div', {
        staticClass: 'col row items-center q-input-chips',
        'class': this.alignClass
      }, this.selectedOptions.map(function (opt, index) {
        return h(_chip_QChip_js__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"], {
          key: index,
          props: {
            small: true,
            closable: _this9.editable && !opt.disable,
            color: _this9.__getChipBgColor(opt.color),
            textColor: _this9.__getChipTextColor(opt.color),
            icon: opt.icon,
            iconRight: opt.rightIcon,
            avatar: opt.avatar
          },
          on: {
            hide: function hide() {
              _this9.__toggleMultiple(opt.value, _this9.disable || opt.disable);
            }
          },
          nativeOn: {
            click: function click(e) {
              e.stopPropagation();
            }
          }
        }, [h('div', {
          domProps: {
            innerHTML: opt.label
          }
        })]);
      }));
      child.push(el);
    } else {
      var _el = h('div', {
        staticClass: 'col q-input-target ellipsis',
        'class': this.fakeInputClasses,
        domProps: {
          innerHTML: this.fakeInputValue
        }
      });

      child.push(_el);
    }

    child.push(h(_popover_QPopover_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"], {
      ref: 'popover',
      staticClass: 'column no-wrap',
      'class': this.dark ? 'bg-dark' : null,
      props: {
        cover: true,
        keepOnScreen: true,
        disable: !this.editable,
        anchorClick: false,
        maxHeight: this.popupMaxHeight
      },
      slot: 'after',
      on: {
        show: this.__onShow,
        hide: function hide() {
          _this9.__onClose(true);
        }
      },
      nativeOn: {
        keydown: this.__keyboardHandleKey
      }
    }, [this.filter && h(_search_QSearch_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"], {
      ref: 'filter',
      staticClass: 'col-auto',
      style: 'padding: 10px;',
      props: {
        value: this.terms,
        placeholder: this.filterPlaceholder || this.$q.i18n.label.filter,
        debounce: 100,
        color: this.color,
        dark: this.dark,
        noParentField: true,
        noIcon: true
      },
      on: {
        input: function input(val) {
          _this9.terms = val;

          _this9.reposition();
        }
      }
    }) || void 0, this.visibleOptions.length && h(_list_QList_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"], {
      staticClass: 'no-border scroll',
      props: {
        separator: this.separator,
        dark: this.dark
      }
    }, this.visibleOptions.map(function (opt, index) {
      return h(_list_QItemWrapper_js__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"], {
        key: index,
        'class': [opt.disable ? 'text-faded' : 'cursor-pointer', index === _this9.keyboardIndex ? 'q-select-highlight' : '', opt.disable ? '' : 'cursor-pointer', opt.className || ''],
        props: {
          cfg: opt,
          slotReplace: true,
          active: _this9.multiple ? void 0 : _this9.value === opt.value
        },
        nativeOn: {
          '!click': function click() {
            var action = _this9.multiple ? '__toggleMultiple' : '__singleSelect';

            _this9[action](opt.value, opt.disable);
          },
          mouseenter: function mouseenter(e) {
            !opt.disable && _this9.__mouseEnterHandler(e, index);
          }
        }
      }, [_this9.multiple ? h(_this9.toggle ? _toggle_QToggle_js__WEBPACK_IMPORTED_MODULE_11__[/* default */ "a"] : _checkbox_QCheckbox_js__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"], {
        slot: _this9.toggle ? 'right' : 'left',
        props: {
          keepColor: true,
          color: opt.color || _this9.color,
          dark: _this9.dark,
          value: _this9.optModel[opt.index],
          disable: opt.disable,
          noFocus: true
        }
      }) : _this9.radio && h(_radio_QRadio_js__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"], {
        slot: 'left',
        props: {
          keepColor: true,
          color: opt.color || _this9.color,
          dark: _this9.dark,
          value: _this9.value,
          val: opt.value,
          disable: opt.disable,
          noFocus: true
        }
      }) || void 0]);
    })) || void 0]));

    if (this.isClearable) {
      child.push(h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"], {
        slot: 'after',
        staticClass: 'q-if-control',
        props: {
          name: this.$q.icon.input["clear".concat(this.isInverted ? 'Inverted' : '')]
        },
        nativeOn: {
          click: this.clear
        }
      }));
    }

    child.push(h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"], this.readonly ? {
      slot: 'after'
    } : {
      slot: 'after',
      staticClass: 'q-if-control',
      props: {
        name: this.$q.icon.input.dropdown
      }
    }));
    return h(_input_frame_QInputFrame_js__WEBPACK_IMPORTED_MODULE_13__[/* default */ "a"], {
      ref: 'input',
      staticClass: 'q-select',
      props: {
        prefix: this.prefix,
        suffix: this.suffix,
        stackLabel: this.stackLabel,
        floatLabel: this.floatLabel,
        error: this.error,
        warning: this.warning,
        disable: this.disable,
        readonly: this.readonly,
        inverted: this.inverted,
        invertedLight: this.invertedLight,
        dark: this.dark,
        hideUnderline: this.hideUnderline,
        before: this.before,
        after: this.after,
        color: this.color,
        noParentField: this.noParentField,
        focused: this.focused,
        focusable: true,
        length: this.length,
        additionalLength: this.additionalLength
      },
      nativeOn: {
        click: this.togglePopup,
        focus: this.__onFocus,
        blur: this.__onBlur,
        keydown: this.__keyboardHandleKey
      }
    }, child);
  }
});

/***/ }),

/***/ "5958":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6762");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("2fdb");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("ac6a");
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("456d");
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_3__);




var alignMap = {
  left: 'start',
  center: 'center',
  right: 'end',
  between: 'between',
  around: 'around'
},
    alignValues = Object.keys(alignMap);
/* harmony default export */ __webpack_exports__["a"] = ({
  props: {
    align: {
      type: String,
      default: 'center',
      validator: function validator(v) {
        return alignValues.includes(v);
      }
    }
  },
  computed: {
    alignClass: function alignClass() {
      return "justify-".concat(alignMap[this.align]);
    }
  }
});

/***/ }),

/***/ "5ca1":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("7726");
var core = __webpack_require__("8378");
var hide = __webpack_require__("32e9");
var redefine = __webpack_require__("2aba");
var ctx = __webpack_require__("9b43");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "5cc5":
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__("2b4c")('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),

/***/ "5d8b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.assign.js
var es6_object_assign = __webpack_require__("f751");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.number.is-integer.js
var es6_number_is_integer = __webpack_require__("7cdf");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.number.constructor.js
var es6_number_constructor = __webpack_require__("c5f6");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js
var es7_array_includes = __webpack_require__("6762");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.includes.js
var es6_string_includes = __webpack_require__("2fdb");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/input-frame.js
var input_frame = __webpack_require__("cd88");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/input.js
var mixins_input = __webpack_require__("d7db");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/input/input-types.js
/* harmony default export */ var input_types = (['text', 'textarea', 'email', 'search', 'tel', 'file', 'number', 'password', 'url', 'time', 'date']);
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/frame-debounce.js
var frame_debounce = __webpack_require__("8e2f");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/format.js
var format = __webpack_require__("177b");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/observables/QResizeObservable.js
var QResizeObservable = __webpack_require__("363b");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/input-frame/QInputFrame.js
var QInputFrame = __webpack_require__("2054");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinner.js
var QSpinner = __webpack_require__("b70a");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/icon/QIcon.js
var QIcon = __webpack_require__("52b5");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/input/QInput.js














/* harmony default export */ var QInput = __webpack_exports__["a"] = ({
  name: 'QInput',
  mixins: [input_frame["a" /* default */], mixins_input["a" /* default */]],
  props: {
    value: {
      required: true
    },
    type: {
      type: String,
      default: 'text',
      validator: function validator(t) {
        return input_types.includes(t);
      }
    },
    align: {
      type: String,
      validator: function validator(v) {
        return ['left', 'center', 'right'].includes(v);
      }
    },
    noPassToggle: Boolean,
    numericKeyboardToggle: Boolean,
    readonly: Boolean,
    decimals: Number,
    step: Number,
    upperCase: Boolean,
    lowerCase: Boolean,
    initialShowPassword: Boolean
  },
  data: function data() {
    var _this = this;

    return {
      showPass: this.initialShowPassword,
      showNumber: true,
      model: this.value,
      watcher: null,
      autofilled: false,
      shadow: {
        val: this.model,
        set: this.__set,
        setNav: this.__set,
        loading: false,
        watched: 0,
        isEditable: function isEditable() {
          return _this.editable;
        },
        isDark: function isDark() {
          return _this.dark;
        },
        hasFocus: function hasFocus() {
          return document.activeElement === _this.$refs.input;
        },
        register: function register() {
          _this.shadow.watched += 1;

          _this.__watcherRegister();
        },
        unregister: function unregister() {
          _this.shadow.watched = Math.max(0, _this.shadow.watched - 1);

          _this.__watcherUnregister();
        },
        getEl: function getEl() {
          return _this.$refs.input;
        }
      }
    };
  },
  watch: {
    value: function value(v) {
      var vOldNum = parseFloat(this.model),
          vNewNum = parseFloat(v);

      if (!this.isNumber || this.isNumberError || isNaN(vOldNum) || isNaN(vNewNum) || vOldNum !== vNewNum) {
        this.model = v;
      }

      this.isNumberError = false;
      this.isNegZero = false;
    },
    isTextarea: function isTextarea(v) {
      this[v ? '__watcherRegister' : '__watcherUnregister']();
    },
    '$attrs.rows': function $attrsRows() {
      this.isTextarea && this.__updateArea();
    }
  },
  provide: function provide() {
    return {
      __input: this.shadow
    };
  },
  computed: {
    isNumber: function isNumber() {
      return this.type === 'number';
    },
    isPassword: function isPassword() {
      return this.type === 'password';
    },
    isTextarea: function isTextarea() {
      return this.type === 'textarea';
    },
    isLoading: function isLoading() {
      return this.loading || this.shadow.watched && this.shadow.loading;
    },
    keyboardToggle: function keyboardToggle() {
      return this.$q.platform.is.mobile && this.isNumber && this.numericKeyboardToggle;
    },
    inputType: function inputType() {
      if (this.isPassword) {
        return this.showPass && this.editable ? 'text' : 'password';
      }

      return this.isNumber ? this.showNumber || !this.editable ? 'number' : 'text' : this.type;
    },
    inputClasses: function inputClasses() {
      var classes = [];
      this.align && classes.push("text-".concat(this.align));
      this.autofilled && classes.push('q-input-autofill');
      return classes;
    },
    length: function length() {
      return this.model !== null && this.model !== undefined ? ('' + this.model).length : 0;
    },
    computedClearValue: function computedClearValue() {
      return this.clearValue === void 0 ? this.isNumber ? null : '' : this.clearValue;
    },
    computedStep: function computedStep() {
      return this.step || (this.decimals ? Math.pow(10, -this.decimals) : 'any');
    },
    frameProps: function frameProps() {
      return {
        prefix: this.prefix,
        suffix: this.suffix,
        stackLabel: this.stackLabel,
        floatLabel: this.floatLabel,
        placeholder: this.placeholder,
        error: this.error,
        warning: this.warning,
        disable: this.disable,
        readonly: this.readonly,
        inverted: this.inverted,
        invertedLight: this.invertedLight,
        dark: this.dark,
        hideUnderline: this.hideUnderline,
        before: this.before,
        after: this.after,
        color: this.color,
        noParentField: this.noParentField,
        focused: this.focused,
        length: this.autofilled + this.length
      };
    }
  },
  methods: {
    togglePass: function togglePass() {
      this.showPass = !this.showPass;
      clearTimeout(this.timer);
      this.focus();
    },
    toggleNumber: function toggleNumber() {
      this.showNumber = !this.showNumber;
      clearTimeout(this.timer);
      this.focus();
    },
    __clearTimer: function __clearTimer() {
      var _this2 = this;

      this.$nextTick(function () {
        return clearTimeout(_this2.timer);
      });
    },
    __onAnimationStart: function __onAnimationStart(e) {
      if (e.animationName.indexOf('webkit-autofill-') === 0) {
        var value = e.animationName === 'webkit-autofill-on';

        if (value !== this.autofilled) {
          e.value = this.autofilled = value;
          e.el = this;
          return this.$emit('autofill', e);
        }
      }
    },
    __setModel: function __setModel(val) {
      clearTimeout(this.timer);
      this.focus();

      this.__set(this.isNumber && val === 0 ? val : val || (this.isNumber ? null : ''), true);
    },
    __set: function __set(e, forceUpdate) {
      var _this3 = this;

      var val = e && e.target ? e.target.value : e;

      if (this.isNumber) {
        this.isNegZero = 1 / val === -Infinity;
        var forcedValue = this.isNegZero ? -0 : val;
        this.model = val;
        val = parseFloat(val);

        if (isNaN(val) || this.isNegZero) {
          this.isNumberError = true;

          if (forceUpdate) {
            this.$emit('input', forcedValue);
            this.$nextTick(function () {
              if (String(1 / forcedValue) !== String(1 / _this3.value)) {
                _this3.$emit('change', forcedValue);
              }
            });
          }

          return;
        }

        this.isNumberError = false;

        if (Number.isInteger(this.decimals)) {
          val = parseFloat(val.toFixed(this.decimals));
        }
      } else {
        if (this.lowerCase) {
          val = val.toLowerCase();
        } else if (this.upperCase) {
          val = val.toUpperCase();
        }

        this.model = val;
      }

      this.$emit('input', val);

      if (forceUpdate) {
        this.$nextTick(function () {
          if (JSON.stringify(val) !== JSON.stringify(_this3.value)) {
            _this3.$emit('change', val);
          }
        });
      }
    },
    __updateArea: function __updateArea() {
      var shadow = this.$refs.shadow,
          input = this.$refs.input;

      if (shadow && input) {
        var sH = shadow.scrollHeight,
            h = Object(format["a" /* between */])(sH, shadow.offsetHeight, this.maxHeight || sH);
        input.style.height = "".concat(h, "px");
        input.style.overflowY = this.maxHeight && h < sH ? 'scroll' : 'hidden';
      }
    },
    __watcher: function __watcher(value) {
      if (this.isTextarea) {
        this.__updateArea();
      }

      if (this.shadow.watched) {
        this.shadow.val = value;
      }
    },
    __watcherRegister: function __watcherRegister() {
      if (!this.watcher) {
        this.watcher = this.$watch('model', this.__watcher);
      }
    },
    __watcherUnregister: function __watcherUnregister(forceUnregister) {
      if (this.watcher && (forceUnregister || !this.isTextarea && !this.shadow.watched)) {
        this.watcher();
        this.watcher = null;
      }
    },
    __getTextarea: function __getTextarea(h) {
      var attrs = Object.assign({
        rows: 1
      }, this.$attrs);
      return h('div', {
        staticClass: 'col row relative-position'
      }, [h(QResizeObservable["a" /* default */], {
        on: {
          resize: this.__updateArea
        }
      }), h('textarea', {
        ref: 'shadow',
        staticClass: 'col q-input-target q-input-shadow absolute-top',
        domProps: {
          value: this.model
        },
        attrs: attrs
      }), h('textarea', {
        ref: 'input',
        staticClass: 'col q-input-target q-input-area',
        attrs: Object.assign({}, attrs, {
          placeholder: this.inputPlaceholder,
          disabled: this.disable,
          readonly: this.readonly
        }),
        domProps: {
          value: this.model
        },
        on: {
          input: this.__set,
          focus: this.__onFocus,
          blur: this.__onInputBlur,
          keydown: this.__onKeydown,
          keyup: this.__onKeyup,
          paste: this.__onPaste
        }
      })]);
    },
    __getInput: function __getInput(h) {
      return h('input', {
        ref: 'input',
        staticClass: 'col q-input-target q-no-input-spinner ellipsis',
        'class': this.inputClasses,
        attrs: Object.assign({}, this.$attrs, {
          type: this.inputType,
          placeholder: this.inputPlaceholder,
          disabled: this.disable,
          readonly: this.readonly,
          step: this.computedStep
        }),
        domProps: {
          value: this.model
        },
        on: {
          input: this.__set,
          focus: this.__onFocus,
          blur: this.__onInputBlur,
          keydown: this.__onKeydown,
          keyup: this.__onKeyup,
          paste: this.__onPaste,
          animationstart: this.__onAnimationStart
        }
      });
    }
  },
  mounted: function mounted() {
    this.__updateArea = Object(frame_debounce["a" /* default */])(this.__updateArea);

    if (this.isTextarea) {
      this.__updateArea();

      this.__watcherRegister();
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.__watcherUnregister(true);
  },
  render: function render(h) {
    return h(QInputFrame["a" /* default */], {
      staticClass: 'q-input',
      props: this.frameProps,
      on: {
        click: this.__onClick,
        focus: this.__onFocus,
        paste: this.__onPaste
      }
    }, [].concat(this.$slots.before).concat([this.isTextarea ? this.__getTextarea(h) : this.__getInput(h), !this.disable && this.isPassword && !this.noPassToggle && (this.initialShowPassword || this.length) && h(QIcon["a" /* default */], {
      slot: 'after',
      staticClass: 'q-if-control',
      props: {
        name: this.$q.icon.input[this.showPass ? 'showPass' : 'hidePass']
      },
      nativeOn: {
        mousedown: this.__clearTimer,
        touchstart: this.__clearTimer,
        click: this.togglePass
      }
    }) || void 0, this.editable && this.keyboardToggle && h(QIcon["a" /* default */], {
      slot: 'after',
      staticClass: 'q-if-control',
      props: {
        name: this.$q.icon.input[this.showNumber ? 'showNumber' : 'hideNumber']
      },
      nativeOn: {
        mousedown: this.__clearTimer,
        touchstart: this.__clearTimer,
        click: this.toggleNumber
      }
    }) || void 0, this.isClearable && h(QIcon["a" /* default */], {
      slot: 'after',
      staticClass: 'q-if-control',
      props: {
        name: this.$q.icon.input["clear".concat(this.isInverted ? 'Inverted' : '')]
      },
      nativeOn: {
        mousedown: this.__clearTimer,
        touchstart: this.__clearTimer,
        click: this.clear
      }
    }) || void 0, this.isLoading && (this.$slots.loading ? h('div', {
      staticClass: 'q-if-control',
      slot: 'after'
    }, this.$slots.loading) : h(QSpinner["a" /* default */], {
      slot: 'after',
      staticClass: 'q-if-control',
      props: {
        size: '24px'
      }
    })) || void 0]).concat(this.$slots.after).concat(this.$slots.default ? h('div', {
      staticClass: 'absolute-full no-pointer-events',
      slot: 'after'
    }, this.$slots.default) : void 0));
  }
});

/***/ }),

/***/ "5dbc":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("d3f4");
var setPrototypeOf = __webpack_require__("8b97").set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),

/***/ "5df3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__("02f4")(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__("01f9")(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "5eda":
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__("5ca1");
var core = __webpack_require__("8378");
var fails = __webpack_require__("79e5");
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),

/***/ "5f1b":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var classof = __webpack_require__("23c6");
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};


/***/ }),

/***/ "60de":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/KFOkCnqEu92Fr1MmgVxIIzQ.e9dbbe8a.woff";

/***/ }),

/***/ "613b":
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__("5537")('keys');
var uid = __webpack_require__("ca5a");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "6186":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("386d");
/* harmony import */ var core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_search__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _input_QInput_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("5d8b");
/* harmony import */ var _mixins_input_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("d7db");
/* harmony import */ var _mixins_input_frame_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("cd88");





/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QSearch',
  mixins: [_mixins_input_frame_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"], _mixins_input_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"]],
  props: {
    value: {
      required: true
    },
    type: {
      type: String,
      default: 'search'
    },
    debounce: {
      type: Number,
      default: 300
    },
    icon: String,
    noIcon: Boolean,
    upperCase: Boolean,
    lowerCase: Boolean
  },
  data: function data() {
    return {
      model: this.value,
      childDebounce: false
    };
  },
  provide: function provide() {
    var _this = this;

    var set = function set(val) {
      if (_this.model !== val) {
        _this.model = val;
      }
    };

    return {
      __inputDebounce: {
        set: set,
        setNav: set,
        setChildDebounce: function setChildDebounce(v) {
          _this.childDebounce = v;
        }
      }
    };
  },
  watch: {
    value: function value(v) {
      this.model = v;
    },
    model: function model(val) {
      var _this2 = this;

      clearTimeout(this.timer);

      if (this.value === val) {
        return;
      }

      if (!val && val !== 0) {
        this.model = this.type === 'number' ? null : '';
      }

      this.timer = setTimeout(function () {
        _this2.$emit('input', _this2.model);
      }, this.debounceValue);
    }
  },
  computed: {
    debounceValue: function debounceValue() {
      return this.childDebounce ? 0 : this.debounce;
    },
    computedClearValue: function computedClearValue() {
      return this.isNumber && this.clearValue === 0 ? this.clearValue : this.clearValue || (this.type === 'number' ? null : '');
    },
    controlBefore: function controlBefore() {
      var before = (this.before || []).slice();

      if (!this.noIcon) {
        before.unshift({
          icon: this.icon || this.$q.icon.search.icon,
          handler: this.focus
        });
      }

      return before;
    },
    controlAfter: function controlAfter() {
      var after = (this.after || []).slice();

      if (this.isClearable) {
        after.push({
          icon: this.$q.icon.search["clear".concat(this.isInverted ? 'Inverted' : '')],
          handler: this.clear
        });
      }

      return after;
    }
  },
  methods: {
    clear: function clear(evt) {
      this.$refs.input.clear(evt);
    }
  },
  render: function render(h) {
    var _this3 = this;

    return h(_input_QInput_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], {
      ref: 'input',
      staticClass: 'q-search',
      props: {
        value: this.model,
        type: this.type,
        autofocus: this.autofocus,
        placeholder: this.placeholder || this.$q.i18n.label.search,
        disable: this.disable,
        readonly: this.readonly,
        error: this.error,
        warning: this.warning,
        align: this.align,
        noParentField: this.noParentField,
        floatLabel: this.floatLabel,
        stackLabel: this.stackLabel,
        prefix: this.prefix,
        suffix: this.suffix,
        inverted: this.inverted,
        invertedLight: this.invertedLight,
        dark: this.dark,
        hideUnderline: this.hideUnderline,
        color: this.color,
        rows: this.rows,
        before: this.controlBefore,
        after: this.controlAfter,
        clearValue: this.clearValue,
        upperCase: this.upperCase,
        lowerCase: this.lowerCase
      },
      attrs: this.$attrs,
      on: {
        input: function input(v) {
          _this3.model = v;
        },
        focus: this.__onFocus,
        blur: this.__onBlur,
        keyup: this.__onKeyup,
        keydown: this.__onKeydown,
        click: this.__onClick,
        paste: this.__onPaste,
        clear: function clear(val) {
          _this3.$emit('clear', val);

          _this3.__emit();
        }
      }
    }, this.$slots.default);
  }
});

/***/ }),

/***/ "626a":
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__("2d95");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),

/***/ "62a9":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("55dd");
/* harmony import */ var core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_sort__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("7f7f");
/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("52b5");



/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QTh',
  props: {
    props: Object,
    autoWidth: Boolean
  },
  render: function render(h) {
    var _this = this;

    if (!this.props) {
      return h('td', {
        'class': {
          'q-table-col-auto-width': this.autoWidth
        }
      }, this.$slots.default);
    }

    var col;
    var name = this.$vnode.key,
        child = [].concat(this.$slots.default);

    if (name) {
      col = this.props.colsMap[name];

      if (!col) {
        return;
      }
    } else {
      col = this.props.col;
    }

    if (col.sortable) {
      var action = col.align === 'right' ? 'unshift' : 'push';
      child[action](h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], {
        props: {
          name: this.$q.icon.table.arrowUp
        },
        staticClass: col.__iconClass
      }));
    }

    return h('th', {
      'class': [col.__thClass, {
        'q-table-col-auto-width': this.autoWidth
      }],
      on: col.sortable ? {
        click: function click() {
          _this.props.sort(col);
        }
      } : null
    }, child);
  }
});

/***/ }),

/***/ "6458":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var components_namespaceObject = {};
__webpack_require__.r(components_namespaceObject);
__webpack_require__.d(components_namespaceObject, "QActionSheet", function() { return QActionSheet; });
__webpack_require__.d(components_namespaceObject, "QAjaxBar", function() { return QAjaxBar; });
__webpack_require__.d(components_namespaceObject, "QAlert", function() { return QAlert["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QAutocomplete", function() { return QAutocomplete; });
__webpack_require__.d(components_namespaceObject, "QBreadcrumbs", function() { return QBreadcrumbs; });
__webpack_require__.d(components_namespaceObject, "QBreadcrumbsEl", function() { return QBreadcrumbsEl; });
__webpack_require__.d(components_namespaceObject, "QBtn", function() { return QBtn["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QBtnGroup", function() { return QBtnGroup; });
__webpack_require__.d(components_namespaceObject, "QBtnDropdown", function() { return QBtnDropdown; });
__webpack_require__.d(components_namespaceObject, "QBtnToggle", function() { return QBtnToggle; });
__webpack_require__.d(components_namespaceObject, "QCard", function() { return QCard; });
__webpack_require__.d(components_namespaceObject, "QCardTitle", function() { return QCardTitle; });
__webpack_require__.d(components_namespaceObject, "QCardMain", function() { return QCardMain; });
__webpack_require__.d(components_namespaceObject, "QCardActions", function() { return QCardActions; });
__webpack_require__.d(components_namespaceObject, "QCardMedia", function() { return QCardMedia; });
__webpack_require__.d(components_namespaceObject, "QCardSeparator", function() { return QCardSeparator; });
__webpack_require__.d(components_namespaceObject, "QCarousel", function() { return QCarousel; });
__webpack_require__.d(components_namespaceObject, "QCarouselSlide", function() { return QCarouselSlide; });
__webpack_require__.d(components_namespaceObject, "QCarouselControl", function() { return QCarouselControl; });
__webpack_require__.d(components_namespaceObject, "QChatMessage", function() { return QChatMessage; });
__webpack_require__.d(components_namespaceObject, "QCheckbox", function() { return QCheckbox["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QChip", function() { return QChip["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QChipsInput", function() { return QChipsInput; });
__webpack_require__.d(components_namespaceObject, "QCollapsible", function() { return QCollapsible; });
__webpack_require__.d(components_namespaceObject, "QColor", function() { return QColor; });
__webpack_require__.d(components_namespaceObject, "QColorPicker", function() { return QColorPicker; });
__webpack_require__.d(components_namespaceObject, "QContextMenu", function() { return QContextMenu; });
__webpack_require__.d(components_namespaceObject, "QDatetime", function() { return QDatetime; });
__webpack_require__.d(components_namespaceObject, "QDatetimePicker", function() { return QDatetimePicker_mat; });
__webpack_require__.d(components_namespaceObject, "QDialog", function() { return QDialog; });
__webpack_require__.d(components_namespaceObject, "QEditor", function() { return QEditor; });
__webpack_require__.d(components_namespaceObject, "QFab", function() { return QFab; });
__webpack_require__.d(components_namespaceObject, "QFabAction", function() { return QFabAction; });
__webpack_require__.d(components_namespaceObject, "QField", function() { return QField; });
__webpack_require__.d(components_namespaceObject, "QIcon", function() { return QIcon["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QInfiniteScroll", function() { return QInfiniteScroll; });
__webpack_require__.d(components_namespaceObject, "QInnerLoading", function() { return QInnerLoading; });
__webpack_require__.d(components_namespaceObject, "QInput", function() { return QInput["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QInputFrame", function() { return QInputFrame["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QJumbotron", function() { return QJumbotron; });
__webpack_require__.d(components_namespaceObject, "QKnob", function() { return QKnob; });
__webpack_require__.d(components_namespaceObject, "QLayout", function() { return QLayout["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QLayoutDrawer", function() { return QLayoutDrawer["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QLayoutFooter", function() { return QLayoutFooter; });
__webpack_require__.d(components_namespaceObject, "QLayoutHeader", function() { return QLayoutHeader["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QPage", function() { return QPage["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QPageContainer", function() { return QPageContainer["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QPageSticky", function() { return QPageSticky; });
__webpack_require__.d(components_namespaceObject, "QItem", function() { return QItem["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QItemSeparator", function() { return QItemSeparator; });
__webpack_require__.d(components_namespaceObject, "QItemMain", function() { return QItemMain["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QItemSide", function() { return QItemSide["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QItemTile", function() { return QItemTile; });
__webpack_require__.d(components_namespaceObject, "QItemWrapper", function() { return QItemWrapper["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QList", function() { return QList["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QListHeader", function() { return QListHeader["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QModal", function() { return QModal; });
__webpack_require__.d(components_namespaceObject, "QModalLayout", function() { return QModalLayout; });
__webpack_require__.d(components_namespaceObject, "QNoSsr", function() { return QNoSsr; });
__webpack_require__.d(components_namespaceObject, "QResizeObservable", function() { return QResizeObservable["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QScrollObservable", function() { return QScrollObservable["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QWindowResizeObservable", function() { return QWindowResizeObservable; });
__webpack_require__.d(components_namespaceObject, "QOptionGroup", function() { return QOptionGroup; });
__webpack_require__.d(components_namespaceObject, "QPagination", function() { return QPagination; });
__webpack_require__.d(components_namespaceObject, "QParallax", function() { return QParallax; });
__webpack_require__.d(components_namespaceObject, "QPopover", function() { return QPopover["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QPopupEdit", function() { return QPopupEdit; });
__webpack_require__.d(components_namespaceObject, "QProgress", function() { return QProgress["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QPullToRefresh", function() { return QPullToRefresh; });
__webpack_require__.d(components_namespaceObject, "QRadio", function() { return QRadio["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QRange", function() { return QRange; });
__webpack_require__.d(components_namespaceObject, "QRating", function() { return QRating; });
__webpack_require__.d(components_namespaceObject, "QScrollArea", function() { return QScrollArea; });
__webpack_require__.d(components_namespaceObject, "QSearch", function() { return QSearch["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QSelect", function() { return QSelect["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QSlideTransition", function() { return QSlideTransition; });
__webpack_require__.d(components_namespaceObject, "QSlider", function() { return QSlider; });
__webpack_require__.d(components_namespaceObject, "QSpinner", function() { return QSpinner["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QSpinnerAudio", function() { return QSpinnerAudio; });
__webpack_require__.d(components_namespaceObject, "QSpinnerBall", function() { return QSpinnerBall; });
__webpack_require__.d(components_namespaceObject, "QSpinnerBars", function() { return QSpinnerBars; });
__webpack_require__.d(components_namespaceObject, "QSpinnerCircles", function() { return QSpinnerCircles; });
__webpack_require__.d(components_namespaceObject, "QSpinnerComment", function() { return QSpinnerComment; });
__webpack_require__.d(components_namespaceObject, "QSpinnerCube", function() { return QSpinnerCube; });
__webpack_require__.d(components_namespaceObject, "QSpinnerDots", function() { return QSpinnerDots; });
__webpack_require__.d(components_namespaceObject, "QSpinnerFacebook", function() { return QSpinnerFacebook; });
__webpack_require__.d(components_namespaceObject, "QSpinnerGears", function() { return QSpinnerGears; });
__webpack_require__.d(components_namespaceObject, "QSpinnerGrid", function() { return QSpinnerGrid; });
__webpack_require__.d(components_namespaceObject, "QSpinnerHearts", function() { return QSpinnerHearts; });
__webpack_require__.d(components_namespaceObject, "QSpinnerHourglass", function() { return QSpinnerHourglass; });
__webpack_require__.d(components_namespaceObject, "QSpinnerInfinity", function() { return QSpinnerInfinity; });
__webpack_require__.d(components_namespaceObject, "QSpinnerIos", function() { return QSpinner_ios; });
__webpack_require__.d(components_namespaceObject, "QSpinnerMat", function() { return QSpinner_mat["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QSpinnerOval", function() { return QSpinnerOval; });
__webpack_require__.d(components_namespaceObject, "QSpinnerPie", function() { return QSpinnerPie; });
__webpack_require__.d(components_namespaceObject, "QSpinnerPuff", function() { return QSpinnerPuff; });
__webpack_require__.d(components_namespaceObject, "QSpinnerRadio", function() { return QSpinnerRadio; });
__webpack_require__.d(components_namespaceObject, "QSpinnerRings", function() { return QSpinnerRings; });
__webpack_require__.d(components_namespaceObject, "QSpinnerTail", function() { return QSpinnerTail; });
__webpack_require__.d(components_namespaceObject, "QStep", function() { return QStep; });
__webpack_require__.d(components_namespaceObject, "QStepper", function() { return QStepper; });
__webpack_require__.d(components_namespaceObject, "QStepperNavigation", function() { return QStepperNavigation; });
__webpack_require__.d(components_namespaceObject, "QRouteTab", function() { return QRouteTab; });
__webpack_require__.d(components_namespaceObject, "QTab", function() { return QTab; });
__webpack_require__.d(components_namespaceObject, "QTabPane", function() { return QTabPane; });
__webpack_require__.d(components_namespaceObject, "QTabs", function() { return QTabs; });
__webpack_require__.d(components_namespaceObject, "QTable", function() { return QTable["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QTh", function() { return QTh["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QTr", function() { return QTr; });
__webpack_require__.d(components_namespaceObject, "QTd", function() { return QTd; });
__webpack_require__.d(components_namespaceObject, "QTableColumns", function() { return QTableColumns; });
__webpack_require__.d(components_namespaceObject, "QTimeline", function() { return QTimeline; });
__webpack_require__.d(components_namespaceObject, "QTimelineEntry", function() { return QTimelineEntry; });
__webpack_require__.d(components_namespaceObject, "QToggle", function() { return QToggle["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QToolbar", function() { return QToolbar["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QToolbarTitle", function() { return QToolbarTitle["a" /* default */]; });
__webpack_require__.d(components_namespaceObject, "QTooltip", function() { return QTooltip; });
__webpack_require__.d(components_namespaceObject, "QTree", function() { return QTree; });
__webpack_require__.d(components_namespaceObject, "QUploader", function() { return QUploader; });
__webpack_require__.d(components_namespaceObject, "QVideo", function() { return QVideo; });
var directives_namespaceObject = {};
__webpack_require__.r(directives_namespaceObject);
__webpack_require__.d(directives_namespaceObject, "BackToTop", function() { return back_to_top; });
__webpack_require__.d(directives_namespaceObject, "CloseOverlay", function() { return close_overlay; });
__webpack_require__.d(directives_namespaceObject, "GoBack", function() { return go_back; });
__webpack_require__.d(directives_namespaceObject, "Ripple", function() { return ripple["a" /* default */]; });
__webpack_require__.d(directives_namespaceObject, "ScrollFire", function() { return scroll_fire; });
__webpack_require__.d(directives_namespaceObject, "Scroll", function() { return directives_scroll; });
__webpack_require__.d(directives_namespaceObject, "TouchHold", function() { return touch_hold; });
__webpack_require__.d(directives_namespaceObject, "TouchPan", function() { return touch_pan["a" /* default */]; });
__webpack_require__.d(directives_namespaceObject, "TouchSwipe", function() { return touch_swipe["a" /* default */]; });
var plugins_namespaceObject = {};
__webpack_require__.r(plugins_namespaceObject);
__webpack_require__.d(plugins_namespaceObject, "ActionSheet", function() { return action_sheet; });
__webpack_require__.d(plugins_namespaceObject, "AddressbarColor", function() { return addressbar_color; });
__webpack_require__.d(plugins_namespaceObject, "AppFullscreen", function() { return app_fullscreen; });
__webpack_require__.d(plugins_namespaceObject, "AppVisibility", function() { return app_visibility; });
__webpack_require__.d(plugins_namespaceObject, "Cookies", function() { return cookies; });
__webpack_require__.d(plugins_namespaceObject, "Dialog", function() { return dialog; });
__webpack_require__.d(plugins_namespaceObject, "LoadingBar", function() { return loading_bar; });
__webpack_require__.d(plugins_namespaceObject, "Loading", function() { return loading; });
__webpack_require__.d(plugins_namespaceObject, "Meta", function() { return plugins_meta; });
__webpack_require__.d(plugins_namespaceObject, "Notify", function() { return notify["a" /* default */]; });
__webpack_require__.d(plugins_namespaceObject, "Platform", function() { return platform["a" /* default */]; });
__webpack_require__.d(plugins_namespaceObject, "Screen", function() { return screen; });
__webpack_require__.d(plugins_namespaceObject, "LocalStorage", function() { return local_storage; });
__webpack_require__.d(plugins_namespaceObject, "SessionStorage", function() { return session_storage; });

// EXTERNAL MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/objectSpread.js
var objectSpread = __webpack_require__("efdb");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/vue-plugin.js + 6 modules
var vue_plugin = __webpack_require__("e84f");

// EXTERNAL MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js
var defineProperty = __webpack_require__("fc11");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js
var web_dom_iterable = __webpack_require__("ac6a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.assign.js
var es6_object_assign = __webpack_require__("f751");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js
var es7_array_includes = __webpack_require__("6762");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.includes.js
var es6_string_includes = __webpack_require__("2fdb");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/escape-key.js
var escape_key = __webpack_require__("6f68");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/model-toggle.js
var model_toggle = __webpack_require__("fb40");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/prevent-scroll.js
var prevent_scroll = __webpack_require__("f59b");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/modal/QModal.js







var positions = {
  top: 'items-start justify-center with-backdrop',
  bottom: 'items-end justify-center with-backdrop',
  right: 'items-center justify-end with-backdrop',
  left: 'items-center justify-start with-backdrop'
};
var positionCSS =  true ? {
  maxHeight: '80vh',
  height: 'auto'
} : undefined;

function additionalCSS(position) {
  var css = {};

  if (['left', 'right'].includes(position)) {
    css.maxWidth = '90vw';
  }

  if (['left', 'top'].includes(position)) {
    css.borderTopLeftRadius = 0;
  }

  if (['right', 'top'].includes(position)) {
    css.borderTopRightRadius = 0;
  }

  if (['left', 'bottom'].includes(position)) {
    css.borderBottomLeftRadius = 0;
  }

  if (['right', 'bottom'].includes(position)) {
    css.borderBottomRightRadius = 0;
  }

  return css;
}

var modals = {
  responsive: 0,
  maximized: 0
};
/* harmony default export */ var QModal = ({
  name: 'QModal',
  mixins: [model_toggle["a" /* default */]],
  provide: function provide() {
    var _this = this;

    return {
      __qmodal: {
        register: function register(layout) {
          if (_this.layout !== layout) {
            _this.layout = layout;
          }
        },
        unregister: function unregister(layout) {
          if (_this.layout === layout) {
            _this.layout = null;
          }
        }
      }
    };
  },
  props: {
    position: {
      type: String,
      default: '',
      validator: function validator(val) {
        return val === '' || ['top', 'bottom', 'left', 'right'].includes(val);
      }
    },
    transition: String,
    enterClass: String,
    leaveClass: String,
    positionClasses: {
      type: String,
      default: 'flex-center'
    },
    contentClasses: [Object, Array, String],
    contentCss: [Object, Array, String],
    noBackdropDismiss: {
      type: Boolean,
      default: false
    },
    noEscDismiss: {
      type: Boolean,
      default: false
    },
    noRouteDismiss: Boolean,
    noRefocus: Boolean,
    minimized: Boolean,
    maximized: Boolean
  },
  data: function data() {
    return {
      layout: null
    };
  },
  watch: {
    $route: function $route() {
      if (!this.noRouteDismiss) {
        this.hide();
      }
    },
    maximized: function maximized(newV, oldV) {
      this.__register(false, oldV);

      this.__register(true, newV);
    },
    minimized: function minimized(newV, oldV) {
      this.__register(false, this.maximized, oldV);

      this.__register(true, this.maximized, newV);
    }
  },
  computed: {
    modalClasses: function modalClasses() {
      var cls = this.position ? positions[this.position] : this.positionClasses;

      if (this.maximized) {
        return ['maximized', cls];
      } else if (this.minimized) {
        return ['minimized', cls];
      }

      return cls;
    },
    contentClassesCalc: function contentClassesCalc() {
      if (this.layout) {
        return [this.contentClasses, 'column no-wrap'];
      }

      return this.contentClasses;
    },
    transitionProps: function transitionProps() {
      if (this.position) {
        return {
          name: "q-modal-".concat(this.position)
        };
      }

      if (this.enterClass || this.leaveClass) {
        return {
          enterActiveClass: this.enterClass,
          leaveActiveClass: this.leaveClass
        };
      }

      return {
        name: this.transition || 'q-modal'
      };
    },
    modalCss: function modalCss() {
      if (this.position) {
        var css = Array.isArray(this.contentCss) ? this.contentCss : [this.contentCss];
        css.unshift(Object.assign({}, positionCSS, additionalCSS(this.position)));
        return css;
      }

      return this.contentCss;
    }
  },
  methods: {
    __dismiss: function __dismiss() {
      var _this2 = this;

      if (this.noBackdropDismiss) {
        this.__shake();

        return;
      }

      this.hide().then(function () {
        _this2.$emit('dismiss');
      });
    },
    __show: function __show() {
      var _this3 = this;

      if (!this.noRefocus) {
        this.__refocusTarget = document.activeElement;
      }

      document.body.appendChild(this.$el);

      this.__register(true);

      Object(prevent_scroll["a" /* default */])(true);
      escape_key["a" /* default */].register(function () {
        if (_this3.noEscDismiss) {
          _this3.__shake();
        } else {
          _this3.$emit('escape-key');

          _this3.hide().then(function () {
            _this3.$emit('dismiss');
          });
        }
      });
      var content = this.$refs.content;

      if (this.$q.platform.is.ios) {
        content.click();
      }

      content.scrollTop = 0;
      ['modal-scroll', 'layout-view'].forEach(function (c) {
        [].slice.call(content.getElementsByClassName(c)).forEach(function (el) {
          el.scrollTop = 0;
        });
      });
      this.$nextTick(function () {
        return content && content.focus();
      });
    },
    __hide: function __hide() {
      this.__cleanup();

      if (!this.noRefocus && this.__refocusTarget) {
        this.__refocusTarget.focus();

        !this.__refocusTarget.classList.contains('q-if') && this.__refocusTarget.blur();
      }
    },
    __cleanup: function __cleanup() {
      escape_key["a" /* default */].pop();
      Object(prevent_scroll["a" /* default */])(false);

      this.__register(false);
    },
    __stopPropagation: function __stopPropagation(e) {
      e.stopPropagation();
    },
    __register: function __register(opening) {
      var maximized = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.maximized;
      var minimized = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.minimized;
      var state = opening ? {
        action: 'add',
        step: 1
      } : {
        action: 'remove',
        step: -1
      };

      if (maximized) {
        modals.maximized += state.step;

        if (!opening && modals.maximized > 0) {
          return;
        }

        document.body.classList[state.action]('q-maximized-modal');
      } else if (!minimized) {
        modals.responsive += state.step;

        if (!opening && modals.responsive > 0) {
          return;
        }

        document.body.classList[state.action]('q-responsive-modal');
      }
    },
    __shake: function __shake() {
      var _this4 = this;

      this.$el.classList.remove('animate-shake');
      this.$el.classList.add('animate-shake');
      clearTimeout(this.shakeTimeout);
      this.shakeTimeout = setTimeout(function () {
        _this4.$el.classList.remove('animate-shake');
      }, 150);
    }
  },
  mounted: function mounted() {
    this.value && this.show();
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.shakeTimeout);
    this.$el.remove();
    this.showing && this.__cleanup();
  },
  render: function render(h) {
    var _this5 = this;

    return h('transition', {
      props: this.transitionProps,
      on: {
        afterEnter: function afterEnter() {
          _this5.showPromise && _this5.showPromiseResolve();
        },
        enterCancelled: function enterCancelled() {
          _this5.showPromise && _this5.showPromiseReject();

          _this5.$el.remove();
        },
        afterLeave: function afterLeave() {
          _this5.hidePromise && _this5.hidePromiseResolve();

          _this5.$el.remove();
        },
        leaveCancelled: function leaveCancelled() {
          _this5.hidePromise && _this5.hidePromiseReject();
        }
      }
    }, [h('div', {
      staticClass: 'modal fullscreen row',
      'class': this.modalClasses,
      directives: [{
        name: 'show',
        value: this.showing
      }]
    }, [h('div', {
      staticClass: 'modal-backdrop absolute-full',
      on: {
        click: this.__dismiss
      }
    }), h('div', {
      ref: 'content',
      staticClass: 'modal-content',
      style: this.modalCss,
      'class': this.contentClassesCalc,
      attrs: {
        tabindex: -1
      },
      on: {
        click: this.__stopPropagation,
        touchstart: this.__stopPropagation
      }
    }, this.$slots.default)])]);
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/icon/QIcon.js
var QIcon = __webpack_require__("52b5");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/list/QList.js
var QList = __webpack_require__("1180");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/list/QItem.js
var QItem = __webpack_require__("506f");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/list/QItemSide.js
var QItemSide = __webpack_require__("7d43");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/list/QItemMain.js
var QItemMain = __webpack_require__("b8d9");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/list/QItemSeparator.js
/* harmony default export */ var QItemSeparator = ({
  name: 'QItemSeparator',
  props: {
    inset: Boolean
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-item-separator-component',
      'class': {
        'q-item-separator-inset-component': this.inset
      }
    }, this.$slots.default);
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/event.js
var utils_event = __webpack_require__("b18c");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/action-sheet/QActionSheet.js









/* harmony default export */ var QActionSheet = ({
  name: 'QActionSheet',
  props: {
    value: Boolean,
    title: String,
    grid: Boolean,
    actions: Array,
    dismissLabel: String
  },
  computed: {
    contentCss: function contentCss() {
      if (false) {}
    }
  },
  render: function render(h) {
    var _this = this;

    var child = [],
        title = this.$slots.title || this.title;

    if (title) {
      child.push(h('div', {
        staticClass: 'q-actionsheet-title column justify-center'
      }, [title]));
    }

    child.push(h('div', {
      staticClass: 'q-actionsheet-body scroll'
    }, this.actions ? [this.grid ? h('div', {
      staticClass: 'q-actionsheet-grid row wrap items-center justify-between'
    }, this.__getActions(h)) : h(QList["a" /* default */], {
      staticClass: 'no-border',
      props: {
        link: true
      }
    }, this.__getActions(h))] : this.$slots.default));

    if (false) {}

    return h(QModal, {
      ref: 'modal',
      props: {
        value: this.value,
        position: 'bottom',
        contentCss: this.contentCss
      },
      on: {
        input: function input(val) {
          _this.$emit('input', val);
        },
        show: function show() {
          _this.$emit('show');
        },
        hide: function hide() {
          _this.$emit('hide');
        },
        dismiss: function dismiss() {
          _this.$emit('cancel');
        },
        'escape-key': function escapeKey() {
          _this.$emit('escape-key');
        }
      }
    }, child);
  },
  methods: {
    show: function show() {
      return this.$refs.modal.show();
    },
    hide: function hide() {
      return this.$refs.modal ? this.$refs.modal.hide() : Promise.resolve();
    },
    __getActions: function __getActions(h) {
      var _this2 = this;

      return this.actions.map(function (action) {
        return action.label ? h(_this2.grid ? 'div' : QItem["a" /* default */], Object(defineProperty["a" /* default */])({
          staticClass: _this2.grid ? 'q-actionsheet-grid-item cursor-pointer relative-position column inline flex-center' : null,
          'class': action.classes,
          attrs: {
            tabindex: 0
          }
        }, _this2.grid ? 'on' : 'nativeOn', {
          click: function click() {
            return _this2.__onOk(action);
          },
          keyup: function keyup(e) {
            if (Object(utils_event["b" /* getEventKey */])(e) === 13) {
              _this2.__onOk(action);
            }
          }
        }), _this2.grid ? [action.icon ? h(QIcon["a" /* default */], {
          props: {
            name: action.icon,
            color: action.color
          }
        }) : null, action.avatar ? h('img', {
          domProps: {
            src: action.avatar
          },
          staticClass: 'avatar'
        }) : null, h('span', [action.label])] : [h(QItemSide["a" /* default */], {
          props: {
            icon: action.icon,
            color: action.color,
            avatar: action.avatar
          }
        }), h(QItemMain["a" /* default */], {
          props: {
            inset: true,
            label: action.label
          }
        })]) : h(QItemSeparator, {
          staticClass: 'col-12'
        });
      });
    },
    __onOk: function __onOk(action) {
      var _this3 = this;

      this.hide().then(function () {
        if (typeof action.handler === 'function') {
          action.handler();
        }

        _this3.$emit('ok', action);
      });
    },
    __onCancel: function __onCancel() {
      var _this4 = this;

      this.hide().then(function () {
        _this4.$emit('cancel');
      });
    },
    __onKeyCancel: function __onKeyCancel(e) {
      if (Object(utils_event["b" /* getEventKey */])(e) === 13) {
        this.__onCancel();
      }
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/action-sheet/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/format.js
var format = __webpack_require__("177b");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/plugins/platform.js
var platform = __webpack_require__("a60d");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/ajax-bar/QAjaxBar.js




var xhr = platform["d" /* isSSR */] ? null : XMLHttpRequest,
    send = platform["d" /* isSSR */] ? null : xhr.prototype.send,
    stack = {
  start: [],
  stop: []
};
var highjackCount = 0;

function translate(_ref) {
  var p = _ref.p,
      pos = _ref.pos,
      active = _ref.active,
      horiz = _ref.horiz,
      reverse = _ref.reverse,
      dir = _ref.dir;
  var x = 1,
      y = 1;

  if (horiz) {
    if (reverse) {
      x = -1;
    }

    if (pos === 'bottom') {
      y = -1;
    }

    return {
      transform: "translate3d(".concat(x * (p - 100), "%,").concat(active ? 0 : y * -200, "%,0)")
    };
  }

  if (reverse) {
    y = -1;
  }

  if (pos === 'right') {
    x = -1;
  }

  return {
    transform: "translate3d(".concat(active ? 0 : dir * x * -200, "%,").concat(y * (p - 100), "%,0)")
  };
}

function inc(p, amount) {
  if (typeof amount !== 'number') {
    if (p < 25) {
      amount = Math.random() * 3 + 3;
    } else if (p < 65) {
      amount = Math.random() * 3;
    } else if (p < 85) {
      amount = Math.random() * 2;
    } else if (p < 99) {
      amount = 0.6;
    } else {
      amount = 0;
    }
  }

  return Object(format["a" /* between */])(p + amount, 0, 100);
}

function highjackAjax(start, stop) {
  stack.start.push(start);
  stack.stop.push(stop);
  highjackCount++;

  if (highjackCount > 1) {
    return;
  }

  function endHandler() {
    stack.stop.map(function (fn) {
      fn();
    });
  }

  xhr.prototype.send = function () {
    var _this = this;

    stack.start.map(function (fn) {
      fn();
    });
    this.addEventListener('abort', endHandler, false);
    this.addEventListener('readystatechange', function () {
      if (_this.readyState === 4) {
        endHandler();
      }
    }, false);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    send.apply(this, args);
  };
}

function restoreAjax(start, stop) {
  stack.start = stack.start.filter(function (fn) {
    return fn !== start;
  });
  stack.stop = stack.stop.filter(function (fn) {
    return fn !== stop;
  });
  highjackCount = Math.max(0, highjackCount - 1);

  if (!highjackCount) {
    xhr.prototype.send = send;
  }
}

/* harmony default export */ var QAjaxBar = ({
  name: 'QAjaxBar',
  props: {
    position: {
      type: String,
      default: 'top',
      validator: function validator(val) {
        return ['top', 'right', 'bottom', 'left'].includes(val);
      }
    },
    size: {
      type: String,
      default: '2px'
    },
    color: {
      type: String,
      default: 'red'
    },
    skipHijack: Boolean,
    reverse: Boolean
  },
  data: function data() {
    return {
      calls: 0,
      progress: 0,
      onScreen: false,
      animate: true
    };
  },
  computed: {
    classes: function classes() {
      return [this.position, "bg-".concat(this.color), this.animate ? '' : 'no-transition'];
    },
    style: function style() {
      var active = this.onScreen;
      var o = translate({
        p: this.progress,
        pos: this.position,
        active: active,
        horiz: this.horizontal,
        reverse: this.$q.i18n.rtl && ['top', 'bottom'].includes(this.position) ? !this.reverse : this.reverse,
        dir: this.$q.i18n.rtl ? -1 : 1
      });
      o[this.sizeProp] = this.size;
      o.opacity = active ? 1 : 0;
      return o;
    },
    horizontal: function horizontal() {
      return this.position === 'top' || this.position === 'bottom';
    },
    sizeProp: function sizeProp() {
      return this.horizontal ? 'height' : 'width';
    }
  },
  methods: {
    start: function start() {
      var _this2 = this;

      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;
      this.calls++;

      if (this.calls > 1) {
        return;
      }

      clearTimeout(this.timer);
      this.$emit('start');

      if (this.onScreen) {
        return;
      }

      this.progress = 0;
      this.onScreen = true;
      this.animate = false;
      this.timer = setTimeout(function () {
        _this2.animate = true;

        _this2.__work(speed);
      }, 100);
    },
    increment: function increment(amount) {
      this.calls > 0 && (this.progress = inc(this.progress, amount));
    },
    stop: function stop() {
      var _this3 = this;

      this.calls = Math.max(0, this.calls - 1);

      if (this.calls > 0) {
        return;
      }

      clearTimeout(this.timer);
      this.$emit('stop');

      var end = function end() {
        _this3.animate = true;
        _this3.progress = 100;
        _this3.timer = setTimeout(function () {
          _this3.onScreen = false;
        }, 1000);
      };

      if (this.progress === 0) {
        this.timer = setTimeout(end, 1);
      } else {
        end();
      }
    },
    __work: function __work(speed) {
      var _this4 = this;

      if (this.progress < 100) {
        this.timer = setTimeout(function () {
          _this4.increment();

          _this4.__work(speed);
        }, speed);
      }
    }
  },
  mounted: function mounted() {
    if (!this.skipHijack) {
      this.hijacked = true;
      highjackAjax(this.start, this.stop);
    }
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.timer);
    this.hijacked && restoreAjax(this.start, this.stop);
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-loading-bar',
      'class': this.classes,
      style: this.style
    });
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/ajax-bar/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/alert/QAlert.js
var QAlert = __webpack_require__("ef81");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/alert/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.number.constructor.js
var es6_number_constructor = __webpack_require__("c5f6");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/dom.js
var dom = __webpack_require__("abcf");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.starts-with.js
var es6_string_starts_with = __webpack_require__("f559");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/filter.js

/* harmony default export */ var filter = (function (terms, _ref) {
  var field = _ref.field,
      list = _ref.list;
  var token = terms.toLowerCase();
  return list.filter(function (item) {
    return ('' + item[field]).toLowerCase().startsWith(token);
  });
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/uid.js
var uid = __webpack_require__("68c2");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/popover/QPopover.js
var QPopover = __webpack_require__("b5b8");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/list/QItemWrapper.js
var QItemWrapper = __webpack_require__("768b");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/keyboard-selection.js
var keyboard_selection = __webpack_require__("42b5");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/autocomplete/QAutocomplete.js










/* harmony default export */ var QAutocomplete = ({
  name: 'QAutocomplete',
  mixins: [keyboard_selection["a" /* default */]],
  props: {
    minCharacters: {
      type: Number,
      default: 1
    },
    maxResults: {
      type: Number,
      default: 6
    },
    maxHeight: String,
    debounce: {
      type: Number,
      default: 500
    },
    filter: {
      type: Function,
      default: filter
    },
    staticData: Object,
    valueField: [String, Function],
    separator: Boolean
  },
  inject: {
    __input: {
      default: function _default() {
        console.error('QAutocomplete needs to be child of QInput, QChipsInput or QSearch');
      }
    },
    __inputDebounce: {
      default: null
    }
  },
  data: function data() {
    return {
      searchId: '',
      results: [],
      width: 0,
      enterKey: false,
      timer: null
    };
  },
  watch: {
    '__input.val': function __inputVal() {
      if (this.enterKey) {
        this.enterKey = false;
      } else {
        this.__delayTrigger();
      }
    }
  },
  computed: {
    computedResults: function computedResults() {
      return this.maxResults && this.results.length > 0 ? this.results.slice(0, this.maxResults) : [];
    },
    computedValueField: function computedValueField() {
      return this.valueField || (this.staticData ? this.staticData.field : 'value');
    },
    keyboardMaxIndex: function keyboardMaxIndex() {
      return this.computedResults.length - 1;
    },
    computedWidth: function computedWidth() {
      return {
        minWidth: this.width
      };
    },
    searching: function searching() {
      return this.searchId.length > 0;
    }
  },
  methods: {
    isWorking: function isWorking() {
      return this.$refs && this.$refs.popover;
    },
    trigger: function trigger(focus) {
      var _this = this;

      if (!this.__input || !this.__input.isEditable() || !this.__input.hasFocus() || !this.isWorking()) {
        return;
      }

      var terms = [null, void 0].includes(this.__input.val) ? '' : String(this.__input.val),
          termsLength = terms.length,
          searchId = Object(uid["a" /* default */])(),
          popover = this.$refs.popover;
      this.searchId = searchId;

      if (termsLength < this.minCharacters || focus === true && termsLength > 0) {
        this.searchId = '';

        this.__clearSearch();

        this.hide();
        return;
      }

      this.width = Object(dom["e" /* width */])(this.inputEl) + 'px';

      if (this.staticData) {
        this.searchId = '';
        this.results = this.filter(terms, this.staticData);

        if (this.results.length) {
          this.__showResults();

          return;
        }

        popover.hide();
        return;
      }

      this.__input.loading = true;
      this.$emit('search', terms, function (results) {
        if (!_this.isWorking() || _this.searchId !== searchId) {
          return;
        }

        _this.__clearSearch();

        if (Array.isArray(results) && results.length > 0) {
          _this.results = results;

          _this.__showResults();

          return;
        }

        _this.hide();
      });
    },
    hide: function hide() {
      this.results = [];
      return this.isWorking() ? this.$refs.popover.hide() : Promise.resolve();
    },
    blurHide: function blurHide() {
      var _this2 = this;

      this.__clearSearch();

      this.timer = setTimeout(function () {
        return _this2.hide();
      }, 300);
    },
    __clearSearch: function __clearSearch() {
      clearTimeout(this.timer);
      this.__input.loading = false;
      this.searchId = '';
    },
    __keyboardCustomKeyHandle: function __keyboardCustomKeyHandle(key) {
      switch (key) {
        case 27:
          this.__clearSearch();

          break;

        case 38:
        case 40:
        case 9:
          this.__keyboardSetCurrentSelection(true);

          break;
      }
    },
    __keyboardShowTrigger: function __keyboardShowTrigger() {
      this.trigger();
    },
    __focusShowTrigger: function __focusShowTrigger() {
      var _this3 = this;

      clearTimeout(this.timer);
      this.timer = setTimeout(function () {
        return _this3.trigger(true);
      }, 100);
    },
    __keyboardIsSelectableIndex: function __keyboardIsSelectableIndex(index) {
      return index > -1 && index < this.computedResults.length && !this.computedResults[index].disable;
    },
    setValue: function setValue(result, kbdNav) {
      var value = typeof this.computedValueField === 'function' ? this.computedValueField(result) : result[this.computedValueField];
      var suffix = this.__inputDebounce ? 'Debounce' : '';

      if (this.inputEl && this.__input && !this.__input.hasFocus()) {
        this.inputEl.focus();
      }

      this.enterKey = this.__input && value !== this.__input.val;
      this["__input".concat(suffix)][kbdNav ? 'setNav' : 'set'](value);
      this.$emit('selected', result, !!kbdNav);

      if (!kbdNav) {
        this.__clearSearch();

        this.hide();
      }
    },
    __keyboardSetSelection: function __keyboardSetSelection(index, navigation) {
      this.setValue(this.results[index], navigation);
    },
    __delayTrigger: function __delayTrigger() {
      this.__clearSearch();

      if (!this.__input.hasFocus()) {
        return;
      }

      if (this.staticData) {
        this.trigger();
        return;
      }

      this.timer = setTimeout(this.trigger, this.debounce);
    },
    __showResults: function __showResults() {
      var popover = this.$refs.popover;

      this.__keyboardShow(-1);

      if (popover.showing) {
        this.$nextTick(function () {
          return popover.showing && popover.reposition();
        });
      } else {
        popover.show();
      }
    }
  },
  mounted: function mounted() {
    var _this4 = this;

    this.__input.register();

    if (this.__inputDebounce) {
      this.__inputDebounce.setChildDebounce(true);
    }

    this.$nextTick(function () {
      if (_this4.__input) {
        _this4.inputEl = _this4.__input.getEl();
      }

      _this4.inputEl.addEventListener('keydown', _this4.__keyboardHandleKey);

      _this4.inputEl.addEventListener('blur', _this4.blurHide);

      _this4.inputEl.addEventListener('focus', _this4.__focusShowTrigger);
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.__clearSearch();

    this.__input.unregister();

    if (this.__inputDebounce) {
      this.__inputDebounce.setChildDebounce(false);
    }

    if (this.inputEl) {
      this.inputEl.removeEventListener('keydown', this.__keyboardHandleKey);
      this.inputEl.removeEventListener('blur', this.blurHide);
      this.inputEl.removeEventListener('focus', this.__focusShowTrigger);
      this.hide();
    }
  },
  render: function render(h) {
    var _this5 = this;

    var dark = this.__input.isDark();

    return h(QPopover["a" /* default */], {
      ref: 'popover',
      'class': dark ? 'bg-dark' : null,
      props: {
        fit: true,
        keepOnScreen: true,
        anchorClick: false,
        maxHeight: this.maxHeight,
        noFocus: true,
        noRefocus: true
      },
      on: {
        show: function show() {
          _this5.__input.selectionOpen = true;

          _this5.$emit('show');
        },
        hide: function hide() {
          _this5.__input.selectionOpen = false;

          _this5.$emit('hide');
        }
      }
    }, [h(QList["a" /* default */], {
      props: {
        dark: dark,
        noBorder: true,
        separator: this.separator
      },
      style: this.computedWidth
    }, this.computedResults.map(function (result, index) {
      return h(QItemWrapper["a" /* default */], {
        key: result.id || index,
        'class': {
          'q-select-highlight': _this5.keyboardIndex === index,
          'cursor-pointer': !result.disable,
          'text-faded': result.disable
        },
        props: {
          cfg: result
        },
        nativeOn: {
          mouseenter: function mouseenter() {
            !result.disable && (_this5.keyboardIndex = index);
          },
          click: function click() {
            !result.disable && _this5.setValue(result);
          }
        }
      });
    }))]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/autocomplete/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.ends-with.js
var es6_string_ends_with = __webpack_require__("aef6");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/align.js
var align = __webpack_require__("5958");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/breadcrumbs/QBreadcrumbs.js



/* harmony default export */ var QBreadcrumbs = ({
  name: 'QBreadcrumbs',
  mixins: [align["a" /* default */]],
  props: {
    color: {
      type: String,
      default: 'faded'
    },
    activeColor: {
      type: String,
      default: 'primary'
    },
    separator: {
      type: String,
      default: '/'
    },
    align: Object.assign({}, align["a" /* default */].props.align, {
      default: 'left'
    })
  },
  computed: {
    classes: function classes() {
      return ["text-".concat(this.color), this.alignClass];
    }
  },
  render: function render(h) {
    var _this = this;

    if (!this.$slots.default) {
      return;
    }

    var child = [],
        len = this.$slots.default.filter(function (c) {
      return c.tag !== void 0 && c.tag.endsWith('-QBreadcrumbsEl');
    }).length,
        separator = this.$scopedSlots.separator || function () {
      return _this.separator;
    },
        color = "text-".concat(this.color),
        active = "text-".concat(this.activeColor);

    var els = 1;

    for (var i in this.$slots.default) {
      var comp = this.$slots.default[i];

      if (comp.tag !== void 0 && comp.tag.endsWith('-QBreadcrumbsEl')) {
        var middle = els < len;
        els++;
        child.push(h('div', {
          staticClass: 'flex items-center',
          'class': [middle ? active : color, middle ? 'text-weight-bold' : 'q-breadcrumbs-last']
        }, [comp]));

        if (middle) {
          child.push(h('div', {
            staticClass: "q-breadcrumbs-separator",
            'class': color
          }, [separator()]));
        }
      } else {
        child.push(comp);
      }
    }

    return h('div', {
      staticClass: 'q-breadcrumbs flex gutter-xs items-center overflow-hidden',
      'class': this.classes
    }, child);
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/router-link.js
var router_link = __webpack_require__("1679");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/breadcrumbs/QBreadcrumbsEl.js


/* harmony default export */ var QBreadcrumbsEl = ({
  name: 'QBreadcrumbsEl',
  mixins: [{
    props: router_link["d" /* routerLinkProps */]
  }],
  props: {
    label: String,
    icon: String,
    color: String
  },
  render: function render(h) {
    return h(this.to !== void 0 ? 'router-link' : 'span', {
      staticClass: 'q-link q-breadcrumbs-el flex inline items-center relative-position',
      props: this.to !== void 0 ? this.$props : null
    }, [this.icon ? h(QIcon["a" /* default */], {
      staticClass: 'q-breacrumbs-el-icon q-mr-sm',
      props: {
        name: this.icon
      }
    }) : null, this.label].concat(this.$slots.default));
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/breadcrumbs/index.js



// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/btn/QBtn.js
var QBtn = __webpack_require__("482e");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/btn/QBtnGroup.js
/* harmony default export */ var QBtnGroup = ({
  name: 'QBtnGroup',
  props: {
    outline: Boolean,
    flat: Boolean,
    rounded: Boolean,
    push: Boolean
  },
  computed: {
    classes: function classes() {
      var _this = this;

      return ['outline', 'flat', 'rounded', 'push'].filter(function (t) {
        return _this[t];
      }).map(function (t) {
        return "q-btn-group-".concat(t);
      }).join(' ');
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-btn-group row no-wrap inline',
      'class': this.classes
    }, this.$slots.default);
  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.split.js
var es6_regexp_split = __webpack_require__("28a5");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/btn/btn-mixin.js
var btn_mixin = __webpack_require__("0707");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/btn/QBtnDropdown.js







/* harmony default export */ var QBtnDropdown = ({
  name: 'QBtnDropdown',
  mixins: [btn_mixin["a" /* default */]],
  props: {
    value: Boolean,
    split: Boolean,
    contentClass: [Array, String, Object],
    contentStyle: [Array, String, Object],
    popoverAnchor: {
      type: String,
      default: 'bottom right'
    },
    popoverSelf: {
      type: String,
      default: 'top right'
    }
  },
  data: function data() {
    return {
      showing: this.value
    };
  },
  watch: {
    value: function value(val) {
      this.$refs.popover && this.$refs.popover[val ? 'show' : 'hide']();
    }
  },
  render: function render(h) {
    var _this = this;

    var Popover = h(QPopover["a" /* default */], {
      ref: 'popover',
      props: {
        disable: this.disable,
        fit: true,
        anchorClick: !this.split,
        anchor: this.popoverAnchor,
        self: this.popoverSelf
      },
      'class': this.contentClass,
      style: this.contentStyle,
      on: {
        show: function show(e) {
          _this.showing = true;

          _this.$emit('show', e);

          _this.$emit('input', true);
        },
        hide: function hide(e) {
          _this.showing = false;

          _this.$emit('hide', e);

          _this.$emit('input', false);
        }
      }
    }, this.$slots.default),
        Icon = h(QIcon["a" /* default */], {
      props: {
        name: this.$q.icon.input.dropdown
      },
      staticClass: 'transition-generic',
      'class': {
        'rotate-180': this.showing,
        'on-right': !this.split,
        'q-btn-dropdown-arrow': !this.split
      }
    }),
        Btn = h(QBtn["a" /* default */], {
      props: Object.assign({}, this.$props, {
        iconRight: this.split ? this.iconRight : null
      }),
      'class': this.split ? 'q-btn-dropdown-current' : 'q-btn-dropdown q-btn-dropdown-simple',
      on: {
        click: function click(e) {
          _this.split && _this.hide();

          if (!_this.disable) {
            _this.$emit('click', e);
          }
        }
      }
    }, this.split ? null : [Icon, Popover]);

    if (!this.split) {
      return Btn;
    }

    return h(QBtnGroup, {
      props: {
        outline: this.outline,
        flat: this.flat,
        rounded: this.rounded,
        push: this.push
      },
      staticClass: 'q-btn-dropdown q-btn-dropdown-split no-wrap q-btn-item'
    }, [Btn, h(QBtn["a" /* default */], {
      props: {
        disable: this.disable,
        outline: this.outline,
        flat: this.flat,
        rounded: this.rounded,
        push: this.push,
        size: this.size,
        color: this.color,
        textColor: this.textColor,
        dense: this.dense,
        glossy: this.glossy,
        noRipple: this.noRipple,
        waitForRipple: this.waitForRipple
      },
      staticClass: 'q-btn-dropdown-arrow',
      on: {
        click: function click() {
          _this.toggle();
        }
      }
    }, [Icon]), [Popover]]);
  },
  methods: {
    toggle: function toggle() {
      return this.$refs.popover ? this.$refs.popover.toggle() : Promise.resolve();
    },
    show: function show() {
      return this.$refs.popover ? this.$refs.popover.show() : Promise.resolve();
    },
    hide: function hide() {
      return this.$refs.popover ? this.$refs.popover.hide() : Promise.resolve();
    }
  },
  mounted: function mounted() {
    var _this2 = this;

    this.$nextTick(function () {
      if (_this2.value) {
        _this2.$refs.popover && _this2.$refs.popover.show();
      }
    });
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/btn/QBtnToggle.js


/* harmony default export */ var QBtnToggle = ({
  name: 'QBtnToggle',
  props: {
    value: {
      required: true
    },
    color: String,
    textColor: String,
    toggleColor: {
      type: String,
      default: 'primary'
    },
    toggleTextColor: String,
    options: {
      type: Array,
      required: true,
      validator: function validator(v) {
        return v.every(function (opt) {
          return ('label' in opt || 'icon' in opt) && 'value' in opt;
        });
      }
    },
    readonly: Boolean,
    disable: Boolean,
    noCaps: Boolean,
    noWrap: Boolean,
    outline: Boolean,
    flat: Boolean,
    dense: Boolean,
    rounded: Boolean,
    push: Boolean,
    size: String,
    glossy: Boolean,
    noRipple: Boolean,
    waitForRipple: Boolean
  },
  computed: {
    val: function val() {
      var _this = this;

      return this.options.map(function (opt) {
        return opt.value === _this.value;
      });
    }
  },
  methods: {
    set: function set(value, opt) {
      var _this2 = this;

      if (this.readonly) {
        return;
      }

      this.$emit('input', value, opt);
      this.$nextTick(function () {
        if (JSON.stringify(value) !== JSON.stringify(_this2.value)) {
          _this2.$emit('change', value, opt);
        }
      });
    }
  },
  render: function render(h) {
    var _this3 = this;

    return h(QBtnGroup, {
      staticClass: 'q-btn-toggle',
      props: {
        outline: this.outline,
        flat: this.flat,
        rounded: this.rounded,
        push: this.push
      }
    }, this.options.map(function (opt, i) {
      return h(QBtn["a" /* default */], {
        key: "".concat(opt.label).concat(opt.icon).concat(opt.iconRight),
        on: {
          click: function click() {
            return _this3.set(opt.value, opt);
          }
        },
        props: {
          disable: _this3.disable,
          label: opt.label,
          color: _this3.val[i] ? opt.toggleColor || _this3.toggleColor : opt.color || _this3.color,
          textColor: _this3.val[i] ? opt.toggleTextColor || _this3.toggleTextColor : opt.textColor || _this3.textColor,
          icon: opt.icon,
          iconRight: opt.iconRight,
          noCaps: _this3.noCaps || opt.noCaps,
          noWrap: _this3.noWrap || opt.noWrap,
          outline: _this3.outline,
          flat: _this3.flat,
          rounded: _this3.rounded,
          push: _this3.push,
          glossy: _this3.glossy,
          size: _this3.size,
          dense: _this3.dense,
          noRipple: _this3.noRipple || opt.noRipple,
          waitForRipple: _this3.waitForRipple || opt.waitForRipple,
          tabindex: opt.tabindex
        }
      });
    }));
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/btn/index.js





// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/card/QCard.js
/* harmony default export */ var QCard = ({
  name: 'QCard',
  props: {
    dark: Boolean,
    square: Boolean,
    flat: Boolean,
    inline: Boolean,
    color: String,
    textColor: String
  },
  computed: {
    classes: function classes() {
      var cls = [{
        'no-border-radius': this.square,
        'no-shadow': this.flat,
        'inline-block': this.inline,
        'q-card-dark': this.dark
      }];

      if (this.color) {
        cls.push("bg-".concat(this.color));
        cls.push("text-".concat(this.textColor || 'white'));
      } else if (this.textColor) {
        cls.push("text-".concat(this.textColor));
      }

      return cls;
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-card',
      'class': this.classes
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/card/QCardTitle.js
/* harmony default export */ var QCardTitle = ({
  name: 'QCardTitle',
  render: function render(h) {
    return h('div', {
      staticClass: 'q-card-primary q-card-container row no-wrap'
    }, [h('div', {
      staticClass: 'col column'
    }, [h('div', {
      staticClass: 'q-card-title'
    }, this.$slots.default), h('div', {
      staticClass: 'q-card-subtitle'
    }, [this.$slots.subtitle])]), h('div', {
      staticClass: 'col-auto self-center q-card-title-extra'
    }, [this.$slots.right])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/card/QCardMain.js
/* harmony default export */ var QCardMain = ({
  name: 'QCardMain',
  render: function render(h) {
    return h('div', {
      staticClass: 'q-card-main q-card-container'
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/card/QCardActions.js


/* harmony default export */ var QCardActions = ({
  name: 'QCardActions',
  props: {
    vertical: Boolean,
    align: {
      type: String,
      default: 'start',
      validator: function validator(v) {
        return ['start', 'center', 'end', 'around', 'between'].includes(v);
      }
    }
  },
  computed: {
    classes: function classes() {
      return "q-card-actions-".concat(this.vertical ? 'vert column justify-start' : 'horiz row', " ") + "".concat(this.vertical ? 'items' : 'justify', "-").concat(this.align);
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-card-actions',
      'class': this.classes
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/card/QCardMedia.js


/* harmony default export */ var QCardMedia = ({
  name: 'QCardMedia',
  props: {
    overlayPosition: {
      type: String,
      default: 'bottom',
      validator: function validator(v) {
        return ['top', 'bottom', 'full'].includes(v);
      }
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-card-media relative-position'
    }, [this.$slots.default, this.$slots.overlay ? h('div', {
      staticClass: 'q-card-media-overlay',
      'class': "absolute-".concat(this.overlayPosition)
    }, [this.$slots.overlay]) : null]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/card/QCardSeparator.js
/* harmony default export */ var QCardSeparator = ({
  name: 'QCardSeparator',
  props: {
    inset: Boolean
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-card-separator',
      'class': {
        inset: this.inset
      }
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/card/index.js







// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.keys.js
var es6_object_keys = __webpack_require__("456d");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/directives/touch-pan.js
var touch_pan = __webpack_require__("f62b");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/is.js
var is = __webpack_require__("73f5");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.function.name.js
var es6_function_name = __webpack_require__("7f7f");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/easing.js
var linear = function linear(t) {
  return t;
};
var easeInQuad = function easeInQuad(t) {
  return t * t;
};
var easeOutQuad = function easeOutQuad(t) {
  return t * (2 - t);
};
var easeInOutQuad = function easeInOutQuad(t) {
  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
};
var easeInCubic = function easeInCubic(t) {
  return Math.pow(t, 3);
};
var easeOutCubic = function easeOutCubic(t) {
  return 1 + Math.pow(t - 1, 3);
};
var easeInOutCubic = function easeInOutCubic(t) {
  return t < 0.5 ? 4 * Math.pow(t, 3) : 1 + (t - 1) * Math.pow(2 * t - 2, 2);
};
var easeInQuart = function easeInQuart(t) {
  return Math.pow(t, 4);
};
var easeOutQuart = function easeOutQuart(t) {
  return 1 - Math.pow(t - 1, 4);
};
var easeInOutQuart = function easeInOutQuart(t) {
  return t < 0.5 ? 8 * Math.pow(t, 4) : 1 - 8 * Math.pow(t - 1, 4);
};
var easeInQuint = function easeInQuint(t) {
  return Math.pow(t, 5);
};
var easeOutQuint = function easeOutQuint(t) {
  return 1 + Math.pow(t - 1, 5);
};
var easeInOutQuint = function easeInOutQuint(t) {
  return t < 0.5 ? 16 * Math.pow(t, 5) : 1 + 16 * Math.pow(t - 1, 5);
};
var easeInCirc = function easeInCirc(t) {
  return -1 * Math.sqrt(1 - Math.pow(t, 2)) + 1;
};
var easeOutCirc = function easeOutCirc(t) {
  return Math.sqrt(-1 * (t - 2) * t);
};
var easeInOutCirc = function easeInOutCirc(t) {
  return t < 0.5 ? 0.5 * (1 - Math.sqrt(1 - 4 * t * t)) : 0.5 * (1 + Math.sqrt(-3 + 8 * t - 4 * t * t));
};
var overshoot = function overshoot(t) {
  return -1 * Math.pow(Math.E, -6.3 * t) * Math.cos(5 * t) + 1;
};
var standard = function standard(t) {
  return t < 0.4031 ? 12 * Math.pow(t, 4) : 1 / 1290 * (11 * Math.sqrt(-40000 * t * t + 80000 * t - 23359) - 129);
};
var decelerate = easeOutCubic;
var accelerate = easeInCubic;
var sharp = easeInOutQuad;
/* harmony default export */ var utils_easing = ({
  linear: linear,
  easeInQuad: easeInQuad,
  easeOutQuad: easeOutQuad,
  easeInOutQuad: easeInOutQuad,
  easeInCubic: easeInCubic,
  easeOutCubic: easeOutCubic,
  easeInOutCubic: easeInOutCubic,
  easeInQuart: easeInQuart,
  easeOutQuart: easeOutQuart,
  easeInOutQuart: easeInOutQuart,
  easeInQuint: easeInQuint,
  easeOutQuint: easeOutQuint,
  easeInOutQuint: easeInOutQuint,
  easeInCirc: easeInCirc,
  easeOutCirc: easeOutCirc,
  easeInOutCirc: easeInOutCirc,
  overshoot: overshoot,
  standard: standard,
  decelerate: decelerate,
  accelerate: accelerate,
  sharp: sharp
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/animate.js



var ids = {};
function animate_start(_ref) {
  var name = _ref.name,
      _ref$duration = _ref.duration,
      duration = _ref$duration === void 0 ? 300 : _ref$duration,
      to = _ref.to,
      from = _ref.from,
      apply = _ref.apply,
      done = _ref.done,
      cancel = _ref.cancel,
      easing = _ref.easing;
  var id = name;
  var start = new Date();

  if (id) {
    animate_stop(id);
  } else {
    id = Object(uid["a" /* default */])();
  }

  var delta = easing || linear;

  var handler = function handler() {
    var progress = (new Date() - start) / duration;

    if (progress > 1) {
      progress = 1;
    }

    var newPos = from + (to - from) * delta(progress);
    apply(newPos, progress);

    if (progress === 1) {
      delete ids[id];
      done && done(newPos);
      return;
    }

    anim.last = {
      pos: newPos,
      progress: progress
    };
    anim.timer = requestAnimationFrame(handler);
  };

  var anim = ids[id] = {
    cancel: cancel,
    timer: requestAnimationFrame(handler)
  };
  return id;
}
function animate_stop(id) {
  if (!id) {
    return;
  }

  var anim = ids[id];

  if (anim && anim.timer) {
    cancelAnimationFrame(anim.timer);
    anim.cancel && anim.cancel(anim.last);
    delete ids[id];
  }
}
/* harmony default export */ var animate = ({
  start: animate_start,
  stop: animate_stop
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/fullscreen.js
var fullscreen = __webpack_require__("30dd");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/carousel/QCarousel.js














/* harmony default export */ var QCarousel = ({
  name: 'QCarousel',
  mixins: [fullscreen["a" /* default */]],
  directives: {
    TouchPan: touch_pan["a" /* default */]
  },
  props: {
    value: Number,
    color: {
      type: String,
      default: 'primary'
    },
    height: String,
    arrows: Boolean,
    infinite: Boolean,
    animation: {
      type: [Number, Boolean],
      default: true
    },
    easing: Function,
    swipeEasing: Function,
    noSwipe: Boolean,
    autoplay: [Number, Boolean],
    handleArrowKeys: Boolean,
    quickNav: Boolean,
    quickNavPosition: {
      type: String,
      default: 'bottom',
      validator: function validator(v) {
        return ['top', 'bottom'].includes(v);
      }
    },
    quickNavIcon: String,
    thumbnails: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    thumbnailsIcon: String,
    thumbnailsHorizontal: Boolean
  },
  provide: function provide() {
    return {
      'carousel': this
    };
  },
  data: function data() {
    return {
      position: 0,
      slide: 0,
      positionSlide: 0,
      slidesNumber: 0,
      animUid: false,
      viewThumbnails: false
    };
  },
  watch: {
    value: function value(v) {
      if (v !== this.slide) {
        this.goToSlide(v);
      }
    },
    autoplay: function autoplay() {
      this.__planAutoPlay();
    },
    infinite: function infinite() {
      this.__planAutoPlay();
    },
    handleArrowKeys: function handleArrowKeys(v) {
      this.__setArrowKeys(v);
    }
  },
  computed: {
    rtlDir: function rtlDir() {
      return this.$q.i18n.rtl ? -1 : 1;
    },
    arrowIcon: function arrowIcon() {
      var ico = [this.$q.icon.carousel.left, this.$q.icon.carousel.right];
      return this.$q.i18n.rtl ? ico.reverse() : ico;
    },
    trackPosition: function trackPosition() {
      return {
        transform: "translateX(".concat(this.rtlDir * this.position, "%)")
      };
    },
    infiniteLeft: function infiniteLeft() {
      return this.infinite && this.slidesNumber > 1 && this.positionSlide < 0;
    },
    infiniteRight: function infiniteRight() {
      return this.infinite && this.slidesNumber > 1 && this.positionSlide >= this.slidesNumber;
    },
    canGoToPrevious: function canGoToPrevious() {
      return this.infinite ? this.slidesNumber > 1 : this.slide > 0;
    },
    canGoToNext: function canGoToNext() {
      return this.infinite ? this.slidesNumber > 1 : this.slide < this.slidesNumber - 1;
    },
    computedQuickNavIcon: function computedQuickNavIcon() {
      return this.quickNavIcon || this.$q.icon.carousel.quickNav;
    },
    computedStyle: function computedStyle() {
      if (!this.inFullscreen && this.height) {
        return "height: ".concat(this.height);
      }
    },
    slotScope: function slotScope() {
      return {
        slide: this.slide,
        slidesNumber: this.slidesNumber,
        percentage: this.slidesNumber < 2 ? 100 : 100 * this.slide / (this.slidesNumber - 1),
        goToSlide: this.goToSlide,
        previous: this.previous,
        next: this.next,
        color: this.color,
        inFullscreen: this.inFullscreen,
        toggleFullscreen: this.toggleFullscreen,
        canGoToNext: this.canGoToNext,
        canGoToPrevious: this.canGoToPrevious
      };
    },
    computedThumbnailIcon: function computedThumbnailIcon() {
      return this.thumbnailsIcon || this.$q.icon.carousel.thumbnails;
    }
  },
  methods: {
    previous: function previous() {
      return this.canGoToPrevious ? this.goToSlide(this.slide - 1) : Promise.resolve();
    },
    next: function next() {
      return this.canGoToNext ? this.goToSlide(this.slide + 1) : Promise.resolve();
    },
    goToSlide: function goToSlide(slide) {
      var _this = this;

      var fromSwipe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return new Promise(function (resolve) {
        var direction = '',
            curSlide = _this.slide,
            pos;

        _this.__cleanup();

        var finish = function finish() {
          _this.$emit('input', _this.slide);

          _this.$emit('slide', _this.slide, direction);

          _this.$emit('slide-direction', direction);

          _this.__planAutoPlay();

          resolve();
        };

        if (_this.slidesNumber < 2) {
          _this.slide = 0;
          _this.positionSlide = 0;
          pos = 0;
        } else {
          if (!_this.hasOwnProperty('initialPosition')) {
            _this.position = -_this.slide * 100;
          }

          direction = slide > _this.slide ? 'next' : 'previous';

          if (_this.infinite) {
            _this.slide = Object(format["e" /* normalizeToInterval */])(slide, 0, _this.slidesNumber - 1);
            pos = Object(format["e" /* normalizeToInterval */])(slide, -1, _this.slidesNumber);

            if (!fromSwipe) {
              _this.positionSlide = pos;
            }
          } else {
            _this.slide = Object(format["a" /* between */])(slide, 0, _this.slidesNumber - 1);
            _this.positionSlide = _this.slide;
            pos = _this.slide;
          }
        }

        _this.$emit('slide-trigger', curSlide, _this.slide, direction);

        pos = pos * -100;

        if (!_this.animation) {
          _this.position = pos;
          finish();
          return;
        }

        _this.animationInProgress = true;
        _this.animUid = animate_start({
          from: _this.position,
          to: pos,
          duration: Object(is["b" /* isNumber */])(_this.animation) ? _this.animation : 300,
          easing: fromSwipe ? _this.swipeEasing || decelerate : _this.easing || standard,
          apply: function apply(pos) {
            _this.position = pos;
          },
          done: function done() {
            if (_this.infinite) {
              _this.position = -_this.slide * 100;
              _this.positionSlide = _this.slide;
            }

            _this.animationInProgress = false;
            finish();
          }
        });
      });
    },
    stopAnimation: function stopAnimation() {
      animate_stop(this.animUid);
      this.animationInProgress = false;
    },
    __pan: function __pan(event) {
      var _this2 = this;

      if (this.infinite && this.animationInProgress) {
        return;
      }

      if (event.isFirst) {
        this.initialPosition = this.position;

        this.__cleanup();
      }

      var delta = this.rtlDir * (event.direction === 'left' ? -1 : 1) * event.distance.x;

      if (this.infinite && this.slidesNumber < 2 || !this.infinite && (this.slide === 0 && delta > 0 || this.slide === this.slidesNumber - 1 && delta < 0)) {
        delta = 0;
      }

      var pos = this.initialPosition + delta / this.$refs.track.offsetWidth * 100,
          slidePos = this.slide + this.rtlDir * (event.direction === 'left' ? 1 : -1);

      if (this.position !== pos) {
        this.position = pos;
      }

      if (this.positionSlide !== slidePos) {
        this.positionSlide = slidePos;
      }

      if (event.isFinal) {
        this.goToSlide(event.distance.x < 40 ? this.slide : this.positionSlide, true).then(function () {
          delete _this2.initialPosition;
        });
      }
    },
    __planAutoPlay: function __planAutoPlay() {
      var _this3 = this;

      this.$nextTick(function () {
        if (_this3.autoplay) {
          clearTimeout(_this3.timer);
          _this3.timer = setTimeout(_this3.next, Object(is["b" /* isNumber */])(_this3.autoplay) ? _this3.autoplay : 5000);
        }
      });
    },
    __cleanup: function __cleanup() {
      this.stopAnimation();
      clearTimeout(this.timer);
    },
    __handleArrowKey: function __handleArrowKey(e) {
      var key = Object(utils_event["b" /* getEventKey */])(e);

      if (key === 37) {
        this.previous();
      } else if (key === 39) {
        this.next();
      }
    },
    __setArrowKeys: function __setArrowKeys(state) {
      var op = "".concat(state === true ? 'add' : 'remove', "EventListener");
      document[op]('keydown', this.__handleArrowKey);
    },
    __registerSlide: function __registerSlide() {
      this.slidesNumber++;
    },
    __unregisterSlide: function __unregisterSlide() {
      this.slidesNumber--;
    },
    __getScopedSlots: function __getScopedSlots(h) {
      var _this4 = this;

      if (this.slidesNumber === 0) {
        return;
      }

      var slots = this.$scopedSlots;

      if (slots) {
        return Object.keys(slots).filter(function (key) {
          return key.startsWith('control-');
        }).map(function (key) {
          return slots[key](_this4.slotScope);
        });
      }
    },
    __getQuickNav: function __getQuickNav(h) {
      var _this5 = this;

      if (this.slidesNumber === 0 || !this.quickNav) {
        return;
      }

      var slot = this.$scopedSlots['quick-nav'],
          items = [];

      if (slot) {
        var _loop = function _loop(i) {
          items.push(slot({
            slide: i,
            before: i < _this5.slide,
            current: i === _this5.slide,
            after: i > _this5.slide,
            color: _this5.color,
            goToSlide: function goToSlide(slide) {
              _this5.goToSlide(slide || i);
            }
          }));
        };

        for (var i = 0; i < this.slidesNumber; i++) {
          _loop(i);
        }
      } else {
        var _loop2 = function _loop2(i) {
          items.push(h(QBtn["a" /* default */], {
            key: i,
            'class': {
              inactive: i !== _this5.slide
            },
            props: {
              icon: _this5.computedQuickNavIcon,
              round: true,
              flat: true,
              dense: true,
              color: _this5.color
            },
            on: {
              click: function click() {
                _this5.goToSlide(i);
              }
            }
          }));
        };

        for (var i = 0; i < this.slidesNumber; i++) {
          _loop2(i);
        }
      }

      return h('div', {
        staticClass: 'q-carousel-quick-nav scroll text-center',
        'class': ["text-".concat(this.color), "absolute-".concat(this.quickNavPosition)]
      }, items);
    },
    __getThumbnails: function __getThumbnails(h) {
      var _this6 = this;

      var slides = this.thumbnails.map(function (img, index) {
        if (!img) {
          return;
        }

        return h('div', {
          on: {
            click: function click() {
              _this6.goToSlide(index);
            }
          }
        }, [h('img', {
          attrs: {
            src: img
          },
          'class': {
            active: _this6.slide === index
          }
        })]);
      });
      var nodes = [h(QBtn["a" /* default */], {
        staticClass: 'q-carousel-thumbnail-btn absolute',
        props: {
          icon: this.computedThumbnailIcon,
          fabMini: true,
          flat: true,
          color: this.color
        },
        on: {
          click: function click() {
            _this6.viewThumbnails = !_this6.viewThumbnails;
          }
        }
      }), h('div', {
        staticClass: 'q-carousel-thumbnails scroll absolute-bottom',
        'class': {
          active: this.viewThumbnails
        }
      }, [h('div', {
        staticClass: 'row gutter-xs',
        'class': this.thumbnailsHorizontal ? 'no-wrap' : 'justify-center'
      }, slides)])];

      if (this.viewThumbnails) {
        nodes.unshift(h('div', {
          staticClass: 'absolute-full',
          on: {
            click: function click() {
              _this6.viewThumbnails = false;
            }
          }
        }));
      }

      return nodes;
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-carousel',
      style: this.computedStyle,
      'class': {
        fullscreen: this.inFullscreen
      }
    }, [h('div', {
      staticClass: 'q-carousel-inner',
      directives: this.noSwipe ? null : [{
        name: 'touch-pan',
        modifiers: {
          horizontal: true,
          prevent: true,
          stop: true
        },
        value: this.__pan
      }]
    }, [h('div', {
      ref: 'track',
      staticClass: 'q-carousel-track',
      style: this.trackPosition,
      'class': {
        'infinite-left': this.infiniteLeft,
        'infinite-right': this.infiniteRight
      }
    }, [this.infiniteRight ? h('div', {
      staticClass: 'q-carousel-slide',
      style: "flex: 0 0 ".concat(100, "%")
    }) : null, this.$slots.default, this.infiniteLeft ? h('div', {
      staticClass: 'q-carousel-slide',
      style: "flex: 0 0 ".concat(100, "%")
    }) : null])]), this.arrows ? h(QBtn["a" /* default */], {
      staticClass: 'q-carousel-left-arrow absolute',
      props: {
        color: this.color,
        icon: this.arrowIcon[0],
        fabMini: true,
        flat: true
      },
      directives: [{
        name: 'show',
        value: this.canGoToPrevious
      }],
      on: {
        click: this.previous
      }
    }) : null, this.arrows ? h(QBtn["a" /* default */], {
      staticClass: 'q-carousel-right-arrow absolute',
      props: {
        color: this.color,
        icon: this.arrowIcon[1],
        fabMini: true,
        flat: true
      },
      directives: [{
        name: 'show',
        value: this.canGoToNext
      }],
      on: {
        click: this.next
      }
    }) : null, this.__getQuickNav(h), this.__getScopedSlots(h), this.thumbnails.length ? this.__getThumbnails(h) : null, this.$slots.control]);
  },
  mounted: function mounted() {
    var _this7 = this;

    this.__planAutoPlay();

    if (this.handleArrowKeys) {
      this.__setArrowKeys(true);
    }

    this.__stopSlideNumberNotifier = this.$watch('slidesNumber', function (val) {
      if (_this7.value >= val) {
        _this7.$emit('input', val - 1);
      }
    }, {
      immediate: true
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.__cleanup();

    this.__stopSlideNumberNotifier();

    if (this.handleArrowKeys) {
      this.__setArrowKeys(false);
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/carousel/QCarouselSlide.js
/* harmony default export */ var QCarouselSlide = ({
  name: 'QCarouselSlide',
  inject: {
    carousel: {
      default: function _default() {
        console.error('QCarouselSlide needs to be child of QCarousel');
      }
    }
  },
  props: {
    imgSrc: String
  },
  computed: {
    computedStyle: function computedStyle() {
      var style = {};

      if (this.imgSrc) {
        style.backgroundImage = "url(".concat(this.imgSrc, ")");
        style.backgroundSize = "cover";
        style.backgroundPosition = "50%";
      }

      if (!this.carousel.inFullscreen && this.carousel.height) {
        style.maxHeight = this.carousel.height;
      }

      return style;
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-carousel-slide relative-position scroll',
      style: this.computedStyle
    }, this.$slots.default);
  },
  created: function created() {
    this.carousel.__registerSlide();
  },
  beforeDestroy: function beforeDestroy() {
    this.carousel.__unregisterSlide();
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/carousel/QCarouselControl.js
/* harmony default export */ var QCarouselControl = ({
  name: 'QCarouselControl',
  props: {
    position: {
      type: String,
      default: 'bottom-right'
    },
    offset: {
      type: Array,
      default: function _default() {
        return [18, 18];
      }
    }
  },
  computed: {
    computedClass: function computedClass() {
      return "absolute-".concat(this.position);
    },
    computedStyle: function computedStyle() {
      return {
        margin: "".concat(this.offset[1], "px ").concat(this.offset[0], "px")
      };
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-carousel-control absolute',
      style: this.computedStyle,
      'class': this.computedClass
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/carousel/index.js




// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/chat/QChatMessage.js

/* harmony default export */ var QChatMessage = ({
  name: 'QChatMessage',
  props: {
    sent: Boolean,
    label: String,
    bgColor: String,
    textColor: String,
    name: String,
    avatar: String,
    text: Array,
    stamp: String,
    size: String
  },
  computed: {
    textClass: function textClass() {
      if (this.textColor) {
        return "text-".concat(this.textColor);
      }
    },
    messageClass: function messageClass() {
      if (this.bgColor) {
        return "text-".concat(this.bgColor);
      }
    },
    sizeClass: function sizeClass() {
      if (this.size) {
        return "col-".concat(this.size);
      }
    },
    classes: function classes() {
      return {
        'q-message-sent': this.sent,
        'q-message-received': !this.sent
      };
    }
  },
  methods: {
    __getText: function __getText(h) {
      var _this = this;

      return this.text.map(function (msg, index) {
        return h('div', {
          staticClass: 'q-message-text',
          'class': _this.messageClass
        }, [h('span', {
          staticClass: 'q-message-text-content',
          'class': _this.textClass
        }, [h('div', {
          domProps: {
            innerHTML: msg
          }
        }), _this.stamp ? h('div', {
          staticClass: 'q-message-stamp',
          domProps: {
            innerHTML: _this.stamp
          }
        }) : null])]);
      });
    },
    __getMessage: function __getMessage(h) {
      return h('div', {
        staticClass: 'q-message-text',
        'class': this.messageClass
      }, [h('span', {
        staticClass: 'q-message-text-content',
        'class': this.textClass
      }, [this.$slots.default, this.stamp ? h('div', {
        staticClass: 'q-message-stamp',
        domProps: {
          innerHTML: this.stamp
        }
      }) : null])]);
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-message',
      'class': this.classes
    }, [this.label ? h('div', {
      staticClass: 'q-message-label text-center',
      domProps: {
        innerHTML: this.label
      }
    }) : null, h('div', {
      staticClass: 'q-message-container row items-end no-wrap'
    }, [this.$slots.avatar || (this.avatar ? h('img', {
      staticClass: 'q-message-avatar col-auto',
      attrs: {
        src: this.avatar
      }
    }) : null), h('div', {
      'class': this.sizeClass
    }, [this.name ? h('div', {
      staticClass: 'q-message-name',
      domProps: {
        innerHTML: this.name
      }
    }) : null, this.text ? this.__getText(h) : null, this.$slots.default ? this.__getMessage(h) : null])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/chat/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/checkbox/QCheckbox.js
var QCheckbox = __webpack_require__("525b");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/checkbox/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/chip/QChip.js
var QChip = __webpack_require__("4bf4");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/chip/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/input-frame.js
var input_frame = __webpack_require__("cd88");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/input.js
var mixins_input = __webpack_require__("d7db");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/input-frame/QInputFrame.js
var QInputFrame = __webpack_require__("2054");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinner.js
var QSpinner = __webpack_require__("b70a");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/chips-input/QChipsInput.js










/* harmony default export */ var QChipsInput = ({
  name: 'QChipsInput',
  mixins: [input_frame["a" /* default */], mixins_input["a" /* default */]],
  props: {
    value: {
      type: Array,
      required: true
    },
    chipsColor: String,
    chipsBgColor: String,
    readonly: Boolean,
    addIcon: String,
    upperCase: Boolean,
    lowerCase: Boolean
  },
  data: function data() {
    var _this = this;

    return {
      input: '',
      model: this.value.slice(),
      watcher: null,
      shadow: {
        val: this.input,
        set: this.add,
        setNav: function setNav(val) {
          _this.input = val;
        },
        loading: false,
        selectionOpen: false,
        watched: 0,
        isEditable: function isEditable() {
          return _this.editable;
        },
        isDark: function isDark() {
          return _this.dark;
        },
        hasFocus: function hasFocus() {
          return document.activeElement === _this.$refs.input;
        },
        register: function register() {
          _this.shadow.watched += 1;

          _this.__watcherRegister();
        },
        unregister: function unregister() {
          _this.shadow.watched = Math.max(0, _this.shadow.watched - 1);

          _this.__watcherUnregister();
        },
        getEl: function getEl() {
          return _this.$refs.input;
        }
      }
    };
  },
  watch: {
    value: function value(v) {
      this.model = v.slice();
    }
  },
  provide: function provide() {
    return {
      __input: this.shadow
    };
  },
  computed: {
    length: function length() {
      return this.model ? this.model.length : 0;
    },
    isLoading: function isLoading() {
      return this.loading || this.shadow.watched && this.shadow.loading;
    },
    computedAddIcon: function computedAddIcon() {
      return this.addIcon || this.$q.icon.chipsInput.add;
    },
    computedChipTextColor: function computedChipTextColor() {
      if (this.chipsColor) {
        return this.chipsColor;
      }

      if (this.isInvertedLight) {
        return this.invertedLight ? this.color : 'white';
      }

      if (this.isInverted) {
        return this.invertedLight ? 'grey-10' : this.color;
      }

      return this.dark ? this.color : 'white';
    },
    computedChipBgColor: function computedChipBgColor() {
      if (this.chipsBgColor) {
        return this.chipsBgColor;
      }

      if (this.isInvertedLight) {
        return this.invertedLight ? 'grey-10' : this.color;
      }

      if (this.isInverted) {
        return this.invertedLight ? this.color : 'white';
      }

      return this.dark ? 'white' : this.color;
    },
    inputClasses: function inputClasses() {
      var cls = [this.alignClass];
      this.upperCase && cls.push('uppercase');
      this.lowerCase && cls.push('lowercase');
      return cls;
    },
    isClearable: function isClearable() {
      return this.editable && this.clearable && this.model.length !== 0;
    }
  },
  methods: {
    add: function add() {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.input;
      clearTimeout(this.timer);
      this.focus();

      if (this.isLoading || !this.editable || !value) {
        return;
      }

      var val = this.lowerCase ? value.toLowerCase() : this.upperCase ? value.toUpperCase() : value;

      if (this.model.includes(val)) {
        this.$emit('duplicate', val);
        return;
      }

      this.$emit('add', {
        index: this.model.length,
        val: val
      });
      this.model.push(val);
      this.$emit('input', this.model);
      this.input = '';
    },
    remove: function remove(index) {
      clearTimeout(this.timer);
      this.focus();

      if (this.editable && index >= 0 && index < this.length) {
        this.$emit('remove', {
          index: index,
          value: this.model.splice(index, 1)
        });
        this.$emit('input', this.model);
      }
    },
    clear: function clear(evt) {
      clearTimeout(this.timer);
      evt && Object(utils_event["h" /* stopAndPrevent */])(evt);

      if (this.editable) {
        this.$emit('input', []);
        this.$emit('clear');
      }
    },
    __clearTimer: function __clearTimer() {
      var _this2 = this;

      this.$nextTick(function () {
        return clearTimeout(_this2.timer);
      });
    },
    __handleKeyDown: function __handleKeyDown(e) {
      switch (Object(utils_event["b" /* getEventKey */])(e)) {
        case 13:
          if (this.shadow.selectionOpen) {
            return;
          }

          Object(utils_event["h" /* stopAndPrevent */])(e);
          return this.add();

        case 8:
          if (!this.input.length && this.length) {
            this.remove(this.length - 1);
          }

          return;

        default:
          return this.__onKeydown(e);
      }
    },
    __onClick: function __onClick() {
      this.focus();
    },
    __watcher: function __watcher(value) {
      if (this.shadow.watched) {
        this.shadow.val = value;
      }
    },
    __watcherRegister: function __watcherRegister() {
      if (!this.watcher) {
        this.watcher = this.$watch('input', this.__watcher);
      }
    },
    __watcherUnregister: function __watcherUnregister(forceUnregister) {
      if (this.watcher && (forceUnregister || !this.shadow.watched)) {
        this.watcher();
        this.watcher = null;
        this.shadow.selectionOpen = false;
      }
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.__watcherUnregister(true);
  },
  render: function render(h) {
    var _this3 = this;

    return h(QInputFrame["a" /* default */], {
      staticClass: 'q-chips-input',
      props: {
        prefix: this.prefix,
        suffix: this.suffix,
        stackLabel: this.stackLabel,
        floatLabel: this.floatLabel,
        error: this.error,
        warning: this.warning,
        disable: this.disable,
        readonly: this.readonly,
        inverted: this.inverted,
        invertedLight: this.invertedLight,
        dark: this.dark,
        hideUnderline: this.hideUnderline,
        before: this.before,
        after: this.after,
        color: this.color,
        noParentField: this.noParentField,
        focused: this.focused,
        length: this.length,
        additionalLength: this.input.length > 0
      },
      on: {
        click: this.__onClick
      }
    }, [h('div', {
      staticClass: 'col row items-center q-input-chips'
    }, this.model.map(function (label, index) {
      return h(QChip["a" /* default */], {
        key: "".concat(label, "#").concat(index),
        props: {
          small: true,
          closable: _this3.editable,
          color: _this3.computedChipBgColor,
          textColor: _this3.computedChipTextColor
        },
        attrs: {
          tabindex: _this3.editable && _this3.focused ? 0 : -1
        },
        on: {
          blur: _this3.__onInputBlur,
          focus: _this3.__clearTimer,
          hide: function hide() {
            _this3.remove(index);
          }
        },
        nativeOn: {
          blur: _this3.__onInputBlur,
          focus: _this3.__clearTimer
        }
      }, label);
    }).concat([h('input', {
      ref: 'input',
      staticClass: 'col q-input-target',
      'class': this.inputClasses,
      domProps: {
        value: this.input
      },
      attrs: Object.assign({}, this.$attrs, {
        placeholder: this.inputPlaceholder,
        disabled: this.disable,
        readonly: this.readonly
      }),
      on: {
        input: function input(e) {
          _this3.input = e.target.value;
        },
        focus: this.__onFocus,
        blur: this.__onInputBlur,
        keydown: this.__handleKeyDown,
        keyup: this.__onKeyup
      }
    })])), this.isLoading ? this.$slots.loading ? h('div', {
      staticClass: 'q-if-control',
      slot: 'after'
    }, this.$slots.loading) : h(QSpinner["a" /* default */], {
      slot: 'after',
      staticClass: 'q-if-control',
      props: {
        size: '24px'
      }
    }) : this.editable && h(QIcon["a" /* default */], {
      slot: 'after',
      staticClass: 'q-if-control',
      'class': {
        invisible: this.input.length === 0
      },
      props: {
        name: this.computedAddIcon
      },
      nativeOn: {
        mousedown: this.__clearTimer,
        touchstart: this.__clearTimer,
        click: function click() {
          _this3.add();
        }
      }
    }) || void 0, this.isClearable && h(QIcon["a" /* default */], {
      slot: 'after',
      staticClass: 'q-if-control',
      props: {
        name: this.$q.icon.input["clear".concat(this.isInverted ? 'Inverted' : '')]
      },
      nativeOn: {
        mousedown: this.__clearTimer,
        touchstart: this.__clearTimer,
        click: this.clear
      }
    }) || void 0].concat(this.$slots.default ? h('div', {
      staticClass: 'absolute-full no-pointer-events',
      slot: 'after'
    }, this.$slots.default) : void 0));
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/chips-input/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find.js
var es6_array_find = __webpack_require__("7514");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/item.js
var item = __webpack_require__("bd60");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/list/QItemTile.js




/* harmony default export */ var QItemTile = ({
  name: 'QItemTile',
  props: {
    icon: String,
    letter: Boolean,
    inverted: Boolean,
    image: Boolean,
    avatar: Boolean,
    stamp: Boolean,
    label: Boolean,
    sublabel: Boolean,
    lines: [Number, String],
    tag: {
      type: String,
      default: 'div'
    },
    color: String,
    textColor: String
  },
  computed: {
    hasLines: function hasLines() {
      return (this.label || this.sublabel) && this.lines;
    },
    type: function type() {
      var _this = this;

      return ['icon', 'label', 'sublabel', 'image', 'avatar', 'letter', 'stamp'].find(function (type) {
        return _this[type];
      });
    },
    classes: function classes() {
      var cls = [];

      if (this.color) {
        if (this.inverted) {
          cls.push("bg-".concat(this.color));
        } else if (!this.textColor) {
          cls.push("text-".concat(this.color));
        }
      }

      this.textColor && cls.push("text-".concat(this.textColor));
      this.type && cls.push("q-item-".concat(this.type));

      if (this.inverted && (this.icon || this.letter)) {
        cls.push('q-item-inverted');
        cls.push('flex');
        cls.push('flex-center');
      }

      if (this.hasLines && (this.lines === '1' || this.lines === 1)) {
        cls.push('ellipsis');
      }

      return cls;
    },
    style: function style() {
      if (this.hasLines) {
        return Object(item["c" /* textStyle */])(this.lines);
      }
    }
  },
  render: function render(h) {
    var data = {
      'class': this.classes,
      style: this.style
    };

    if (this.icon) {
      if (this.inverted) {
        return h(this.tag, data, [h(QIcon["a" /* default */], {
          props: {
            name: this.icon
          }
        }, this.$slots.default)]);
      }

      data.props = {
        name: this.icon
      };
    }

    return h(this.icon ? QIcon["a" /* default */] : this.tag, data, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/slide-transition/QSlideTransition.js

/* harmony default export */ var QSlideTransition = ({
  name: 'QSlideTransition',
  props: {
    appear: Boolean,
    duration: {
      type: Number,
      default: 300
    }
  },
  methods: {
    __begin: function __begin(el, height, done) {
      el.style.overflowY = 'hidden';

      if (height !== void 0) {
        el.style.height = "".concat(height, "px");
      }

      el.style.transition = "height ".concat(this.duration, "ms cubic-bezier(.25, .8, .50, 1)");
      this.animating = true;
      this.done = done;
    },
    __end: function __end(el, event) {
      el.style.overflowY = null;
      el.style.height = null;
      el.style.transition = null;

      this.__cleanup();

      event !== this.lastEvent && this.$emit(event);
    },
    __cleanup: function __cleanup() {
      this.done && this.done();
      this.done = null;
      this.animating = false;
      clearTimeout(this.timer);
      this.el.removeEventListener('transitionend', this.animListener);
      this.animListener = null;
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.animating && this.__cleanup();
  },
  render: function render(h) {
    var _this = this;

    return h('transition', {
      props: {
        css: false,
        appear: this.appear
      },
      on: {
        enter: function enter(el, done) {
          var pos = 0;
          _this.el = el;

          if (_this.animating === true) {
            _this.__cleanup();

            pos = el.offsetHeight === el.scrollHeight ? 0 : void 0;
          } else {
            _this.lastEvent = 'hide';
          }

          _this.__begin(el, pos, done);

          _this.timer = setTimeout(function () {
            el.style.height = "".concat(el.scrollHeight, "px");

            _this.animListener = function () {
              _this.__end(el, 'show');
            };

            el.addEventListener('transitionend', _this.animListener);
          }, 100);
        },
        leave: function leave(el, done) {
          var pos;
          _this.el = el;

          if (_this.animating === true) {
            _this.__cleanup();
          } else {
            _this.lastEvent = 'show';
            pos = el.scrollHeight;
          }

          _this.__begin(el, pos, done);

          _this.timer = setTimeout(function () {
            el.style.height = 0;

            _this.animListener = function () {
              _this.__end(el, 'hide');
            };

            el.addEventListener('transitionend', _this.animListener);
          }, 100);
        }
      }
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/collapsible/QCollapsible.js









var eventName = 'q:collapsible:close';
/* harmony default export */ var QCollapsible = ({
  name: 'QCollapsible',
  mixins: [model_toggle["a" /* default */], item["a" /* default */], {
    props: item["b" /* subItemProps */]
  }],
  modelToggle: {
    history: false
  },
  props: {
    disable: Boolean,
    popup: Boolean,
    indent: Boolean,
    group: String,
    iconToggle: Boolean,
    collapseIcon: String,
    opened: Boolean,
    duration: Number,
    headerStyle: [Array, String, Object],
    headerClass: [Array, String, Object]
  },
  computed: {
    classes: function classes() {
      return {
        'q-collapsible-opened': this.showing,
        'q-collapsible-closed': !this.showing,
        'q-collapsible-popup-opened': this.popup && this.showing,
        'q-collapsible-popup-closed': this.popup && !this.showing,
        'q-collapsible-cursor-pointer': !this.separateToggle,
        'q-item-dark': this.dark,
        'q-item-separator': this.separator,
        'q-item-inset-separator': this.insetSeparator,
        disabled: this.disable
      };
    },
    separateToggle: function separateToggle() {
      return this.iconToggle || this.to !== void 0;
    }
  },
  watch: {
    showing: function showing(val) {
      if (val && this.group) {
        this.$root.$emit(eventName, this);
      }
    }
  },
  methods: {
    __toggleItem: function __toggleItem() {
      if (!this.separateToggle) {
        this.toggle();
      }
    },
    __toggleIcon: function __toggleIcon(e) {
      if (this.separateToggle) {
        e && Object(utils_event["h" /* stopAndPrevent */])(e);
        this.toggle();
      }
    },
    __eventHandler: function __eventHandler(comp) {
      if (this.group && this !== comp && comp.group === this.group) {
        this.hide();
      }
    },
    __getToggleSide: function __getToggleSide(h, slot) {
      return [h(QItemTile, {
        slot: slot ? 'right' : undefined,
        staticClass: 'cursor-pointer transition-generic relative-position q-collapsible-toggle-icon',
        'class': {
          'rotate-180': this.showing,
          invisible: this.disable
        },
        nativeOn: {
          click: this.__toggleIcon
        },
        props: {
          icon: this.collapseIcon || this.$q.icon.collapsible.icon
        }
      })];
    },
    __getItemProps: function __getItemProps(wrapper) {
      return {
        props: {
          cfg: this.$props
        },
        style: this.headerStyle,
        'class': this.headerClass,
        nativeOn: {
          click: this.__toggleItem
        }
      };
    }
  },
  created: function created() {
    this.$root.$on(eventName, this.__eventHandler);

    if (this.opened || this.value) {
      this.show();
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.$root.$off(eventName, this.__eventHandler);
  },
  render: function render(h) {
    return h(this.tag, {
      staticClass: 'q-collapsible q-item-division relative-position',
      'class': this.classes
    }, [h('div', {
      staticClass: 'q-collapsible-inner'
    }, [this.$slots.header ? h(QItem["a" /* default */], this.__getItemProps(), [this.$slots.header, h(QItemSide["a" /* default */], {
      props: {
        right: true
      },
      staticClass: 'relative-position'
    }, this.__getToggleSide(h))]) : h(QItemWrapper["a" /* default */], this.__getItemProps(true), this.__getToggleSide(h, true)), h(QSlideTransition, {
      props: {
        duration: this.duration
      }
    }, [h('div', {
      directives: [{
        name: 'show',
        value: this.showing
      }]
    }, [h('div', {
      staticClass: 'q-collapsible-sub-item relative-position',
      'class': {
        indent: this.indent
      }
    }, this.$slots.default)])])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/collapsible/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/mixins/display-mode.js
/* harmony default export */ var display_mode = ({
  props: {
    popover: Boolean,
    modal: Boolean
  },
  computed: {
    isPopover: function isPopover() {
      if (this.popover) return true;
      if (this.modal) return false;
      return this.$q.platform.is.desktop && !this.$q.platform.within.iframe;
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/slider/slider-utils.js





function getPercentage(event, dragging, rtl) {
  var val = Object(format["a" /* between */])((Object(utils_event["g" /* position */])(event).left - dragging.left) / dragging.width, 0, 1);
  return rtl ? 1.0 - val : val;
}
function notDivides(res, decimals) {
  var number = decimals ? parseFloat(res.toFixed(decimals)) : res;
  return number !== parseInt(number, 10);
}
function getModel(percentage, min, max, step, decimals) {
  var model = min + percentage * (max - min),
      modulo = (model - min) % step;
  model += (Math.abs(modulo) >= step / 2 ? (modulo < 0 ? -1 : 1) * step : 0) - modulo;

  if (decimals) {
    model = parseFloat(model.toFixed(decimals));
  }

  return Object(format["a" /* between */])(model, min, max);
}
var SliderMixin = {
  directives: {
    TouchPan: touch_pan["a" /* default */]
  },
  props: {
    min: {
      type: Number,
      default: 1
    },
    max: {
      type: Number,
      default: 5
    },
    step: {
      type: Number,
      default: 1
    },
    decimals: Number,
    snap: Boolean,
    markers: Boolean,
    label: Boolean,
    labelAlways: Boolean,
    square: Boolean,
    color: String,
    fillHandleAlways: Boolean,
    error: Boolean,
    warning: Boolean,
    readonly: Boolean,
    disable: Boolean
  },
  computed: {
    editable: function editable() {
      return !this.disable && !this.readonly;
    },
    classes: function classes() {
      var cls = {
        disabled: this.disable,
        readonly: this.readonly,
        'label-always': this.labelAlways,
        'has-error': this.error,
        'has-warning': this.warning
      };

      if (!this.error && !this.warning && this.color) {
        cls["text-".concat(this.color)] = true;
      }

      return cls;
    },
    markersLen: function markersLen() {
      return (this.max - this.min) / this.step + 1;
    },
    labelColor: function labelColor() {
      return this.error ? 'negative' : this.warning ? 'warning' : this.color || 'primary';
    },
    computedDecimals: function computedDecimals() {
      return this.decimals !== void 0 ? this.decimals || 0 : (String(this.step).trim('0').split('.')[1] || '').length;
    },
    computedStep: function computedStep() {
      return this.decimals !== void 0 ? 1 / Math.pow(10, this.decimals || 0) : this.step;
    }
  },
  methods: {
    __pan: function __pan(event) {
      var _this = this;

      if (event.isFinal) {
        if (this.dragging) {
          this.dragTimer = setTimeout(function () {
            _this.dragging = false;
          }, 100);

          this.__end(event.evt);

          this.__update(true);
        }
      } else if (event.isFirst) {
        clearTimeout(this.dragTimer);
        this.dragging = this.__getDragging(event.evt);
      } else if (this.dragging) {
        this.__move(event.evt);

        this.__update();
      }
    },
    __update: function __update(change) {
      var _this2 = this;

      if (JSON.stringify(this.model) === JSON.stringify(this.value)) {
        return;
      }

      this.$emit('input', this.model);

      if (change) {
        this.$nextTick(function () {
          if (JSON.stringify(_this2.model) !== JSON.stringify(_this2.value)) {
            _this2.$emit('change', _this2.model);
          }
        });
      }
    },
    __click: function __click(event) {
      if (!this.dragging) {
        var dragging = this.__getDragging(event);

        if (dragging) {
          this.__end(event, dragging);

          this.__update(true);
        }
      }
    },
    __getMarkers: function __getMarkers(h) {
      if (!this.markers) {
        return;
      }

      var markers = [];

      for (var i = 0; i < this.markersLen; i++) {
        markers.push(h('div', {
          staticClass: 'q-slider-mark',
          key: "marker".concat(i),
          style: {
            left: "".concat(i * 100 * this.step / (this.max - this.min), "%")
          }
        }));
      }

      return markers;
    }
  },
  created: function created() {
    this.__validateProps();
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-slider non-selectable',
      'class': this.classes,
      on: this.editable ? {
        click: this.__click
      } : null,
      directives: this.editable ? [{
        name: 'touch-pan',
        modifiers: {
          horizontal: true,
          prevent: true,
          stop: true
        },
        value: this.__pan
      }] : null
    }, [h('div', {
      ref: 'handle',
      staticClass: 'q-slider-handle-container'
    }, [h('div', {
      staticClass: 'q-slider-track'
    }), this.__getMarkers(h)].concat(this.__getContent(h)))]);
  }
};
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/slider/QSlider.js








/* harmony default export */ var QSlider = ({
  name: 'QSlider',
  mixins: [SliderMixin],
  props: {
    value: Number,
    labelValue: String
  },
  data: function data() {
    return {
      model: this.value,
      dragging: false,
      currentPercentage: (this.value - this.min) / (this.max - this.min)
    };
  },
  computed: {
    percentage: function percentage() {
      if (this.snap) {
        return (this.model - this.min) / (this.max - this.min) * 100 + '%';
      }

      return 100 * this.currentPercentage + '%';
    },
    displayValue: function displayValue() {
      return this.labelValue !== void 0 ? this.labelValue : this.model;
    }
  },
  watch: {
    value: function value(_value) {
      if (this.dragging) {
        return;
      }

      if (_value < this.min) {
        this.model = this.min;
      } else if (_value > this.max) {
        this.model = this.max;
      } else {
        this.model = _value;
      }

      this.currentPercentage = (this.model - this.min) / (this.max - this.min);
    },
    min: function min(value) {
      if (this.model < value) {
        this.model = value;
        return;
      }

      this.$nextTick(this.__validateProps);
    },
    max: function max(value) {
      if (this.model > value) {
        this.model = value;
        return;
      }

      this.$nextTick(this.__validateProps);
    },
    step: function step() {
      this.$nextTick(this.__validateProps);
    }
  },
  methods: {
    __getDragging: function __getDragging(evt) {
      var container = this.$refs.handle;
      return {
        left: container.getBoundingClientRect().left,
        width: container.offsetWidth
      };
    },
    __move: function __move(event) {
      var percentage = getPercentage(event, this.dragging, this.$q.i18n.rtl);
      this.currentPercentage = percentage;
      this.model = getModel(percentage, this.min, this.max, this.step, this.computedDecimals);
    },
    __end: function __end(event) {
      var dragging = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dragging;
      var percentage = getPercentage(event, dragging, this.$q.i18n.rtl);
      this.model = getModel(percentage, this.min, this.max, this.step, this.computedDecimals);
      this.currentPercentage = (this.model - this.min) / (this.max - this.min);
    },
    __onKeyDown: function __onKeyDown(ev) {
      var keyCode = ev.keyCode;

      if (!this.editable || ![37, 40, 39, 38].includes(keyCode)) {
        return;
      }

      Object(utils_event["h" /* stopAndPrevent */])(ev);
      var decimals = this.computedDecimals,
          step = ev.ctrlKey ? 10 * this.computedStep : this.computedStep,
          offset = [37, 40].includes(keyCode) ? -step : step,
          model = decimals ? parseFloat((this.model + offset).toFixed(decimals)) : this.model + offset;
      this.model = Object(format["a" /* between */])(model, this.min, this.max);
      this.currentPercentage = (this.model - this.min) / (this.max - this.min);

      this.__update();
    },
    __onKeyUp: function __onKeyUp(ev) {
      var keyCode = ev.keyCode;

      if (!this.editable || ![37, 40, 39, 38].includes(keyCode)) {
        return;
      }

      this.__update(true);
    },
    __validateProps: function __validateProps() {
      if (this.min >= this.max) {
        console.error('Range error: min >= max', this.$el, this.min, this.max);
      } else if (notDivides((this.max - this.min) / this.step, this.computedDecimals)) {
        console.error('Range error: step must be a divisor of max - min', this.min, this.max, this.step, this.computedDecimals);
      }
    },
    __getContent: function __getContent(h) {
      var _style;

      return [h('div', {
        staticClass: 'q-slider-track active-track',
        style: {
          width: this.percentage
        },
        'class': {
          'no-transition': this.dragging,
          'handle-at-minimum': this.model === this.min
        }
      }), h('div', {
        staticClass: 'q-slider-handle',
        style: (_style = {}, Object(defineProperty["a" /* default */])(_style, this.$q.i18n.rtl ? 'right' : 'left', this.percentage), Object(defineProperty["a" /* default */])(_style, "borderRadius", this.square ? '0' : '50%'), _style),
        'class': {
          dragging: this.dragging,
          'handle-at-minimum': !this.fillHandleAlways && this.model === this.min
        },
        attrs: {
          tabindex: this.$q.platform.is.desktop ? this.editable ? 0 : -1 : void 0
        },
        on: {
          keydown: this.__onKeyDown,
          keyup: this.__onKeyUp
        }
      }, [this.label || this.labelAlways ? h(QChip["a" /* default */], {
        staticClass: 'q-slider-label no-pointer-events',
        'class': {
          'label-always': this.labelAlways
        },
        props: {
          pointing: 'down',
          square: true,
          dense: true,
          color: this.labelColor
        }
      }, [this.displayValue]) : null,  true ? h('div', {
        staticClass: 'q-slider-ring'
      }) : undefined])];
    }
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/parent-field.js
var parent_field = __webpack_require__("e660");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/throttle.js
/* harmony default export */ var throttle = (function (fn) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
  var wait = false;
  var result;
  return function () {
    if (wait) {
      return result;
    }

    wait = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    result = fn.apply(this, args);
    setTimeout(function () {
      wait = false;
    }, limit);
    return result;
  };
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/clone.js
var clone = __webpack_require__("9fe0");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/colors.js
var colors = __webpack_require__("fb82");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/color/QColorPicker.js













/* harmony default export */ var QColorPicker = ({
  name: 'QColorPicker',
  mixins: [parent_field["a" /* default */]],
  directives: {
    TouchPan: touch_pan["a" /* default */]
  },
  props: {
    value: [String, Object],
    defaultValue: {
      type: [String, Object],
      default: null
    },
    formatModel: {
      type: String,
      default: 'auto',
      validator: function validator(v) {
        return ['auto', 'hex', 'rgb', 'hexa', 'rgba'].includes(v);
      }
    },
    disable: Boolean,
    readonly: Boolean,
    dark: Boolean
  },
  data: function data() {
    return {
      view: !this.value || typeof this.value === 'string' ? 'hex' : 'rgb',
      model: this.__parseModel(this.value || this.defaultValue)
    };
  },
  watch: {
    value: {
      handler: function handler(v) {
        var model = this.__parseModel(v || this.defaultValue);

        if (model.hex !== this.model.hex) {
          this.model = model;
        }
      },
      deep: true
    }
  },
  computed: {
    forceHex: function forceHex() {
      return this.formatModel === 'auto' ? null : this.formatModel.indexOf('hex') > -1;
    },
    forceAlpha: function forceAlpha() {
      return this.formatModel === 'auto' ? null : this.formatModel.indexOf('a') > -1;
    },
    isHex: function isHex() {
      return typeof this.value === 'string';
    },
    isOutputHex: function isOutputHex() {
      return this.forceHex !== null ? this.forceHex : this.isHex;
    },
    editable: function editable() {
      return !this.disable && !this.readonly;
    },
    hasAlpha: function hasAlpha() {
      if (this.forceAlpha !== null) {
        return this.forceAlpha;
      }

      return this.isHex ? this.value.trim().length > 7 : this.value && this.value.a !== void 0;
    },
    swatchColor: function swatchColor() {
      return {
        backgroundColor: "rgba(".concat(this.model.r, ",").concat(this.model.g, ",").concat(this.model.b, ",").concat((this.model.a === void 0 ? 100 : this.model.a) / 100, ")")
      };
    },
    saturationStyle: function saturationStyle() {
      return {
        background: "hsl(".concat(this.model.h, ",100%,50%)")
      };
    },
    saturationPointerStyle: function saturationPointerStyle() {
      return Object(defineProperty["a" /* default */])({
        top: "".concat(101 - this.model.v, "%")
      }, this.$q.i18n.rtl ? 'right' : 'left', "".concat(this.model.s, "%"));
    },
    inputsArray: function inputsArray() {
      var inp = ['r', 'g', 'b'];

      if (this.hasAlpha) {
        inp.push('a');
      }

      return inp;
    },
    __needsBorder: function __needsBorder() {
      return true;
    }
  },
  created: function created() {
    this.__saturationChange = throttle(this.__saturationChange, 20);
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-color',
      'class': {
        disabled: this.disable,
        'q-color-dark': this.dark
      }
    }, [this.__getSaturation(h), this.__getSliders(h), this.__getInputs(h)]);
  },
  methods: {
    __getSaturation: function __getSaturation(h) {
      return h('div', {
        ref: 'saturation',
        staticClass: 'q-color-saturation non-selectable relative-position overflow-hidden cursor-pointer',
        style: this.saturationStyle,
        'class': {
          readonly: !this.editable
        },
        on: this.editable ? {
          click: this.__saturationClick
        } : null,
        directives: this.editable ? [{
          name: 'touch-pan',
          modifiers: {
            mightPrevent: true
          },
          value: this.__saturationPan
        }] : null
      }, [h('div', {
        staticClass: 'q-color-saturation-white absolute-full'
      }), h('div', {
        staticClass: 'q-color-saturation-black absolute-full'
      }), h('div', {
        staticClass: 'absolute',
        style: this.saturationPointerStyle
      }, [this.model.hex !== void 0 ? h('div', {
        staticClass: 'q-color-saturation-circle'
      }) : null])]);
    },
    __getSliders: function __getSliders(h) {
      var _this = this;

      return h('div', {
        staticClass: 'q-color-sliders row items-center'
      }, [h('div', {
        staticClass: 'q-color-swatch q-mt-sm q-ml-md q-mb-sm non-selectable overflow-hidden'
      }, [h('div', {
        style: this.swatchColor,
        staticClass: 'fit'
      })]), h('div', {
        staticClass: 'col q-pa-sm'
      }, [h('div', {
        staticClass: 'q-color-hue non-selectable'
      }, [h(QSlider, {
        props: {
          value: this.model.h,
          color: 'white',
          min: 0,
          max: 360,
          fillHandleAlways: true,
          readonly: !this.editable
        },
        on: {
          input: this.__onHueChange,
          dragend: function dragend(val) {
            return _this.__onHueChange(val, true);
          }
        }
      })]), this.hasAlpha ? h('div', {
        staticClass: 'q-color-alpha non-selectable'
      }, [h(QSlider, {
        props: {
          value: this.model.a,
          color: 'white',
          min: 0,
          max: 100,
          fillHandleAlways: true,
          readonly: !this.editable
        },
        on: {
          input: function input(value) {
            return _this.__onNumericChange({
              target: {
                value: value
              }
            }, 'a', 100);
          },
          dragend: function dragend(value) {
            return _this.__onNumericChange({
              target: {
                value: value
              }
            }, 'a', 100, true);
          }
        }
      })]) : null])]);
    },
    __getNumericInputs: function __getNumericInputs(h) {
      var _this2 = this;

      return this.inputsArray.map(function (formatModel) {
        var max = formatModel === 'a' ? 100 : 255;
        return h('div', {
          staticClass: 'col q-color-padding'
        }, [h('input', {
          attrs: {
            type: 'number',
            min: 0,
            max: max,
            readonly: !_this2.editable,
            tabindex: _this2.editable ? 0 : -1
          },
          staticClass: 'full-width text-center q-no-input-spinner',
          domProps: {
            value: _this2.model.hex === void 0 ? '' : Math.round(_this2.model[formatModel])
          },
          on: {
            input: function input(evt) {
              return _this2.__onNumericChange(evt, formatModel, max);
            },
            blur: function blur(evt) {
              return _this2.editable && _this2.__onNumericChange(evt, formatModel, max, true);
            }
          }
        }), h('div', {
          staticClass: 'q-color-label text-center uppercase'
        }, [formatModel])]);
      });
    },
    __getInputs: function __getInputs(h) {
      var _this3 = this;

      var inputs = this.view === 'hex' ? [h('div', {
        staticClass: 'col'
      }, [h('input', {
        domProps: {
          value: this.model.hex
        },
        attrs: {
          readonly: !this.editable,
          tabindex: this.editable ? 0 : -1
        },
        on: {
          change: this.__onHexChange,
          blur: function blur(evt) {
            return _this3.editable && _this3.__onHexChange(evt, true);
          }
        },
        staticClass: 'full-width text-center uppercase'
      }), h('div', {
        staticClass: 'q-color-label text-center'
      }, ["HEX".concat(this.hasAlpha ? ' / A' : '')])])] : this.__getNumericInputs(h);
      return h('div', {
        staticClass: 'q-color-inputs row items-center q-px-sm q-pb-sm'
      }, [h('div', {
        staticClass: 'col q-mr-sm row no-wrap'
      }, inputs), h('div', [h(QBtn["a" /* default */], {
        props: {
          flat: true,
          disable: this.disable
        },
        on: {
          click: this.__nextInputView
        },
        staticClass: 'q-pa-none'
      }, [h('svg', {
        attrs: {
          viewBox: '0 0 24 24'
        },
        style: {
          width: '24px',
          height: '24px'
        }
      }, [h('path', {
        attrs: {
          fill: 'currentColor',
          d: 'M12,18.17L8.83,15L7.42,16.41L12,21L16.59,16.41L15.17,15M12,5.83L15.17,9L16.58,7.59L12,3L7.41,7.59L8.83,9L12,5.83Z'
        }
      })])])])]);
    },
    __onSaturationChange: function __onSaturationChange(left, top, change) {
      var panel = this.$refs.saturation;

      if (!panel) {
        return;
      }

      var width = panel.clientWidth,
          height = panel.clientHeight,
          rect = panel.getBoundingClientRect();
      var x = Math.min(width, Math.max(0, left - rect.left));

      if (this.$q.i18n.rtl) {
        x = width - x;
      }

      var y = Math.min(height, Math.max(0, top - rect.top)),
          s = Math.round(100 * x / width),
          v = Math.round(100 * Math.max(0, Math.min(1, -(y / height) + 1))),
          rgb = Object(colors["d" /* hsvToRgb */])({
        h: this.model.h,
        s: s,
        v: v,
        a: this.hasAlpha ? this.model.a : void 0
      });
      this.model.s = s;
      this.model.v = v;

      this.__update(rgb, Object(colors["e" /* rgbToHex */])(rgb), change);
    },
    __onHueChange: function __onHueChange(h, change) {
      h = Math.round(h);
      var val = Object(colors["d" /* hsvToRgb */])({
        h: h,
        s: this.model.s,
        v: this.model.v,
        a: this.hasAlpha ? this.model.a : void 0
      });
      this.model.h = h;

      this.__update(val, Object(colors["e" /* rgbToHex */])(val), change);
    },
    __onNumericChange: function __onNumericChange(evt, formatModel, max, change) {
      var val = Number(evt.target.value);

      if (isNaN(val)) {
        return;
      }

      val = Math.floor(val);

      if (val < 0 || val > max) {
        if (change) {
          this.$forceUpdate();
        }

        return;
      }

      var rgb = {
        r: formatModel === 'r' ? val : this.model.r,
        g: formatModel === 'g' ? val : this.model.g,
        b: formatModel === 'b' ? val : this.model.b,
        a: this.hasAlpha ? formatModel === 'a' ? val : this.model.a : void 0
      };

      if (formatModel !== 'a') {
        var hsv = Object(colors["f" /* rgbToHsv */])(rgb);
        this.model.h = hsv.h;
        this.model.s = hsv.s;
        this.model.v = hsv.v;
      }

      this.__update(rgb, Object(colors["e" /* rgbToHex */])(rgb), change);
    },
    __onHexChange: function __onHexChange(evt, change) {
      var hex = evt.target.value,
          len = hex.length,
          edges = this.hasAlpha ? [5, 9] : [4, 7];

      if (len !== edges[0] && len !== edges[1]) {
        if (change) {
          this.$forceUpdate();
        }

        return;
      }

      var rgb = Object(colors["c" /* hexToRgb */])(hex),
          hsv = Object(colors["f" /* rgbToHsv */])(rgb);
      this.model.h = hsv.h;
      this.model.s = hsv.s;
      this.model.v = hsv.v;

      this.__update(rgb, hex, change);
    },
    __update: function __update(rgb, hex, change) {
      var _this4 = this;

      var value = this.isOutputHex ? hex : rgb;
      this.model.hex = hex;
      this.model.r = rgb.r;
      this.model.g = rgb.g;
      this.model.b = rgb.b;
      this.model.a = this.hasAlpha ? rgb.a : void 0;
      this.$emit('input', value);
      this.$nextTick(function () {
        if (change && JSON.stringify(value) !== JSON.stringify(_this4.value)) {
          _this4.$emit('change', value);
        }
      });
    },
    __nextInputView: function __nextInputView() {
      this.view = this.view === 'hex' ? 'rgba' : 'hex';
    },
    __parseModel: function __parseModel(v) {
      if (v === null || v === void 0) {
        return {
          h: 0,
          s: 0,
          v: 0,
          r: 0,
          g: 0,
          b: 0,
          hex: void 0,
          a: 100
        };
      }

      var model = typeof v === 'string' ? Object(colors["c" /* hexToRgb */])(v.trim()) : Object(clone["a" /* default */])(v);

      if (this.forceAlpha === (model.a === void 0)) {
        model.a = this.forceAlpha ? 100 : void 0;
      }

      model.hex = Object(colors["e" /* rgbToHex */])(model);
      return Object.assign({
        a: 100
      }, model, Object(colors["f" /* rgbToHsv */])(model));
    },
    __saturationPan: function __saturationPan(evt) {
      if (evt.isFinal) {
        this.__dragStop(evt);
      } else if (evt.isFirst) {
        this.__dragStart(evt);
      } else {
        this.__dragMove(evt);
      }
    },
    __dragStart: function __dragStart(event) {
      Object(utils_event["h" /* stopAndPrevent */])(event.evt);
      this.saturationDragging = true;

      this.__saturationChange(event);
    },
    __dragMove: function __dragMove(event) {
      if (!this.saturationDragging) {
        return;
      }

      Object(utils_event["h" /* stopAndPrevent */])(event.evt);

      this.__saturationChange(event);
    },
    __dragStop: function __dragStop(event) {
      var _this5 = this;

      Object(utils_event["h" /* stopAndPrevent */])(event.evt);
      setTimeout(function () {
        _this5.saturationDragging = false;
      }, 100);

      this.__onSaturationChange(event.position.left, event.position.top, true);
    },
    __saturationChange: function __saturationChange(evt) {
      this.__onSaturationChange(evt.position.left, evt.position.top);
    },
    __saturationClick: function __saturationClick(evt) {
      if (this.saturationDragging) {
        return;
      }

      this.__onSaturationChange(evt.pageX - window.pageXOffset, evt.pageY - window.pageYOffset, true);
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/color/QColor.js













var contentCss =  false ? undefined : {
  maxWidth: '95vw',
  maxHeight: '98vh'
};
/* harmony default export */ var QColor = ({
  name: 'QColor',
  mixins: [input_frame["a" /* default */], display_mode],
  props: {
    value: {
      required: true
    },
    color: {
      type: String,
      default: 'primary'
    },
    defaultValue: {
      type: [String, Object],
      default: null
    },
    formatModel: {
      type: String,
      default: 'auto',
      validator: function validator(v) {
        return ['auto', 'hex', 'rgb', 'hexa', 'rgba'].includes(v);
      }
    },
    displayValue: String,
    okLabel: String,
    cancelLabel: String
  },
  watch: {
    value: function value(v) {
      if (!this.disable && this.isPopover) {
        this.model = Object(clone["a" /* default */])(v);
      }
    }
  },
  data: function data() {
    var data = this.isPopover ? {} : {
      transition:  false ? undefined : 'q-modal'
    };
    data.focused = false;
    data.model = Object(clone["a" /* default */])(this.value || this.defaultValue);
    return data;
  },
  computed: {
    actualValue: function actualValue() {
      if (this.displayValue) {
        return this.displayValue;
      }

      if (this.value) {
        return typeof this.value === 'string' ? this.value : "rgb".concat(this.value.a !== void 0 ? 'a' : '', "(").concat(this.value.r, ",").concat(this.value.g, ",").concat(this.value.b).concat(this.value.a !== void 0 ? ",".concat(this.value.a / 100) : '', ")");
      }

      return '';
    },
    computedClearValue: function computedClearValue() {
      return this.clearValue === void 0 ? this.defaultValue : this.clearValue;
    },
    isClearable: function isClearable() {
      return this.editable && this.clearable && JSON.stringify(this.computedClearValue) !== JSON.stringify(this.value);
    },
    modalBtnColor: function modalBtnColor() {
      return  true ? this.color : undefined;
    }
  },
  methods: {
    toggle: function toggle() {
      this.$refs.popup && this[this.$refs.popup.showing ? 'hide' : 'show']();
    },
    show: function show() {
      if (!this.disable) {
        this.__setModel(this.value || this.defaultValue);

        return this.$refs.popup.show();
      }
    },
    hide: function hide() {
      return this.$refs.popup ? this.$refs.popup.hide() : Promise.resolve();
    },
    __handleKeyDown: function __handleKeyDown(e) {
      switch (Object(utils_event["b" /* getEventKey */])(e)) {
        case 13:
        case 32:
          Object(utils_event["h" /* stopAndPrevent */])(e);
          return this.show();

        case 8:
          if (this.isClearable) {
            this.clear();
          }

      }
    },
    __onFocus: function __onFocus() {
      if (this.disable || this.focused) {
        return;
      }

      this.model = Object(clone["a" /* default */])(this.value || this.defaultValue);
      this.focused = true;
      this.$emit('focus');
    },
    __onBlur: function __onBlur(e) {
      var _this = this;

      if (!this.focused) {
        return;
      }

      setTimeout(function () {
        var el = document.activeElement;

        if (!_this.$refs.popup || !_this.$refs.popup.showing || el !== document.body && !_this.$refs.popup.$el.contains(el)) {
          _this.__onHide();

          _this.hide();
        }
      }, 1);
    },
    __onHide: function __onHide(forceUpdate, keepFocus) {
      if (forceUpdate || this.isPopover) {
        this.__update(forceUpdate);
      }

      if (!this.focused) {
        return;
      }

      if (keepFocus) {
        this.$el.focus();
        return;
      }

      this.$emit('blur');
      this.focused = false;
    },
    __setModel: function __setModel(val, forceUpdate) {
      this.model = Object(clone["a" /* default */])(val);

      if (forceUpdate || this.isPopover) {
        this.__update(forceUpdate);
      }
    },
    __hasModelChanged: function __hasModelChanged() {
      return JSON.stringify(this.model) !== JSON.stringify(this.value);
    },
    __update: function __update(change) {
      var _this2 = this;

      this.$nextTick(function () {
        if (_this2.__hasModelChanged()) {
          _this2.$emit('input', _this2.model);

          if (change) {
            _this2.$emit('change', _this2.model);
          }
        }
      });
    },
    __getPicker: function __getPicker(h, modal) {
      var _this3 = this;

      var child = [h(QColorPicker, {
        staticClass: "no-border".concat(modal ? ' full-width' : ''),
        props: Object.assign({}, this.$attrs, {
          value: this.model,
          disable: this.disable,
          readonly: this.readonly,
          formatModel: this.formatModel,
          dark: this.dark,
          noParentField: true
        }),
        on: {
          input: function input(v) {
            return _this3.$nextTick(function () {
              return _this3.__setModel(v);
            });
          }
        }
      })];

      if (modal) {
        child[ true ? 'push' : undefined](h('div', {
          staticClass: 'modal-buttons modal-buttons-top row full-width',
          'class': this.dark ? 'bg-black' : null
        }, [h('div', {
          staticClass: 'col'
        }), h(QBtn["a" /* default */], {
          props: {
            color: this.modalBtnColor,
            flat: true,
            label: this.cancelLabel || this.$q.i18n.label.cancel,
            noRipple: true
          },
          on: {
            click: function click() {
              _this3.__onHide(false, true);

              _this3.hide();
            }
          }
        }), this.editable ? h(QBtn["a" /* default */], {
          props: {
            color: this.modalBtnColor,
            flat: true,
            label: this.okLabel || this.$q.i18n.label.set,
            noRipple: true,
            disable: !this.model
          },
          on: {
            click: function click() {
              _this3.__onHide(true, true);

              _this3.hide();
            }
          }
        }) : null]));
      }

      return child;
    }
  },
  render: function render(h) {
    var _this4 = this;

    return h(QInputFrame["a" /* default */], {
      staticClass: 'q-color-input',
      props: {
        prefix: this.prefix,
        suffix: this.suffix,
        stackLabel: this.stackLabel,
        floatLabel: this.floatLabel,
        error: this.error,
        warning: this.warning,
        disable: this.disable,
        readonly: this.readonly,
        inverted: this.inverted,
        invertedLight: this.invertedLight,
        dark: this.dark,
        hideUnderline: this.hideUnderline,
        before: this.before,
        after: this.after,
        color: this.color,
        noParentField: this.noParentField,
        focused: this.focused || this.$refs.popup && this.$refs.popup.showing,
        focusable: true,
        length: this.actualValue.length
      },
      nativeOn: {
        click: this.toggle,
        focus: this.__onFocus,
        blur: this.__onBlur,
        keydown: this.__handleKeyDown
      }
    }, [h('div', {
      staticClass: 'col q-input-target ellipsis',
      'class': this.fakeInputClasses
    }, [this.fakeInputValue]), this.isPopover ? h(QPopover["a" /* default */], {
      ref: 'popup',
      props: {
        cover: true,
        keepOnScreen: true,
        disable: this.disable,
        anchorClick: false,
        maxHeight: '100vh'
      },
      slot: 'after',
      on: {
        show: this.__onFocus,
        hide: function hide() {
          return _this4.__onHide(true, true);
        }
      }
    }, this.__getPicker(h)) : h(QModal, {
      ref: 'popup',
      staticClass: 'with-backdrop',
      props: {
        contentCss: contentCss,
        minimized: "mat" === 'mat',
        position:  false ? undefined : null,
        transition: this.transition
      },
      on: {
        dismiss: function dismiss() {
          return _this4.__onHide(false, true);
        }
      }
    }, this.__getPicker(h, true)), this.isClearable ? h(QIcon["a" /* default */], {
      slot: 'after',
      props: {
        name: this.$q.icon.input["clear".concat(this.isInverted ? 'Inverted' : '')]
      },
      nativeOn: {
        click: this.clear
      },
      staticClass: 'q-if-control'
    }) : null, h(QIcon["a" /* default */], {
      slot: 'after',
      props: {
        name: this.$q.icon.input.dropdown
      },
      staticClass: 'q-if-control'
    })]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/color/index.js



// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/context-menu/QContextMenu.js




/* harmony default export */ var QContextMenu = ({
  name: 'QContextMenu',
  props: {
    disable: Boolean
  },
  data: function data() {
    return {
      mobile: this.$q.platform.is.mobile
    };
  },
  methods: {
    hide: function hide(evt) {
      if (this.$refs.popup) {
        this.mobile && this.target.classList.remove('non-selectable');
        return this.$refs.popup.hide(evt);
      }
    },
    show: function show(evt) {
      var _this = this;

      if (this.disable) {
        return;
      }

      if (this.mobile) {
        if (this.$refs.popup) {
          this.event = evt;
          this.$refs.popup.show(evt);
        }

        return;
      }

      if (!evt) {
        return;
      }

      Object(utils_event["h" /* stopAndPrevent */])(evt);
      setTimeout(function () {
        if (_this.$refs.popup) {
          _this.event = evt;

          _this.$refs.popup.show(evt);
        }
      }, 100);
    },
    __desktopBodyHide: function __desktopBodyHide(evt) {
      if (!this.$el.contains(evt.target)) {
        this.hide(evt);
      }
    },
    __desktopOnShow: function __desktopOnShow() {
      document.body.addEventListener('contextmenu', this.__desktopBodyHide, true);
      document.body.addEventListener('click', this.__desktopBodyHide, true);
      this.$emit('show', this.event);
    },
    __desktopOnHide: function __desktopOnHide(evt) {
      document.body.removeEventListener('contextmenu', this.__desktopBodyHide, true);
      document.body.removeEventListener('click', this.__desktopBodyHide, true);
      this.$emit('hide', this.event, evt);
    },
    __mobileTouchStartHandler: function __mobileTouchStartHandler(evt) {
      var _this2 = this;

      this.__mobileCleanup();

      if (evt && evt.touches && evt.touches.length > 1) {
        return;
      }

      this.target.classList.add('non-selectable');
      this.touchTimer = setTimeout(function () {
        evt && Object(utils_event["h" /* stopAndPrevent */])(evt);

        _this2.__mobileCleanup();

        setTimeout(function () {
          _this2.show(evt);
        }, 10);
      }, 600);
    },
    __mobileCleanup: function __mobileCleanup() {
      this.target.classList.remove('non-selectable');
      clearTimeout(this.touchTimer);
    }
  },
  render: function render(h) {
    var _this3 = this;

    if (this.mobile) {
      return h(QModal, {
        ref: 'popup',
        props: {
          minimized: true
        },
        on: {
          show: function show() {
            _this3.$emit('show', _this3.event);
          },
          hide: function hide(evt) {
            _this3.$emit('hide', _this3.event, evt);
          }
        }
      }, this.$slots.default);
    }

    return h(QPopover["a" /* default */], {
      ref: 'popup',
      props: {
        anchorClick: false,
        touchPosition: true
      },
      on: {
        show: this.__desktopOnShow,
        hide: this.__desktopOnHide
      }
    }, this.$slots.default);
  },
  mounted: function mounted() {
    var _this4 = this;

    if (this.mobile) {
      this.$nextTick(function () {
        _this4.target = _this4.$el.parentNode;

        _this4.target.addEventListener('touchstart', _this4.__mobileTouchStartHandler);

        ['touchcancel', 'touchmove', 'touchend'].forEach(function (evt) {
          _this4.target.addEventListener(evt, _this4.__mobileCleanup);
        });
      });
    } else {
      this.target = this.$el.parentNode;
      this.target.addEventListener('contextmenu', this.show);
    }
  },
  beforeDestroy: function beforeDestroy() {
    var _this5 = this;

    if (this.mobile) {
      this.target.removeEventListener('touchstart', this.__mobileTouchStartHandler);
      ['touchcancel', 'touchmove', 'touchend'].forEach(function (evt) {
        _this5.target.removeEventListener(evt, _this5.__mobileCleanup);
      });
    } else {
      this.target.removeEventListener('contextmenu', this.show);
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/context-menu/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/can-render.js
var can_render = __webpack_require__("559e");

// CONCATENATED MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/datetime/datetime-props.js





var datetime_props_modelValidator = function modelValidator(v) {
  var type = _typeof(v);

  return v === null || v === undefined || type === 'number' || type === 'string' || Object(is["a" /* isDate */])(v);
};
var datetime_props_inline = {
  value: {
    validator: datetime_props_modelValidator,
    required: true
  },
  defaultValue: {
    type: [String, Number, Date],
    default: null
  },
  type: {
    type: String,
    default: 'date',
    validator: function validator(v) {
      return ['date', 'time', 'datetime'].includes(v);
    }
  },
  color: {
    type: String,
    default: 'primary'
  },
  dark: Boolean,
  min: {
    validator: datetime_props_modelValidator,
    default: null
  },
  max: {
    validator: datetime_props_modelValidator,
    default: null
  },
  headerLabel: String,
  firstDayOfWeek: Number,
  formatModel: {
    type: String,
    default: 'auto',
    validator: function validator(v) {
      return ['auto', 'date', 'number', 'string'].includes(v);
    }
  },
  format24h: {
    type: [Boolean, Number],
    default: 0,
    validator: function validator(v) {
      return [true, false, 0].includes(v);
    }
  },
  defaultView: {
    type: String,
    validator: function validator(v) {
      return ['year', 'month', 'day', 'hour', 'minute'].includes(v);
    }
  },
  minimal: Boolean
};
var datetime_props_input = {
  format: String,
  okLabel: String,
  cancelLabel: String,
  displayValue: String
};
// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.match.js
var es6_regexp_match = __webpack_require__("4917");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.replace.js
var es6_regexp_replace = __webpack_require__("a481");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/i18n.js + 1 modules
var i18n = __webpack_require__("b157");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/date.js








var MILLISECONDS_IN_DAY = 86400000,
    MILLISECONDS_IN_HOUR = 3600000,
    MILLISECONDS_IN_MINUTE = 60000,
    date_token = /\[((?:[^\]\\]|\\]|\\)*)\]|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]/g;

function formatTimezone(offset) {
  var delimeter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var sign = offset > 0 ? '-' : '+',
      absOffset = Math.abs(offset),
      hours = Math.floor(absOffset / 60),
      minutes = absOffset % 60;
  return sign + Object(format["f" /* pad */])(hours) + delimeter + Object(format["f" /* pad */])(minutes);
}

function date_setMonth(date, newMonth) {
  var test = new Date(date.getFullYear(), newMonth, 0, 0, 0, 0, 0),
      days = test.getDate();
  date.setMonth(newMonth - 1, Math.min(days, date.getDate()));
}

function getChange(date, mod, add) {
  var t = new Date(date),
      sign = add ? 1 : -1;
  Object.keys(mod).forEach(function (key) {
    if (key === 'month') {
      date_setMonth(t, t.getMonth() + 1 + sign * mod.month);
      return;
    }

    var op = key === 'year' ? 'FullYear' : Object(format["b" /* capitalize */])(key === 'days' ? 'date' : key);
    t["set".concat(op)](t["get".concat(op)]() + sign * mod[key]);
  });
  return t;
}

function date_isValid(date) {
  if (typeof date === 'number') {
    return true;
  }

  var t = Date.parse(date);
  return isNaN(t) === false;
}
function buildDate(mod, utc) {
  return adjustDate(new Date(), mod, utc);
}
function getDayOfWeek(date) {
  var dow = new Date(date).getDay();
  return dow === 0 ? 7 : dow;
}
function getWeekOfYear(date) {
  var thursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());
  thursday.setDate(thursday.getDate() - (thursday.getDay() + 6) % 7 + 3);
  var firstThursday = new Date(thursday.getFullYear(), 0, 4);
  firstThursday.setDate(firstThursday.getDate() - (firstThursday.getDay() + 6) % 7 + 3);
  var ds = thursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
  thursday.setHours(thursday.getHours() - ds);
  var weekDiff = (thursday - firstThursday) / (MILLISECONDS_IN_DAY * 7);
  return 1 + Math.floor(weekDiff);
}
function isBetweenDates(date, from, to) {
  var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var d1 = new Date(from).getTime(),
      d2 = new Date(to).getTime(),
      cur = new Date(date).getTime();
  opts.inclusiveFrom && d1--;
  opts.inclusiveTo && d2++;
  return cur > d1 && cur < d2;
}
function addToDate(date, mod) {
  return getChange(date, mod, true);
}
function subtractFromDate(date, mod) {
  return getChange(date, mod, false);
}
function adjustDate(date, mod, utc) {
  var t = new Date(date),
      prefix = "set".concat(utc ? 'UTC' : '');
  Object.keys(mod).forEach(function (key) {
    if (key === 'month') {
      date_setMonth(t, mod.month);
      return;
    }

    var op = key === 'year' ? 'FullYear' : key.charAt(0).toUpperCase() + key.slice(1);
    t["".concat(prefix).concat(op)](mod[key]);
  });
  return t;
}
function startOfDate(date, unit) {
  var t = new Date(date);

  switch (unit) {
    case 'year':
      t.setMonth(0);

    case 'month':
      t.setDate(1);

    case 'day':
      t.setHours(0);

    case 'hour':
      t.setMinutes(0);

    case 'minute':
      t.setSeconds(0);

    case 'second':
      t.setMilliseconds(0);
  }

  return t;
}
function endOfDate(date, unit) {
  var t = new Date(date);

  switch (unit) {
    case 'year':
      t.setMonth(11);

    case 'month':
      t.setDate(daysInMonth(date));

    case 'day':
      t.setHours(23);

    case 'hour':
      t.setMinutes(59);

    case 'minute':
      t.setSeconds(59);

    case 'second':
      t.setMilliseconds(59);
  }

  return t;
}
function getMaxDate(date) {
  var t = new Date(date);

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  args.forEach(function (d) {
    t = Math.max(t, new Date(d));
  });
  return t;
}
function getMinDate(date) {
  var t = new Date(date);

  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  args.forEach(function (d) {
    t = Math.min(t, new Date(d));
  });
  return t;
}

function getDiff(t, sub, interval) {
  return (t.getTime() - t.getTimezoneOffset() * MILLISECONDS_IN_MINUTE - (sub.getTime() - sub.getTimezoneOffset() * MILLISECONDS_IN_MINUTE)) / interval;
}

function getDateDiff(date, subtract) {
  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'days';
  var t = new Date(date),
      sub = new Date(subtract);

  switch (unit) {
    case 'years':
      return t.getFullYear() - sub.getFullYear();

    case 'months':
      return (t.getFullYear() - sub.getFullYear()) * 12 + t.getMonth() - sub.getMonth();

    case 'days':
      return getDiff(startOfDate(t, 'day'), startOfDate(sub, 'day'), MILLISECONDS_IN_DAY);

    case 'hours':
      return getDiff(startOfDate(t, 'hour'), startOfDate(sub, 'hour'), MILLISECONDS_IN_HOUR);

    case 'minutes':
      return getDiff(startOfDate(t, 'minute'), startOfDate(sub, 'minute'), MILLISECONDS_IN_MINUTE);

    case 'seconds':
      return getDiff(startOfDate(t, 'second'), startOfDate(sub, 'second'), 1000);
  }
}
function getDayOfYear(date) {
  return getDateDiff(date, startOfDate(date, 'year'), 'days') + 1;
}
function inferDateFormat(example) {
  if (Object(is["a" /* isDate */])(example)) {
    return 'date';
  }

  if (typeof example === 'number') {
    return 'number';
  }

  return 'string';
}
function convertDateToFormat(date, type, format) {
  if (!date && date !== 0) {
    return;
  }

  switch (type) {
    case 'date':
      return date;

    case 'number':
      return date.getTime();

    default:
      return formatDate(date, format);
  }
}
function getDateBetween(date, min, max) {
  var t = new Date(date);

  if (min) {
    var low = new Date(min);

    if (t < low) {
      return low;
    }
  }

  if (max) {
    var high = new Date(max);

    if (t > high) {
      return high;
    }
  }

  return t;
}
function isSameDate(date, date2, unit) {
  var t = new Date(date),
      d = new Date(date2);

  if (unit === void 0) {
    return t.getTime() === d.getTime();
  }

  switch (unit) {
    case 'second':
      if (t.getSeconds() !== d.getSeconds()) {
        return false;
      }

    case 'minute':
      if (t.getMinutes() !== d.getMinutes()) {
        return false;
      }

    case 'hour':
      if (t.getHours() !== d.getHours()) {
        return false;
      }

    case 'day':
      if (t.getDate() !== d.getDate()) {
        return false;
      }

    case 'month':
      if (t.getMonth() !== d.getMonth()) {
        return false;
      }

    case 'year':
      if (t.getFullYear() !== d.getFullYear()) {
        return false;
      }

      break;

    default:
      throw new Error("date isSameDate unknown unit ".concat(unit));
  }

  return true;
}
function daysInMonth(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
}

function getOrdinal(n) {
  if (n >= 11 && n <= 13) {
    return "".concat(n, "th");
  }

  switch (n % 10) {
    case 1:
      return "".concat(n, "st");

    case 2:
      return "".concat(n, "nd");

    case 3:
      return "".concat(n, "rd");
  }

  return "".concat(n, "th");
}

var formatter = {
  YY: function YY(date) {
    return Object(format["f" /* pad */])(date.getFullYear(), 4).substr(2);
  },
  YYYY: function YYYY(date) {
    return Object(format["f" /* pad */])(date.getFullYear(), 4);
  },
  M: function M(date) {
    return date.getMonth() + 1;
  },
  MM: function MM(date) {
    return Object(format["f" /* pad */])(date.getMonth() + 1);
  },
  MMM: function MMM(date) {
    return i18n["a" /* default */].lang.date.monthsShort[date.getMonth()];
  },
  MMMM: function MMMM(date) {
    return i18n["a" /* default */].lang.date.months[date.getMonth()];
  },
  Q: function Q(date) {
    return Math.ceil((date.getMonth() + 1) / 3);
  },
  Qo: function Qo(date) {
    return getOrdinal(this.Q(date));
  },
  D: function D(date) {
    return date.getDate();
  },
  Do: function Do(date) {
    return getOrdinal(date.getDate());
  },
  DD: function DD(date) {
    return Object(format["f" /* pad */])(date.getDate());
  },
  DDD: function DDD(date) {
    return getDayOfYear(date);
  },
  DDDD: function DDDD(date) {
    return Object(format["f" /* pad */])(getDayOfYear(date), 3);
  },
  d: function d(date) {
    return date.getDay();
  },
  dd: function dd(date) {
    return this.dddd(date).slice(0, 2);
  },
  ddd: function ddd(date) {
    return i18n["a" /* default */].lang.date.daysShort[date.getDay()];
  },
  dddd: function dddd(date) {
    return i18n["a" /* default */].lang.date.days[date.getDay()];
  },
  E: function E(date) {
    return date.getDay() || 7;
  },
  w: function w(date) {
    return getWeekOfYear(date);
  },
  ww: function ww(date) {
    return Object(format["f" /* pad */])(getWeekOfYear(date));
  },
  H: function H(date) {
    return date.getHours();
  },
  HH: function HH(date) {
    return Object(format["f" /* pad */])(date.getHours());
  },
  h: function h(date) {
    var hours = date.getHours();

    if (hours === 0) {
      return 12;
    }

    if (hours > 12) {
      return hours % 12;
    }

    return hours;
  },
  hh: function hh(date) {
    return Object(format["f" /* pad */])(this.h(date));
  },
  m: function m(date) {
    return date.getMinutes();
  },
  mm: function mm(date) {
    return Object(format["f" /* pad */])(date.getMinutes());
  },
  s: function s(date) {
    return date.getSeconds();
  },
  ss: function ss(date) {
    return Object(format["f" /* pad */])(date.getSeconds());
  },
  S: function S(date) {
    return Math.floor(date.getMilliseconds() / 100);
  },
  SS: function SS(date) {
    return Object(format["f" /* pad */])(Math.floor(date.getMilliseconds() / 10));
  },
  SSS: function SSS(date) {
    return Object(format["f" /* pad */])(date.getMilliseconds(), 3);
  },
  A: function A(date) {
    return this.H(date) < 12 ? 'AM' : 'PM';
  },
  a: function a(date) {
    return this.H(date) < 12 ? 'am' : 'pm';
  },
  aa: function aa(date) {
    return this.H(date) < 12 ? 'a.m.' : 'p.m.';
  },
  Z: function Z(date) {
    return formatTimezone(date.getTimezoneOffset(), ':');
  },
  ZZ: function ZZ(date) {
    return formatTimezone(date.getTimezoneOffset());
  },
  X: function X(date) {
    return Math.floor(date.getTime() / 1000);
  },
  x: function x(date) {
    return date.getTime();
  }
};
function formatDate(val) {
  var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DDTHH:mm:ss.SSSZ';

  if (val !== 0 && !val) {
    return;
  }

  var date = new Date(val);
  return mask.replace(date_token, function (match, text) {
    if (match in formatter) {
      return formatter[match](date);
    }

    return text === void 0 ? match : text.split('\\]').join(']');
  });
}
function matchFormat() {
  var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return format.match(date_token);
}
function date_clone(value) {
  return Object(is["a" /* isDate */])(value) ? new Date(value.getTime()) : value;
}
/* harmony default export */ var utils_date = ({
  isValid: date_isValid,
  buildDate: buildDate,
  getDayOfWeek: getDayOfWeek,
  getWeekOfYear: getWeekOfYear,
  isBetweenDates: isBetweenDates,
  addToDate: addToDate,
  subtractFromDate: subtractFromDate,
  adjustDate: adjustDate,
  startOfDate: startOfDate,
  endOfDate: endOfDate,
  getMaxDate: getMaxDate,
  getMinDate: getMinDate,
  getDateDiff: getDateDiff,
  getDayOfYear: getDayOfYear,
  inferDateFormat: inferDateFormat,
  convertDateToFormat: convertDateToFormat,
  getDateBetween: getDateBetween,
  isSameDate: isSameDate,
  daysInMonth: daysInMonth,
  formatter: formatter,
  formatDate: formatDate,
  matchFormat: matchFormat,
  clone: date_clone
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/datetime/datetime-mixin.js




var reDate = /^\d{4}[^\d]\d{2}[^\d]\d{2}/;
/* harmony default export */ var datetime_mixin = ({
  props: datetime_props_inline,
  computed: {
    computedValue: function computedValue() {
      if (this.type === 'date' && this.formatModel === 'string' && reDate.test(this.value)) {
        return this.value.slice(0, 10).split(/[^\d]/).join('/');
      }

      return this.value;
    },
    computedDefaultValue: function computedDefaultValue() {
      if (this.type === 'date' && this.formatModel === 'string' && reDate.test(this.defaultValue)) {
        return this.defaultValue.slice(0, 10).split(/[^\d]+/).join('/');
      }

      return this.defaultValue;
    },
    computedDateFormat: function computedDateFormat() {
      if (this.type === 'date' && this.formatModel === 'string') {
        return 'YYYY/MM/DD HH:mm:ss';
      }
    },
    model: {
      get: function get() {
        return date_isValid(this.computedValue) ? new Date(this.computedValue) : this.computedDefaultValue ? new Date(this.computedDefaultValue) : startOfDate(new Date(), 'day');
      },
      set: function set(val) {
        var _this = this;

        var date = getDateBetween(val, this.pmin, this.pmax);
        var value = convertDateToFormat(date, this.formatModel === 'auto' ? inferDateFormat(this.value) : this.formatModel, this.computedDateFormat);
        this.$emit('input', value);
        this.$nextTick(function () {
          if (!isSameDate(value, _this.value)) {
            _this.$emit('change', value);
          }
        });
      }
    },
    pmin: function pmin() {
      return this.min ? new Date(this.min) : null;
    },
    pmax: function pmax() {
      return this.max ? new Date(this.max) : null;
    },
    typeHasDate: function typeHasDate() {
      return this.type === 'date' || this.type === 'datetime';
    },
    typeHasTime: function typeHasTime() {
      return this.type === 'time' || this.type === 'datetime';
    },
    year: function year() {
      return this.model.getFullYear();
    },
    month: function month() {
      return this.model.getMonth() + 1;
    },
    day: function day() {
      return this.model.getDate();
    },
    minute: function minute() {
      return this.model.getMinutes();
    },
    currentYear: function currentYear() {
      return new Date().getFullYear();
    },
    yearInterval: function yearInterval() {
      return {
        min: this.pmin !== null ? this.pmin.getFullYear() : (this.year || this.currentYear) - 80,
        max: this.pmax !== null ? this.pmax.getFullYear() : (this.year || this.currentYear) + 80
      };
    },
    monthInterval: function monthInterval() {
      return {
        min: this.monthMin,
        max: this.pmax !== null && this.pmax.getFullYear() === this.year ? this.pmax.getMonth() : 11
      };
    },
    monthMin: function monthMin() {
      return this.pmin !== null && this.pmin.getFullYear() === this.year ? this.pmin.getMonth() : 0;
    },
    daysInMonth: function daysInMonth() {
      return new Date(this.year, this.model.getMonth() + 1, 0).getDate();
    },
    editable: function editable() {
      return !this.disable && !this.readonly;
    },
    __needsBorder: function __needsBorder() {
      return true;
    }
  },
  methods: {
    toggleAmPm: function toggleAmPm() {
      if (!this.editable) {
        return;
      }

      var hour = this.model.getHours(),
          offset = this.am ? 12 : -12;
      this.model = new Date(new Date(this.model).setHours(hour + offset));
    },
    __parseTypeValue: function __parseTypeValue(type, value) {
      if (type === 'month') {
        return Object(format["e" /* normalizeToInterval */])(value, 1, 12);
      }

      if (type === 'date') {
        return Object(format["e" /* normalizeToInterval */])(value, 1, this.daysInMonth);
      }

      if (type === 'year') {
        return Object(format["e" /* normalizeToInterval */])(value, this.yearInterval.min, this.yearInterval.max);
      }

      if (type === 'hour') {
        return Object(format["e" /* normalizeToInterval */])(value, 0, 23);
      }

      if (type === 'minute') {
        return Object(format["e" /* normalizeToInterval */])(value, 0, 59);
      }
    }
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/directives/ripple.js
var ripple = __webpack_require__("1526");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/datetime/QDatetimePicker.mat.js












function convertToAmPm(hour) {
  return hour === 0 ? 12 : hour >= 13 ? hour - 12 : hour;
}

/* harmony default export */ var QDatetimePicker_mat = ({
  name: 'QDatetimePicker',
  mixins: [datetime_mixin, parent_field["a" /* default */], can_render["a" /* default */]],
  props: {
    defaultValue: [String, Number, Date],
    disable: Boolean,
    readonly: Boolean
  },
  directives: {
    Ripple: ripple["a" /* default */]
  },
  data: function data() {
    return {
      view: this.__calcView(this.defaultView),
      dragging: false,
      centerClockPos: 0,
      fakeValue: {
        year: null,
        month: null
      }
    };
  },
  watch: {
    value: function value(val) {
      if (!val) {
        this.view = ['date', 'datetime'].includes(this.type) ? 'day' : 'hour';
      }
    },
    view: function view() {
      this.__scrollView(true);
    },
    model: function model() {
      if (this.fakeValue.month !== this.month) {
        this.fakeValue.month = this.month;

        this.__scrollView();
      }

      if (this.fakeValue.year !== this.year) {
        this.fakeValue.year = this.year;

        this.__scrollView();
      }
    }
  },
  computed: {
    classes: function classes() {
      var cls = [];
      this.disable && cls.push('disabled');
      this.readonly && cls.push('readonly');
      this.dark && cls.push('q-datetime-dark');
      this.minimal && cls.push('q-datetime-minimal');
      this.color && cls.push("text-".concat(this.color));
      return cls;
    },
    dateArrow: function dateArrow() {
      var val = [this.$q.icon.datetime.arrowLeft, this.$q.icon.datetime.arrowRight];
      return this.$q.i18n.rtl ? val.reverse() : val;
    },
    computedFormat24h: function computedFormat24h() {
      return this.format24h !== 0 ? this.format24h : this.$q.i18n.date.format24h;
    },
    computedFirstDayOfWeek: function computedFirstDayOfWeek() {
      return this.firstDayOfWeek !== void 0 ? this.firstDayOfWeek : this.$q.i18n.date.firstDayOfWeek;
    },
    headerDayNames: function headerDayNames() {
      var days = this.$q.i18n.date.daysShort,
          first = this.computedFirstDayOfWeek;
      return first > 0 ? days.slice(first, 7).concat(days.slice(0, first)) : days;
    },
    fakeModel: function fakeModel() {
      return new Date(this.fakeYear, this.fakeMonth - 1, 1);
    },
    fakeYear: function fakeYear() {
      return this.fakeValue.year || this.year;
    },
    fakeMonth: function fakeMonth() {
      return this.fakeValue.month || this.month;
    },
    daysInMonth: function daysInMonth() {
      return new Date(this.fakeYear, this.fakeMonth, 0).getDate();
    },
    monthString: function monthString() {
      return "".concat(this.$q.i18n.date.monthsShort[this.month - 1]);
    },
    monthStamp: function monthStamp() {
      return "".concat(this.$q.i18n.date.months[this.fakeMonth - 1], " ").concat(this.fakeYear);
    },
    weekDayString: function weekDayString() {
      return this.headerLabel || this.$q.i18n.date.days[this.model.getDay()];
    },
    fillerDays: function fillerDays() {
      var days = this.fakeModel.getDay() - this.computedFirstDayOfWeek;

      if (days < 0) {
        days += 7;
      }

      return days;
    },
    beforeMinDays: function beforeMinDays() {
      if (this.pmin === null) {
        return false;
      }

      var pminYear = this.pmin.getFullYear(),
          pminMonth = this.pmin.getMonth() + 1;

      if (pminYear === this.fakeYear && pminMonth === this.fakeMonth) {
        return this.pmin.getDate() - 1;
      }

      if (pminYear > this.fakeYear || pminYear === this.fakeYear && pminMonth > this.fakeMonth) {
        return this.daysInMonth;
      }

      return false;
    },
    afterMaxDays: function afterMaxDays() {
      if (this.pmax === null) {
        return false;
      }

      var pmaxYear = this.pmax.getFullYear(),
          pmaxMonth = this.pmax.getMonth() + 1;

      if (pmaxYear === this.fakeYear && pmaxMonth === this.fakeMonth) {
        return this.daysInMonth - this.maxDay;
      }

      if (pmaxYear < this.fakeYear || pmaxYear === this.fakeYear && pmaxMonth < this.fakeMonth) {
        return this.daysInMonth;
      }

      return false;
    },
    maxDay: function maxDay() {
      return this.pmax !== null ? this.pmax.getDate() : this.daysInMonth;
    },
    dateInterval: function dateInterval() {
      var after = this.pmax === null || this.afterMaxDays === false ? 0 : this.afterMaxDays;

      if (this.beforeMinDays > 0 || after) {
        var min = this.beforeMinDays > 0 ? this.beforeMinDays + 1 : 1;
        return {
          min: min,
          max: this.daysInMonth - after
        };
      }

      return {
        min: 1,
        max: this.daysInMonth
      };
    },
    hour: function hour() {
      var h = this.model.getHours();
      return this.computedFormat24h ? h : convertToAmPm(h);
    },
    minute: function minute() {
      return this.model.getMinutes();
    },
    am: function am() {
      return this.model.getHours() <= 11;
    },
    clockPointerStyle: function clockPointerStyle() {
      var forMinute = this.view === 'minute',
          divider = forMinute ? 60 : 12,
          degrees = Math.round((forMinute ? this.minute : this.hour) * (360 / divider)) - 180,
          transforms = ["rotate(".concat(degrees, "deg)")];

      if (!forMinute && this.computedFormat24h && !(this.hour > 0 && this.hour < 13)) {
        transforms.push('scale(.7, .7)');
      }

      return {
        transform: transforms.join(' ')
      };
    },
    isValid: function isValid() {
      return date_isValid(this.value);
    },
    today: function today() {
      var today = new Date();
      return isSameDate(today, this.fakeModel, 'month') ? today.getDate() : -1;
    }
  },
  methods: {
    setYear: function setYear(value, skipView) {
      if (this.editable) {
        if (!skipView) {
          this.view = 'month';
        }

        this.model = new Date(new Date(this.model).setFullYear(this.__parseTypeValue('year', value)));
      }
    },
    setMonth: function setMonth(value, skipView) {
      if (this.editable) {
        if (!skipView) {
          this.view = 'day';
        }

        this.model = adjustDate(this.model, {
          month: value
        });
      }
    },
    moveFakeMonth: function moveFakeMonth(direction) {
      var month = this.fakeMonth + (direction > 0 ? 1 : -1),
          year = this.fakeYear;

      if (month < 1) {
        month = 12;
        year -= 1;
      } else if (month > 12) {
        month = 1;
        year += 1;
      }

      if (this.pmin !== null && direction > 0) {
        var pminYear = this.pmin.getFullYear(),
            pminMonth = this.pmin.getMonth() + 1;

        if (year < pminYear) {
          year = pminYear;
          month = pminMonth;
        } else if (year === pminYear && month < pminMonth) {
          month = pminMonth;
        }
      }

      if (this.pmax !== null && direction < 0) {
        var pmaxYear = this.pmax.getFullYear(),
            pmaxMonth = this.pmax.getMonth() + 1;

        if (year > pmaxYear) {
          year = pmaxYear;
          month = pmaxMonth;
        } else if (year === pmaxYear && month > pmaxMonth) {
          month = pmaxMonth;
        }
      }

      this.fakeValue.year = year;
      this.fakeValue.month = month;
    },
    setDay: function setDay(value, skipView, year, month) {
      if (this.editable) {
        if (year && month) {
          var fake = adjustDate(this.model, {
            month: month
          });
          fake.setFullYear(this.__parseTypeValue('year', year));
          fake.setDate(this.__parseTypeValue('date', value));
          this.model = fake;
        } else {
          this.model = new Date(new Date(this.model).setDate(this.__parseTypeValue('date', value)));
        }

        if (!skipView && this.type === 'date') {
          this.$emit('canClose');

          if (this.minimal) {
            this.setView(this.defaultView);
          }
        } else if (!skipView) {
          this.view = 'hour';
        }
      }
    },
    setHour: function setHour(value) {
      if (!this.editable) {
        return;
      }

      value = this.__parseTypeValue('hour', value);

      if (!this.computedFormat24h && value < 12 && !this.am) {
        value += 12;
      }

      this.model = new Date(new Date(this.model).setHours(value));
    },
    setMinute: function setMinute(value) {
      if (!this.editable) {
        return;
      }

      this.model = new Date(new Date(this.model).setMinutes(this.__parseTypeValue('minute', value)));
    },
    setView: function setView(view) {
      var newView = this.__calcView(view);

      if (this.view !== newView) {
        this.view = newView;
      }
    },
    __calcView: function __calcView(view) {
      switch (this.type) {
        case 'time':
          return ['hour', 'minute'].includes(view) ? view : 'hour';

        case 'date':
          return ['year', 'month', 'day'].includes(view) ? view : 'day';

        default:
          return ['year', 'month', 'day', 'hour', 'minute'].includes(view) ? view : 'day';
      }
    },
    __pad: function __pad(unit, filler) {
      return (unit < 10 ? filler || '0' : '') + unit;
    },
    __scrollView: function __scrollView(delayed) {
      var _this = this;

      if (this.view !== 'year' && this.view !== 'month') {
        return;
      }

      if (delayed) {
        setTimeout(function () {
          _this.__scrollView();
        }, 200);
      }

      var el = this.$refs.selector,
          itemInactive = el.querySelector('.q-btn:not(.active)'),
          itemActive = el.querySelector('.q-btn.active'),
          viewHeight = el ? el.offsetHeight : 0;
      this.$nextTick(function () {
        var rowsAbove = _this.view === 'year' ? _this.year - _this.yearInterval.min : _this.month - _this.monthMin - 1;

        if (viewHeight && itemActive) {
          el.scrollTop = rowsAbove * (itemInactive ? itemInactive.offsetHeight : 0) + (itemActive.offsetHeight - viewHeight) / 2;
        }
      });
    },
    __dragStart: function __dragStart(ev, value) {
      Object(utils_event["h" /* stopAndPrevent */])(ev);
      var clock = this.$refs.clock,
          clockOffset = Object(dom["d" /* offset */])(clock);
      this.centerClockPos = {
        top: clockOffset.top + Object(dom["c" /* height */])(clock) / 2,
        left: clockOffset.left + Object(dom["e" /* width */])(clock) / 2
      };
      this.dragging = true;

      this.__updateClock(ev, value);
    },
    __dragMove: function __dragMove(ev) {
      if (!this.dragging) {
        return;
      }

      Object(utils_event["h" /* stopAndPrevent */])(ev);

      this.__updateClock(ev);
    },
    __dragStop: function __dragStop(ev, value) {
      Object(utils_event["h" /* stopAndPrevent */])(ev);
      this.dragging = false;

      if (ev !== void 0) {
        this.__updateClock(ev, value);
      }

      if (this.view === 'minute') {
        this.$emit('canClose');

        if (this.minimal) {
          this.setView(this.defaultView);
        }
      } else {
        this.view = 'minute';
      }
    },
    __updateClock: function __updateClock(ev, value) {
      if (value !== void 0) {
        return this[this.view === 'hour' ? 'setHour' : 'setMinute'](value);
      }

      var pos = Object(utils_event["g" /* position */])(ev),
          height = Math.abs(pos.top - this.centerClockPos.top),
          distance = Math.sqrt(Math.pow(Math.abs(pos.top - this.centerClockPos.top), 2) + Math.pow(Math.abs(pos.left - this.centerClockPos.left), 2)),
          angle = Math.asin(height / distance) * (180 / Math.PI);

      if (pos.top < this.centerClockPos.top) {
        angle = this.centerClockPos.left < pos.left ? 90 - angle : 270 + angle;
      } else {
        angle = this.centerClockPos.left < pos.left ? angle + 90 : 270 - angle;
      }

      if (this.view === 'hour') {
        var hour = Math.round(angle / 30);

        if (this.computedFormat24h) {
          if (!hour) {
            hour = distance < 85 ? 0 : 12;
          } else if (distance < 85) {
            hour += 12;
          }
        }

        this.setHour(hour);
      } else {
        this.setMinute(Math.round(angle / 6));
      }
    },
    __repeatTimeout: function __repeatTimeout(count) {
      return Math.max(100, 300 - count * count * 10);
    },
    __getTopSection: function __getTopSection(h) {
      var _this2 = this;

      var child = [this.typeHasDate ? h('div', {
        staticClass: 'q-datetime-weekdaystring'
      }, [this.weekDayString]) : void 0, h('div', {
        staticClass: 'col'
      })];

      if (this.typeHasDate) {
        var content = [h('div', {
          staticClass: 'q-datetime-datestring row justify-center items-end'
        }, [h('span', {
          staticClass: 'q-datetime-link small col-auto col-md-12',
          'class': {
            active: this.view === 'month'
          },
          attrs: {
            tabindex: 0
          },
          on: {
            keydown: function keydown(e) {
              var key = Object(utils_event["b" /* getEventKey */])(e);

              if (key === 38 || key === 39) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setMonth(_this2.month - 1, true);
              } else if (key === 40 || key === 37) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setMonth(_this2.month + 1, true);
              } else if (key === 13 || key === 20) {
                _this2.view = 'month';
              }
            }
          }
        }, [h('span', {
          attrs: {
            tabindex: -1
          },
          on: this.disable ? {} : {
            click: function click() {
              _this2.view = 'month';
            }
          }
        }, [this.monthString])]), h('span', {
          staticClass: 'q-datetime-link col-auto col-md-12',
          'class': {
            active: this.view === 'day'
          },
          attrs: {
            tabindex: 0
          },
          on: {
            keydown: function keydown(e) {
              var key = Object(utils_event["b" /* getEventKey */])(e);

              if (key === 37 || key === 38) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setDay(_this2.day - (key === 37 ? 1 : 7), true);
              } else if (key === 39 || key === 40) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setDay(_this2.day + (key === 39 ? 1 : 7), true);
              } else if (key === 13 || key === 20) {
                _this2.view = 'day';
              }
            }
          }
        }, [h('span', {
          attrs: {
            tabindex: -1
          },
          on: this.disable ? {} : {
            click: function click() {
              _this2.view = 'day';
            }
          }
        }, [this.day])]), h('span', {
          staticClass: 'q-datetime-link small col-auto col-md-12',
          'class': {
            active: this.view === 'year'
          },
          attrs: {
            tabindex: 0
          },
          on: {
            keydown: function keydown(e) {
              var key = Object(utils_event["b" /* getEventKey */])(e);

              if (key === 38 || key === 39) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setYear(_this2.year - 1, true);
              } else if (key === 40 || key === 37) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setYear(_this2.year + 1, true);
              } else if (key === 13 || key === 20) {
                _this2.view = 'year';
              }
            }
          }
        }, [h('span', {
          attrs: {
            tabindex: -1
          },
          on: this.disable ? {} : {
            click: function click() {
              _this2.view = 'year';
            }
          }
        }, [this.year])])])];
        child.push(h('div', content));
      }

      if (this.typeHasTime) {
        var ampm = !this.computedFormat24h && h('span', {
          staticClass: 'q-datetime-ampm column',
          attrs: {
            tabindex: 0
          },
          on: this.__amPmEvents
        }, [h('span', {
          staticClass: 'q-datetime-link',
          'class': {
            active: this.am
          }
        }, [h('span', {
          attrs: {
            tabindex: -1
          },
          on: {
            click: this.toggleAmPm
          }
        }, ['AM'])]), h('span', {
          staticClass: 'q-datetime-link',
          'class': {
            active: !this.am
          }
        }, [h('span', {
          attrs: {
            tabindex: -1
          },
          on: {
            click: this.toggleAmPm
          }
        }, ['PM'])])]);
        var _content = [h('span', {
          staticClass: 'col-auto',
          style: {
            textAlign: 'right'
          }
        }, [h('span', {
          staticClass: 'q-datetime-link',
          style: {
            textAlign: 'right'
          },
          'class': {
            active: this.view === 'hour'
          },
          attrs: {
            tabindex: 0
          },
          on: {
            keydown: function keydown(e) {
              var key = Object(utils_event["b" /* getEventKey */])(e);

              if (key === 40 || key === 37) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setHour(_this2.hour - 1, true);
              } else if (key === 38 || key === 39) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setHour(_this2.hour + 1, true);
              } else if (key === 13 || key === 20) {
                _this2.view = 'hour';
              }
            }
          }
        }, [h('span', {
          attrs: {
            tabindex: -1
          },
          on: this.disable ? {} : {
            click: function click() {
              _this2.view = 'hour';
            }
          }
        }, [this.computedFormat24h ? this.__pad(this.hour) : this.hour])])]), h('span', {
          style: 'opacity:0.6;'
        }, [':']), h('span', {
          staticClass: 'col-auto row no-wrap items-center',
          style: {
            textAlign: 'left'
          }
        }, [h('span', {
          staticClass: 'q-datetime-link',
          style: {
            textAlign: 'left'
          },
          'class': {
            active: this.view === 'minute'
          },
          attrs: {
            tabindex: 0
          },
          on: {
            keydown: function keydown(e) {
              var key = Object(utils_event["b" /* getEventKey */])(e);

              if (key === 40 || key === 37) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setMinute(_this2.minute - 1, true);
              } else if (key === 38 || key === 39) {
                Object(utils_event["h" /* stopAndPrevent */])(e);

                _this2.setMinute(_this2.minute + 1, true);
              } else if (key === 13 || key === 20) {
                _this2.view = 'minute';
              }
            }
          }
        }, [h('span', {
          attrs: {
            tabindex: -1
          },
          on: this.disable ? {} : {
            click: function click() {
              _this2.view = 'minute';
            }
          }
        }, [this.__pad(this.minute)])]), ampm])];
        child.push(h('div', {
          staticClass: 'q-datetime-time row scroll flex-center'
        }, [h('div', {
          staticClass: 'q-datetime-clockstring col row justify-center items-start'
        }, _content)]));
      }

      child.push(h('div', {
        staticClass: 'col'
      }));
      return h('div', {
        staticClass: 'q-datetime-header column no-wrap items-center'
      }, child);
    },
    __getYearView: function __getYearView(h) {
      var _this3 = this;

      var content = [h('div', {
        staticClass: 'col-grow'
      })];

      var _loop = function _loop(i) {
        content.push(h(QBtn["a" /* default */], {
          staticClass: 'q-datetime-btn no-border-radius',
          'class': {
            active: i === _this3.year
          },
          attrs: {
            tabindex: -1
          },
          props: {
            flat: true,
            disable: !_this3.editable
          },
          on: {
            click: function click() {
              _this3.setYear(i);
            }
          }
        }, [i]));
      };

      for (var i = this.yearInterval.min; i <= this.yearInterval.max; i++) {
        _loop(i);
      }

      content.push(h('div', {
        staticClass: 'col-grow'
      }));
      return h('div', {
        staticClass: "q-datetime-view-year fit column no-wrap"
      }, content);
    },
    __getMonthView: function __getMonthView(h) {
      var _this4 = this;

      var content = [h('div', {
        staticClass: 'col-grow'
      })];

      var _loop2 = function _loop2(i) {
        content.push(h(QBtn["a" /* default */], {
          staticClass: 'q-datetime-btn no-border-radius',
          'class': {
            active: i + 1 === _this4.month
          },
          attrs: {
            tabindex: -1
          },
          props: {
            flat: true,
            disable: !_this4.editable
          },
          on: {
            click: function click() {
              _this4.setMonth(i + 1);
            }
          }
        }, [_this4.$q.i18n.date.months[i]]));
      };

      for (var i = this.monthInterval.min; i <= this.monthInterval.max; i++) {
        _loop2(i);
      }

      content.push(h('div', {
        staticClass: 'col-grow'
      }));
      return h('div', {
        staticClass: "q-datetime-view-month fit column no-wrap"
      }, content);
    },
    __getDayView: function __getDayView(h) {
      var _this5 = this;

      var days = [],
          day = this.fakeMonth === this.month && this.fakeYear === this.year ? this.day : -1;

      for (var i = 1; i <= this.fillerDays; i++) {
        days.push(h('div', {
          staticClass: 'q-datetime-fillerday'
        }));
      }

      if (this.min) {
        for (var _i = 1; _i <= this.beforeMinDays; _i++) {
          days.push(h('div', {
            staticClass: 'row items-center content-center justify-center disabled',
            'class': {
              'q-datetime-day-active': this.isValid && _i === day
            }
          }, [h('span', [_i])]));
        }
      }

      var _this$dateInterval = this.dateInterval,
          min = _this$dateInterval.min,
          max = _this$dateInterval.max;

      var _loop3 = function _loop3(_i2) {
        days.push(h('div', {
          staticClass: 'row items-center content-center justify-center cursor-pointer',
          'class': [_this5.color && _i2 === day ? "text-".concat(_this5.color) : null, {
            'q-datetime-day-active': _this5.isValid && _i2 === day,
            'q-datetime-day-today': _i2 === _this5.today,
            'disabled': !_this5.editable
          }],
          on: {
            click: function click() {
              _this5.setDay(_i2, false, _this5.fakeYear, _this5.fakeMonth);
            }
          }
        }, [h('span', [_i2])]));
      };

      for (var _i2 = min; _i2 <= max; _i2++) {
        _loop3(_i2);
      }

      if (this.max) {
        for (var _i3 = 1; _i3 <= this.afterMaxDays; _i3++) {
          days.push(h('div', {
            staticClass: 'row items-center content-center justify-center disabled',
            'class': {
              'q-datetime-day-active': this.isValid && _i3 + this.maxDay === day
            }
          }, [h('span', [_i3 + this.maxDay])]));
        }
      }

      return h('div', {
        staticClass: 'q-datetime-view-day'
      }, [h('div', {
        staticClass: 'row items-center content-center'
      }, [h(QBtn["a" /* default */], {
        staticClass: 'q-datetime-arrow',
        attrs: {
          tabindex: -1
        },
        props: {
          round: true,
          dense: true,
          flat: true,
          icon: this.dateArrow[0],
          repeatTimeout: this.__repeatTimeout,
          disable: this.beforeMinDays > 0 || this.disable || this.readonly
        },
        on: {
          click: function click() {
            _this5.moveFakeMonth(-1);
          }
        }
      }), h('div', {
        staticClass: 'col q-datetime-month-stamp'
      }, [this.monthStamp]), h(QBtn["a" /* default */], {
        staticClass: 'q-datetime-arrow',
        attrs: {
          tabindex: -1
        },
        props: {
          round: true,
          dense: true,
          flat: true,
          icon: this.dateArrow[1],
          repeatTimeout: this.__repeatTimeout,
          disable: this.afterMaxDays > 0 || this.disable || this.readonly
        },
        on: {
          click: function click() {
            _this5.moveFakeMonth(1);
          }
        }
      })]), h('div', {
        staticClass: 'q-datetime-weekdays row no-wrap items-center justify-start'
      }, this.headerDayNames.map(function (day) {
        return h('div', [day]);
      })), h('div', {
        staticClass: 'q-datetime-days row wrap items-center justify-start content-center'
      }, days)]);
    },
    __getClockView: function __getClockView(h) {
      var _this6 = this;

      var content = [];

      if (this.view === 'hour') {
        var init,
            max,
            cls = '';

        if (this.computedFormat24h) {
          init = 0;
          max = 24;
          cls = ' fmt24';
        } else {
          init = 1;
          max = 13;
        }

        var _loop4 = function _loop4(i) {
          content.push(h('div', {
            staticClass: "q-datetime-clock-position".concat(cls),
            'class': ["q-datetime-clock-pos-".concat(i), i === _this6.hour ? 'active' : ''],
            on: {
              '!mousedown': function mousedown(ev) {
                return _this6.__dragStart(ev, i);
              },
              '!mouseup': function mouseup(ev) {
                return _this6.__dragStop(ev, i);
              }
            }
          }, [h('span', [i || '00'])]));
        };

        for (var i = init; i < max; i++) {
          _loop4(i);
        }
      } else {
        for (var i = 0; i < 12; i++) {
          var five = i * 5;
          content.push(h('div', {
            staticClass: 'q-datetime-clock-position',
            'class': ["q-datetime-clock-pos-".concat(i), five === this.minute ? 'active' : '']
          }, [h('span', [five])]));
        }
      }

      return h('div', {
        ref: 'clock',
        key: 'clock' + this.view,
        staticClass: 'column items-center content-center justify-center'
      }, [h('div', {
        staticClass: 'q-datetime-clock cursor-pointer',
        on: {
          mousedown: this.__dragStart,
          mousemove: this.__dragMove,
          mouseup: this.__dragStop,
          touchstart: this.__dragStart,
          touchmove: this.__dragMove,
          touchend: this.__dragStop
        }
      }, [h('div', {
        staticClass: 'q-datetime-clock-circle full-width full-height'
      }, [h('div', {
        staticClass: 'q-datetime-clock-center'
      }), h('div', {
        staticClass: 'q-datetime-clock-pointer',
        style: this.clockPointerStyle
      }, [h('span')]), content])])]);
    },
    __getViewSection: function __getViewSection(h) {
      switch (this.view) {
        case 'year':
          return this.__getYearView(h);

        case 'month':
          return this.__getMonthView(h);

        case 'day':
          return this.__getDayView(h);

        case 'hour':
        case 'minute':
          return this.__getClockView(h);
      }
    }
  },
  created: function created() {
    var _this7 = this;

    this.__amPmEvents = {
      keydown: function keydown(e) {
        var key = Object(utils_event["b" /* getEventKey */])(e);

        if ([13, 32, 37, 38, 39, 40].includes(key)) {
          Object(utils_event["h" /* stopAndPrevent */])(e);

          _this7.toggleAmPm();
        }
      }
    };
  },
  mounted: function mounted() {
    this.__scrollView(true);
  },
  render: function render(h) {
    if (!this.canRender) {
      return;
    }

    return h('div', {
      staticClass: 'q-datetime row',
      'class': this.classes
    }, [!this.minimal && this.__getTopSection(h) || void 0, h('div', {
      staticClass: 'q-datetime-content scroll'
    }, [h('div', {
      ref: 'selector',
      staticClass: 'q-datetime-selector row items-center'
    }, [h('div', {
      'class': 'col'
    }), this.__getViewSection(h), h('div', {
      'class': 'col'
    })])].concat(this.$slots.default))]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/datetime/QDatetime.js













var QDatetime_contentCss =  false ? undefined : {
  maxWidth: '95vw',
  maxHeight: '98vh'
};
/* harmony default export */ var QDatetime = ({
  name: 'QDatetime',
  mixins: [input_frame["a" /* default */], display_mode, can_render["a" /* default */]],
  props: Object.assign({}, datetime_props_input, datetime_props_inline),
  watch: {
    value: function value(v) {
      if (!this.disable && this.isPopover) {
        this.model = date_clone(v);
      }
    }
  },
  data: function data() {
    return {
      transition: null,
      model: null,
      focused: false
    };
  },
  created: function created() {
    this.model = date_clone(this.computedValue);

    if (!this.isPopover) {
      this.transition =  false ? undefined : 'q-modal';
    }
  },
  computed: {
    computedFormat: function computedFormat() {
      if (this.format) {
        return this.format;
      }

      if (this.type === 'date') {
        return 'YYYY/MM/DD';
      }

      return this.type === 'time' ? 'HH:mm' : 'YYYY/MM/DD HH:mm:ss';
    },
    actualValue: function actualValue() {
      if (this.displayValue) {
        return this.displayValue;
      }

      if (!date_isValid(this.value) || !this.canRender) {
        return '';
      }

      return formatDate(this.value, this.computedFormat, this.$q.i18n.date);
    },
    computedValue: function computedValue() {
      if (date_isValid(this.value)) {
        return this.value;
      }

      if (false) {}

      return this.defaultValue;
    },
    computedClearValue: function computedClearValue() {
      return this.clearValue === void 0 ? this.defaultValue : this.clearValue;
    },
    isClearable: function isClearable() {
      return this.editable && this.clearable && !isSameDate(this.computedClearValue, this.value);
    },
    modalBtnColor: function modalBtnColor() {
      return  true ? this.color : undefined;
    }
  },
  methods: {
    toggle: function toggle() {
      this.$refs.popup && this[this.$refs.popup.showing ? 'hide' : 'show']();
    },
    show: function show() {
      if (!this.disable) {
        this.__setModel(this.computedValue);

        return this.$refs.popup.show();
      }
    },
    hide: function hide() {
      return this.$refs.popup ? this.$refs.popup.hide() : Promise.resolve();
    },
    __handleKeyDown: function __handleKeyDown(e) {
      switch (Object(utils_event["b" /* getEventKey */])(e)) {
        case 13:
        case 32:
          Object(utils_event["h" /* stopAndPrevent */])(e);
          return this.show();

        case 8:
          if (this.isClearable) {
            this.clear();
          }

      }
    },
    __onFocus: function __onFocus() {
      if (this.disable || this.focused) {
        return;
      }

      if (true) {
        var target = this.$refs.target;
        target && target.setView(this.defaultView, true);
      }

      this.model = date_clone(this.computedValue);
      this.focused = true;
      this.$emit('focus');
    },
    __onBlur: function __onBlur(e) {
      var _this = this;

      if (!this.focused) {
        return;
      }

      setTimeout(function () {
        var el = document.activeElement;

        if (!_this.$refs.popup || !_this.$refs.popup.showing || el !== document.body && !_this.$refs.popup.$el.contains(el)) {
          _this.__onHide();

          _this.hide();
        }
      }, 1);
    },
    __onHide: function __onHide(forceUpdate, keepFocus) {
      if (forceUpdate || this.isPopover) {
        this.__update(forceUpdate);
      }

      if (!this.focused) {
        return;
      }

      if (keepFocus) {
        this.$el.focus();
        return;
      }

      this.$emit('blur');
      this.focused = false;
    },
    __setModel: function __setModel(val, forceUpdate) {
      this.model = date_clone(val);

      if (forceUpdate || this.isPopover) {
        this.__update(forceUpdate);
      }
    },
    __update: function __update(change) {
      var _this2 = this;

      this.$nextTick(function () {
        if (!isSameDate(_this2.model, _this2.value)) {
          _this2.$emit('input', _this2.model);

          if (change) {
            _this2.$emit('change', _this2.model);
          }
        }
      });
    },
    __scrollView: function __scrollView() {
      if (true) {
        var target = this.$refs.target;
        target && target.__scrollView();
      }
    },
    __getPicker: function __getPicker(h, modal) {
      var _this3 = this;

      return [h(QDatetimePicker_mat, {
        ref: 'target',
        staticClass: 'no-border',
        'class': {
          'datetime-ios-modal':  false && false
        },
        props: {
          type: this.type,
          min: this.min,
          max: this.max,
          headerLabel: this.headerLabel,
          minimal: this.minimal,
          formatModel: this.formatModel,
          format24h: this.format24h,
          firstDayOfWeek: this.firstDayOfWeek,
          defaultView: this.defaultView,
          color: this.invertedLight ? 'grey-7' : this.color,
          dark: this.dark,
          value: this.model,
          disable: this.disable,
          readonly: this.readonly,
          noParentField: true
        },
        on: {
          input: function input(v) {
            return _this3.$nextTick(function () {
              return _this3.__setModel(v);
            });
          },
          canClose: function canClose() {
            if (_this3.isPopover) {
              _this3.hide();
            }
          }
        }
      }, [modal ? h('div', {
        staticClass: 'modal-buttons modal-buttons-top row full-width'
      }, [h('div', {
        staticClass: 'col'
      }), h(QBtn["a" /* default */], {
        props: {
          color: this.modalBtnColor,
          flat: true,
          label: this.cancelLabel || this.$q.i18n.label.cancel,
          noRipple: true
        },
        on: {
          click: function click() {
            _this3.__onHide(false, true);

            _this3.hide();
          }
        }
      }), this.editable ? h(QBtn["a" /* default */], {
        props: {
          color: this.modalBtnColor,
          flat: true,
          label: this.okLabel || this.$q.i18n.label.set,
          noRipple: true,
          disable: !this.model
        },
        on: {
          click: function click() {
            _this3.__onHide(true, true);

            _this3.hide();
          }
        }
      }) : null]) : null])];
    }
  },
  render: function render(h) {
    var _this4 = this;

    return h(QInputFrame["a" /* default */], {
      staticClass: 'q-datetime-input',
      props: {
        prefix: this.prefix,
        suffix: this.suffix,
        stackLabel: this.stackLabel,
        floatLabel: this.floatLabel,
        error: this.error,
        warning: this.warning,
        disable: this.disable,
        readonly: this.readonly,
        inverted: this.inverted,
        invertedLight: this.invertedLight,
        dark: this.dark,
        hideUnderline: this.hideUnderline,
        before: this.before,
        after: this.after,
        color: this.color,
        noParentField: this.noParentField,
        focused: this.focused || this.$refs.popup && this.$refs.popup.showing,
        focusable: true,
        length: this.actualValue.length
      },
      nativeOn: {
        click: this.toggle,
        focus: this.__onFocus,
        blur: this.__onBlur,
        keydown: this.__handleKeyDown
      }
    }, [h('div', {
      staticClass: 'col q-input-target ellipsis',
      'class': this.fakeInputClasses
    }, [this.fakeInputValue]), this.isPopover ? h(QPopover["a" /* default */], {
      ref: 'popup',
      props: {
        cover: true,
        keepOnScreen: true,
        disable: this.disable,
        anchorClick: false,
        maxHeight: '100vh'
      },
      slot: 'after',
      on: {
        show: function show(ev) {
          _this4.__onFocus(ev);

          _this4.__scrollView();
        },
        hide: function hide() {
          return _this4.__onHide(true, true);
        }
      }
    }, this.__getPicker(h)) : h(QModal, {
      ref: 'popup',
      staticClass: 'with-backdrop q-datetime-modal',
      props: {
        contentCss: QDatetime_contentCss,
        minimized: "mat" === 'mat',
        position:  false ? undefined : null,
        transition: this.transition
      },
      on: {
        show: this.__scrollView,
        dismiss: function dismiss() {
          return _this4.__onHide(false, true);
        }
      }
    }, this.__getPicker(h, true)), this.isClearable ? h(QIcon["a" /* default */], {
      slot: 'after',
      props: {
        name: this.$q.icon.input["clear".concat(this.isInverted ? 'Inverted' : '')]
      },
      nativeOn: {
        click: this.clear
      },
      staticClass: 'q-if-control'
    }) : null, h(QIcon["a" /* default */], {
      slot: 'after',
      props: {
        name: this.$q.icon.input.dropdown
      },
      staticClass: 'q-if-control'
    })]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/datetime/index.js



// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/input/QInput.js + 1 modules
var QInput = __webpack_require__("5d8b");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/radio/QRadio.js
var QRadio = __webpack_require__("dd1f");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/toggle/QToggle.js
var QToggle = __webpack_require__("bc9b");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/option-group/QOptionGroup.js






var components = {
  radio: QRadio["a" /* default */],
  checkbox: QCheckbox["a" /* default */],
  toggle: QToggle["a" /* default */]
};
/* harmony default export */ var QOptionGroup = ({
  name: 'QOptionGroup',
  mixins: [parent_field["a" /* default */]],
  props: {
    value: {
      required: true
    },
    type: {
      default: 'radio',
      validator: function validator(v) {
        return ['radio', 'checkbox', 'toggle'].includes(v);
      }
    },
    color: String,
    keepColor: Boolean,
    dark: Boolean,
    options: {
      type: Array,
      validator: function validator(opts) {
        return opts.every(function (opt) {
          return 'value' in opt && 'label' in opt;
        });
      }
    },
    leftLabel: Boolean,
    inline: Boolean,
    disable: Boolean,
    readonly: Boolean
  },
  computed: {
    component: function component() {
      return components[this.type];
    },
    model: function model() {
      return Array.isArray(this.value) ? this.value.slice() : this.value;
    },
    length: function length() {
      return this.value ? this.type === 'radio' ? 1 : this.value.length : 0;
    },
    __needsBorder: function __needsBorder() {
      return true;
    }
  },
  methods: {
    __onFocus: function __onFocus() {
      this.$emit('focus');
    },
    __onBlur: function __onBlur() {
      this.$emit('blur');
    },
    __update: function __update(value) {
      var _this = this;

      this.$emit('input', value);
      this.$nextTick(function () {
        if (JSON.stringify(value) !== JSON.stringify(_this.value)) {
          _this.$emit('change', value);
        }
      });
    }
  },
  created: function created() {
    var isArray = Array.isArray(this.value);

    if (this.type === 'radio') {
      if (isArray) {
        console.error('q-option-group: model should not be array');
      }
    } else if (!isArray) {
      console.error('q-option-group: model should be array in your case');
    }
  },
  render: function render(h) {
    var _this2 = this;

    return h('div', {
      staticClass: 'q-option-group group',
      'class': {
        'q-option-group-inline-opts': this.inline
      }
    }, this.options.map(function (opt) {
      return h('div', [h(_this2.component, {
        props: {
          value: _this2.value,
          val: opt.value,
          readonly: _this2.readonly || opt.readonly,
          disable: _this2.disable || opt.disable,
          label: opt.label,
          leftLabel: _this2.leftLabel || opt.leftLabel,
          color: opt.color || _this2.color,
          checkedIcon: opt.checkedIcon,
          uncheckedIcon: opt.uncheckedIcon,
          dark: opt.dark || _this2.dark,
          keepColor: opt.keepColor || _this2.keepColor
        },
        on: {
          input: _this2.__update,
          focus: _this2.__onFocus,
          blur: _this2.__onBlur
        }
      })]);
    }));
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/dialog/QDialog.js







/* harmony default export */ var QDialog = ({
  name: 'QDialog',
  props: {
    value: Boolean,
    title: String,
    message: String,
    prompt: Object,
    options: Object,
    ok: {
      type: [String, Object, Boolean],
      default: true
    },
    cancel: [String, Object, Boolean],
    stackButtons: Boolean,
    preventClose: Boolean,
    noBackdropDismiss: Boolean,
    noEscDismiss: Boolean,
    noRefocus: Boolean,
    position: String,
    color: {
      type: String,
      default: 'primary'
    }
  },
  render: function render(h) {
    var _this = this;

    var child = [],
        title = this.$slots.title || this.title,
        msg = this.$slots.message || this.message;

    if (title) {
      child.push(h('div', {
        staticClass: 'modal-header'
      }, [title]));
    }

    if (msg) {
      child.push(h('div', {
        staticClass: 'modal-body modal-message modal-scroll'
      }, [msg]));
    }

    if (this.hasForm || this.$slots.body) {
      child.push(h('div', {
        staticClass: 'modal-body modal-scroll'
      }, this.hasForm ? this.prompt ? this.__getPrompt(h) : this.__getOptions(h) : [this.$slots.body]));
    }

    if (this.$scopedSlots.buttons) {
      child.push(h('div', {
        staticClass: 'modal-buttons',
        'class': this.buttonClass
      }, [this.$scopedSlots.buttons({
        ok: this.__onOk,
        cancel: this.__onCancel
      })]));
    } else if (this.ok || this.cancel) {
      child.push(this.__getButtons(h));
    }

    return h(QModal, {
      ref: 'modal',
      props: {
        value: this.value,
        minimized: true,
        noBackdropDismiss: this.noBackdropDismiss || this.preventClose,
        noEscDismiss: this.noEscDismiss || this.preventClose,
        noRefocus: this.noRefocus,
        position: this.position
      },
      on: {
        input: function input(val) {
          _this.$emit('input', val);
        },
        show: function show() {
          if (!_this.$q.platform.is.desktop) {
            _this.$emit('show');

            return;
          }

          var node;

          if (_this.prompt || _this.options) {
            node = _this.prompt ? _this.$refs.modal.$el.getElementsByTagName('INPUT') : _this.$refs.modal.$el.getElementsByClassName('q-option');

            if (node.length) {
              node[0].focus();

              _this.$emit('show');

              return;
            }
          }

          node = _this.$refs.modal.$el.getElementsByClassName('q-btn');

          if (node.length) {
            node[node.length - 1].focus();
          }

          _this.$emit('show');
        },
        hide: function hide() {
          _this.$emit('hide');
        },
        dismiss: function dismiss() {
          _this.$emit('cancel');
        },
        'escape-key': function escapeKey() {
          _this.$emit('escape-key');
        }
      }
    }, child);
  },
  computed: {
    hasForm: function hasForm() {
      return this.prompt || this.options;
    },
    okLabel: function okLabel() {
      return this.ok === true ? this.$q.i18n.label.ok : this.ok;
    },
    cancelLabel: function cancelLabel() {
      return this.cancel === true ? this.$q.i18n.label.cancel : this.cancel;
    },
    buttonClass: function buttonClass() {
      return this.stackButtons ? 'column' : 'row';
    },
    okProps: function okProps() {
      return Object(this.ok) === this.ok ? Object.assign({
        color: this.color,
        label: this.$q.i18n.label.ok,
        noRipple: true
      }, this.ok) : {
        color: this.color,
        flat: true,
        label: this.okLabel,
        noRipple: true
      };
    },
    cancelProps: function cancelProps() {
      return Object(this.cancel) === this.cancel ? Object.assign({
        color: this.color,
        label: this.$q.i18n.label.cancel,
        noRipple: true
      }, this.cancel) : {
        color: this.color,
        flat: true,
        label: this.cancelLabel,
        noRipple: true
      };
    }
  },
  methods: {
    show: function show() {
      return this.$refs.modal.show();
    },
    hide: function hide() {
      var _this2 = this;

      return this.$refs.modal ? this.$refs.modal.hide().then(function () {
        return _this2.hasForm ? Object(clone["a" /* default */])(_this2.__getData()) : void 0;
      }) : Promise.resolve();
    },
    __getPrompt: function __getPrompt(h) {
      var _this3 = this;

      return [h(QInput["a" /* default */], {
        style: 'margin-bottom: 10px',
        props: {
          value: this.prompt.model,
          type: this.prompt.type || 'text',
          color: this.color,
          noPassToggle: true
        },
        on: {
          input: function input(v) {
            _this3.prompt.model = v;
          },
          keyup: function keyup(evt) {
            if (Object(utils_event["b" /* getEventKey */])(evt) === 13) {
              _this3.__onOk();
            }
          }
        }
      })];
    },
    __getOptions: function __getOptions(h) {
      var _this4 = this;

      return [h(QOptionGroup, {
        props: {
          value: this.options.model,
          type: this.options.type,
          color: this.color,
          inline: this.options.inline,
          options: this.options.items
        },
        on: {
          change: function change(v) {
            _this4.options.model = v;
          }
        }
      })];
    },
    __getButtons: function __getButtons(h) {
      var child = [];

      if (this.cancel) {
        child.push(h(QBtn["a" /* default */], {
          props: this.cancelProps,
          on: {
            click: this.__onCancel
          }
        }));
      }

      if (this.ok) {
        child.push(h(QBtn["a" /* default */], {
          props: this.okProps,
          on: {
            click: this.__onOk
          }
        }));
      }

      return h('div', {
        staticClass: 'modal-buttons',
        'class': this.buttonClass
      }, child);
    },
    __onOk: function __onOk() {
      var _this5 = this;

      return this.hide().then(function (data) {
        _this5.$emit('ok', data);
      });
    },
    __onCancel: function __onCancel() {
      var _this6 = this;

      return this.hide().then(function () {
        _this6.$emit('cancel');
      });
    },
    __getData: function __getData() {
      if (this.prompt) {
        return this.prompt.model;
      }

      if (this.options) {
        return this.options.model;
      }
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/dialog/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.bold.js
var es6_string_bold = __webpack_require__("48c0");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.anchor.js
var es6_string_anchor = __webpack_require__("8449");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/debounce.js
/* harmony default export */ var debounce = (function (fn) {
  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
  var immediate = arguments.length > 2 ? arguments[2] : undefined;
  var timeout;

  function debounced() {
    var _this = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var later = function later() {
      timeout = null;

      if (!immediate) {
        fn.apply(_this, args);
      }
    };

    clearTimeout(timeout);

    if (immediate && !timeout) {
      fn.apply(this, args);
    }

    timeout = setTimeout(later, wait);
  }

  debounced.cancel = function () {
    clearTimeout(timeout);
  };

  return debounced;
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/scroll.js
var utils_scroll = __webpack_require__("1528");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/popup.js
var popup = __webpack_require__("ea22");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tooltip/QTooltip.js








/* harmony default export */ var QTooltip = ({
  name: 'QTooltip',
  mixins: [model_toggle["a" /* default */], can_render["a" /* default */]],
  props: {
    anchor: {
      type: String,
      default: 'top middle',
      validator: popup["c" /* positionValidator */]
    },
    self: {
      type: String,
      default: 'bottom middle',
      validator: popup["c" /* positionValidator */]
    },
    offset: {
      type: Array,
      validator: popup["a" /* offsetValidator */]
    },
    delay: {
      type: Number,
      default: 0
    },
    maxHeight: String,
    disable: Boolean
  },
  watch: {
    $route: function $route() {
      this.hide();
    }
  },
  computed: {
    anchorOrigin: function anchorOrigin() {
      return Object(popup["b" /* parsePosition */])(this.anchor);
    },
    selfOrigin: function selfOrigin() {
      return Object(popup["b" /* parsePosition */])(this.self);
    }
  },
  methods: {
    __show: function __show() {
      clearTimeout(this.timer);
      document.body.appendChild(this.$el);
      this.scrollTarget = Object(utils_scroll["d" /* getScrollTarget */])(this.anchorEl);
      this.scrollTarget.addEventListener('scroll', this.hide, utils_event["f" /* listenOpts */].passive);
      window.addEventListener('resize', this.__debouncedUpdatePosition, utils_event["f" /* listenOpts */].passive);

      if (this.$q.platform.is.mobile) {
        document.body.addEventListener('click', this.hide, true);
      }

      this.__updatePosition();

      this.showPromise && this.showPromiseResolve();
    },
    __hide: function __hide() {
      this.__cleanup();

      this.hidePromise && this.hidePromiseResolve();
    },
    __cleanup: function __cleanup() {
      clearTimeout(this.timer);
      this.scrollTarget.removeEventListener('scroll', this.hide, utils_event["f" /* listenOpts */].passive);
      window.removeEventListener('resize', this.__debouncedUpdatePosition, utils_event["f" /* listenOpts */].passive);
      this.$el.remove();

      if (this.$q.platform.is.mobile) {
        document.body.removeEventListener('click', this.hide, true);
      }
    },
    __updatePosition: function __updatePosition() {
      Object(popup["d" /* setPosition */])({
        el: this.$el,
        animate: true,
        offset: this.offset,
        anchorEl: this.anchorEl,
        anchorOrigin: this.anchorOrigin,
        selfOrigin: this.selfOrigin,
        maxHeight: this.maxHeight
      });
    },
    __delayShow: function __delayShow() {
      clearTimeout(this.timer);
      this.timer = setTimeout(this.show, this.delay);
    },
    __delayHide: function __delayHide() {
      clearTimeout(this.timer);
      this.hide();
    }
  },
  render: function render(h) {
    if (!this.canRender) {
      return;
    }

    return h('div', {
      staticClass: 'q-tooltip animate-popup'
    }, [h('div', this.$slots.default)]);
  },
  beforeMount: function beforeMount() {
    var _this = this;

    this.__debouncedUpdatePosition = debounce(function () {
      _this.__updatePosition();
    }, 70);
  },
  mounted: function mounted() {
    var _this2 = this;

    this.$nextTick(function () {
      _this2.$el.offsetHeight;
      _this2.anchorEl = _this2.$el.parentNode;

      _this2.anchorEl.removeChild(_this2.$el);

      if (_this2.anchorEl.classList.contains('q-btn-inner') || _this2.anchorEl.classList.contains('q-if-inner') || _this2.anchorEl.classList.contains('no-pointer-events')) {
        _this2.anchorEl = _this2.anchorEl.parentNode;
      }

      if (_this2.$q.platform.is.mobile) {
        _this2.anchorEl.addEventListener('click', _this2.show);
      } else {
        _this2.anchorEl.addEventListener('mouseenter', _this2.__delayShow);

        _this2.anchorEl.addEventListener('focus', _this2.__delayShow);

        _this2.anchorEl.addEventListener('mouseleave', _this2.__delayHide);

        _this2.anchorEl.addEventListener('blur', _this2.__delayHide);
      }

      _this2.value && _this2.show();
    });
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.timer);
    this.showing && this.__cleanup();

    if (!this.anchorEl) {
      return;
    }

    if (this.$q.platform.is.mobile) {
      this.anchorEl.removeEventListener('click', this.show);
    } else {
      this.anchorEl.removeEventListener('mouseenter', this.__delayShow);
      this.anchorEl.removeEventListener('focus', this.__delayShow);
      this.anchorEl.removeEventListener('mouseleave', this.__delayHide);
      this.anchorEl.removeEventListener('blur', this.__delayHide);
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/editor/editor-utils.js














function run(e, btn, vm) {
  if (btn.handler) {
    btn.handler(e, vm, vm.caret);
  } else {
    vm.runCmd(btn.cmd, btn.param);
  }
}

function getBtn(h, vm, btn, clickHandler) {
  var active = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var toggled = active || (btn.type === 'toggle' ? btn.toggled ? btn.toggled(vm) : btn.cmd && vm.caret.is(btn.cmd, btn.param) : false),
      child = [],
      events = {
    click: function click(e) {
      clickHandler && clickHandler();
      run(e, btn, vm);
    }
  };

  if (btn.tip && vm.$q.platform.is.desktop) {
    var Key = btn.key ? h('div', [h('small', "(CTRL + ".concat(String.fromCharCode(btn.key), ")"))]) : null;
    child.push(h(QTooltip, {
      props: {
        delay: 1000
      }
    }, [h('div', {
      domProps: {
        innerHTML: btn.tip
      }
    }), Key]));
  }

  return h(QBtn["a" /* default */], {
    props: Object.assign({}, vm.buttonProps, {
      icon: btn.icon,
      color: toggled ? btn.toggleColor || vm.toolbarToggleColor : btn.color || vm.toolbarColor,
      textColor: toggled && (vm.toolbarFlat || vm.toolbarOutline) ? null : btn.textColor || vm.toolbarTextColor,
      label: btn.label,
      disable: btn.disable ? typeof btn.disable === 'function' ? btn.disable(vm) : true : false
    }),
    on: events
  }, child);
}

function getDropdown(h, vm, btn) {
  var label = btn.label,
      icon = btn.icon,
      noIcons = btn.list === 'no-icons',
      onlyIcons = btn.list === 'only-icons',
      contentClass,
      Items;

  function closeDropdown() {
    Dropdown.componentInstance.hide();
  }

  if (onlyIcons) {
    Items = btn.options.map(function (btn) {
      var active = btn.type === void 0 ? vm.caret.is(btn.cmd, btn.param) : false;

      if (active) {
        label = btn.tip;
        icon = btn.icon;
      }

      return getBtn(h, vm, btn, closeDropdown, active);
    });
    contentClass = vm.toolbarBackgroundClass;
    Items = [h(QBtnGroup, {
      props: vm.buttonProps,
      staticClass: 'relative-position q-editor-toolbar-padding',
      style: {
        borderRadius: '0'
      }
    }, Items)];
  } else {
    Items = btn.options.map(function (btn) {
      var disable = btn.disable ? btn.disable(vm) : false;
      var active = btn.type === void 0 ? vm.caret.is(btn.cmd, btn.param) : false;

      if (active) {
        label = btn.tip;
        icon = btn.icon;
      }

      var htmlTip = btn.htmlTip;
      return h(QItem["a" /* default */], {
        props: {
          active: active,
          link: !disable
        },
        'class': {
          disabled: disable
        },
        nativeOn: {
          click: function click(e) {
            if (disable) {
              return;
            }

            closeDropdown();
            vm.$refs.content && vm.$refs.content.focus();
            vm.caret.restore();
            run(e, btn, vm);
          }
        }
      }, [noIcons ? '' : h(QItemSide["a" /* default */], {
        props: {
          icon: btn.icon
        }
      }), h(QItemMain["a" /* default */], {
        props: !htmlTip && btn.tip ? {
          label: btn.tip
        } : null,
        domProps: htmlTip ? {
          innerHTML: btn.htmlTip
        } : null
      })]);
    });
    contentClass = [vm.toolbarBackgroundClass, vm.toolbarTextColor ? "text-".concat(vm.toolbarTextColor) : ''];
    Items = [h(QList["a" /* default */], {
      props: {
        separator: true
      }
    }, [Items])];
  }

  var highlight = btn.highlight && label !== btn.label;
  var Dropdown = h(QBtnDropdown, {
    props: Object.assign({}, vm.buttonProps, {
      noCaps: true,
      noWrap: true,
      color: highlight ? vm.toolbarToggleColor : vm.toolbarColor,
      textColor: highlight && (vm.toolbarFlat || vm.toolbarOutline) ? null : vm.toolbarTextColor,
      label: btn.fixedLabel ? btn.label : label,
      icon: btn.fixedIcon ? btn.icon : icon,
      contentClass: contentClass
    })
  }, Items);
  return Dropdown;
}

function getToolbar(h, vm) {
  if (vm.caret) {
    return vm.buttons.map(function (group) {
      return h(QBtnGroup, {
        props: vm.buttonProps,
        staticClass: 'items-center relative-position'
      }, group.map(function (btn) {
        if (btn.type === 'slot') {
          return vm.$slots[btn.slot];
        }

        if (btn.type === 'dropdown') {
          return getDropdown(h, vm, btn);
        }

        return getBtn(h, vm, btn);
      }));
    });
  }
}
function getFonts(defaultFont, defaultFontLabel, defaultFontIcon) {
  var fonts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var aliases = Object.keys(fonts);

  if (aliases.length === 0) {
    return {};
  }

  var def = {
    default_font: {
      cmd: 'fontName',
      param: defaultFont,
      icon: defaultFontIcon,
      tip: defaultFontLabel
    }
  };
  aliases.forEach(function (alias) {
    var name = fonts[alias];
    def[alias] = {
      cmd: 'fontName',
      param: name,
      icon: defaultFontIcon,
      tip: name,
      htmlTip: "<font face=\"".concat(name, "\">").concat(name, "</font>")
    };
  });
  return def;
}
function getLinkEditor(h, vm) {
  if (vm.caret) {
    var color = vm.toolbarColor || vm.toolbarTextColor;
    var link = vm.editLinkUrl;

    var updateLink = function updateLink() {
      vm.caret.restore();

      if (link !== vm.editLinkUrl) {
        document.execCommand('createLink', false, link === '' ? ' ' : link);
      }

      vm.editLinkUrl = null;
    };

    return [h('div', {
      staticClass: 'q-mx-xs',
      'class': "text-".concat(color)
    }, ["".concat(vm.$q.i18n.editor.url, ": ")]), h(QInput["a" /* default */], {
      key: 'qedt_btm_input',
      staticClass: 'q-ma-none q-pa-none col q-editor-input',
      props: {
        value: link,
        color: color,
        autofocus: true,
        hideUnderline: true
      },
      on: {
        input: function input(val) {
          link = val;
        },
        keydown: function keydown(event) {
          switch (Object(utils_event["b" /* getEventKey */])(event)) {
            case 13:
              event.preventDefault();
              return updateLink();

            case 27:
              vm.caret.restore();
              !vm.editLinkUrl && document.execCommand('unlink');
              vm.editLinkUrl = null;
              break;
          }
        }
      }
    }), h(QBtnGroup, {
      key: 'qedt_btm_grp',
      props: vm.buttonProps
    }, [h(QBtn["a" /* default */], {
      key: 'qedt_btm_rem',
      attrs: {
        tabindex: -1
      },
      props: Object.assign({}, vm.buttonProps, {
        label: vm.$q.i18n.label.remove,
        noCaps: true
      }),
      on: {
        click: function click() {
          vm.caret.restore();
          document.execCommand('unlink');
          vm.editLinkUrl = null;
        }
      }
    }), h(QBtn["a" /* default */], {
      key: 'qedt_btm_upd',
      props: Object.assign({}, vm.buttonProps, {
        label: vm.$q.i18n.label.update,
        noCaps: true
      }),
      on: {
        click: updateLink
      }
    })])];
  }
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.to-string.js
var es6_regexp_to_string = __webpack_require__("6b54");

// CONCATENATED MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
// CONCATENATED MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/editor/editor-caret.js






function getBlockElement(el, parent) {
  if (parent && el === parent) {
    return null;
  }

  var style = window.getComputedStyle ? window.getComputedStyle(el) : el.currentStyle,
      display = style.display;

  if (display === 'block' || display === 'table') {
    return el;
  }

  return getBlockElement(el.parentNode);
}

function isChildOf(el, parent) {
  if (!el) {
    return false;
  }

  while (el = el.parentNode) {
    if (el === document.body) {
      return false;
    }

    if (el === parent) {
      return true;
    }
  }

  return false;
}

var urlRegex = /^https?:\/\//;
var editor_caret_Caret = function () {
  function Caret(el, vm) {
    _classCallCheck(this, Caret);

    this.el = el;
    this.vm = vm;
  }

  _createClass(Caret, [{
    key: "save",
    value: function save() {
      var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.range;
      this._range = range;
    }
  }, {
    key: "restore",
    value: function restore() {
      var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._range;
      var r = document.createRange(),
          sel = document.getSelection();

      if (range) {
        r.setStart(range.startContainer, range.startOffset);
        r.setEnd(range.endContainer, range.endOffset);
        sel.removeAllRanges();
        sel.addRange(r);
      } else {
        sel.selectAllChildren(this.el);
        sel.collapseToEnd();
      }
    }
  }, {
    key: "hasParent",
    value: function hasParent(name, spanLevel) {
      var el = spanLevel ? this.parent : this.blockParent;
      return el ? el.nodeName.toLowerCase() === name.toLowerCase() : false;
    }
  }, {
    key: "hasParents",
    value: function hasParents(list) {
      var el = this.parent;
      return el ? list.includes(el.nodeName.toLowerCase()) : false;
    }
  }, {
    key: "is",
    value: function is(cmd, param) {
      switch (cmd) {
        case 'formatBlock':
          if (param === 'DIV' && this.parent === this.el) {
            return true;
          }

          return this.hasParent(param, param === 'PRE');

        case 'link':
          return this.hasParent('A', true);

        case 'fontSize':
          return document.queryCommandValue(cmd) === param;

        case 'fontName':
          var res = document.queryCommandValue(cmd);
          return res === "\"".concat(param, "\"") || res === param;

        case 'fullscreen':
          return this.vm.inFullscreen;

        case void 0:
          return false;

        default:
          var state = document.queryCommandState(cmd);
          return param ? state === param : state;
      }
    }
  }, {
    key: "getParentAttribute",
    value: function getParentAttribute(attrib) {
      if (this.parent) {
        return this.parent.getAttribute(attrib);
      }
    }
  }, {
    key: "can",
    value: function can(name) {
      if (name === 'outdent') {
        return this.hasParents(['blockquote', 'li']);
      }

      if (name === 'indent') {
        var parentName = this.parent ? this.parent.nodeName.toLowerCase() : false;

        if (parentName === 'blockquote') {
          return false;
        }

        if (parentName === 'li') {
          var previousEl = this.parent.previousSibling;
          return previousEl && previousEl.nodeName.toLowerCase() === 'li';
        }

        return false;
      }
    }
  }, {
    key: "apply",
    value: function apply(cmd, param) {
      var done = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

      if (cmd === 'formatBlock') {
        if (['BLOCKQUOTE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'PRE'].includes(param) && this.is(cmd, param)) {
          cmd = 'outdent';
          param = null;
        }
      } else if (cmd === 'print') {
        done();
        var win = window.open();
        win.document.write("\n        <!doctype html>\n        <html>\n          <head>\n            <title>Print - ".concat(document.title, "</title>\n          </head>\n          <body>\n            <div>").concat(this.el.innerHTML, "</div>\n          </body>\n        </html>\n      "));
        win.print();
        win.close();
        return;
      } else if (cmd === 'link') {
        var link = this.getParentAttribute('href');

        if (!link) {
          var selection = this.selectWord(this.selection);
          var url = selection ? selection.toString() : '';

          if (!url.length) {
            return;
          }

          this.vm.editLinkUrl = urlRegex.test(url) ? url : '';
          document.execCommand('createLink', false, this.vm.editLinkUrl === '' ? ' ' : this.vm.editLinkUrl);
        } else {
          this.vm.editLinkUrl = link;
        }

        this.range.selectNodeContents(this.parent);
        this.save();
        return;
      } else if (cmd === 'fullscreen') {
        this.vm.toggleFullscreen();
        done();
        return;
      }

      document.execCommand(cmd, false, param);
      done();
    }
  }, {
    key: "selectWord",
    value: function selectWord(sel) {
      if (!sel.isCollapsed) {
        return sel;
      }

      var range = document.createRange();
      range.setStart(sel.anchorNode, sel.anchorOffset);
      range.setEnd(sel.focusNode, sel.focusOffset);
      var direction = range.collapsed ? ['backward', 'forward'] : ['forward', 'backward'];
      range.detach();
      var endNode = sel.focusNode,
          endOffset = sel.focusOffset;
      sel.collapse(sel.anchorNode, sel.anchorOffset);
      sel.modify('move', direction[0], 'character');
      sel.modify('move', direction[1], 'word');
      sel.extend(endNode, endOffset);
      sel.modify('extend', direction[1], 'character');
      sel.modify('extend', direction[0], 'word');
      return sel;
    }
  }, {
    key: "selection",
    get: function get() {
      if (!this.el) {
        return;
      }

      var sel = document.getSelection();

      if (isChildOf(sel.anchorNode, this.el) && isChildOf(sel.focusNode, this.el)) {
        return sel;
      }
    }
  }, {
    key: "hasSelection",
    get: function get() {
      return this.selection ? this.selection.toString().length > 0 : null;
    }
  }, {
    key: "range",
    get: function get() {
      var sel = this.selection;

      if (!sel) {
        return;
      }

      return sel.rangeCount ? sel.getRangeAt(0) : null;
    }
  }, {
    key: "parent",
    get: function get() {
      var range = this.range;

      if (!range) {
        return;
      }

      var node = range.startContainer;
      return node.nodeType === document.ELEMENT_NODE ? node : node.parentNode;
    }
  }, {
    key: "blockParent",
    get: function get() {
      var parent = this.parent;

      if (!parent) {
        return;
      }

      return getBlockElement(parent, this.el);
    }
  }]);

  return Caret;
}();
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/extend.js




var extend_toString = Object.prototype.toString,
    hasOwn = Object.prototype.hasOwnProperty,
    class2type = {};
'Boolean Number String Function Array Date RegExp Object'.split(' ').forEach(function (name) {
  class2type['[object ' + name + ']'] = name.toLowerCase();
});

function extend_type(obj) {
  return obj === null ? String(obj) : class2type[extend_toString.call(obj)] || 'object';
}

function isPlainObject(obj) {
  if (!obj || extend_type(obj) !== 'object') {
    return false;
  }

  if (obj.constructor && !hasOwn.call(obj, 'constructor') && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
    return false;
  }

  var key;

  for (key in obj) {}

  return key === undefined || hasOwn.call(obj, key);
}

function extend() {
  var options,
      name,
      src,
      copy,
      copyIsArray,
      clone,
      target = arguments[0] || {},
      i = 1,
      length = arguments.length,
      deep = false;

  if (typeof target === 'boolean') {
    deep = target;
    target = arguments[1] || {};
    i = 2;
  }

  if (Object(target) !== target && extend_type(target) !== 'function') {
    target = {};
  }

  if (length === i) {
    target = this;
    i--;
  }

  for (; i < length; i++) {
    if ((options = arguments[i]) !== null) {
      for (name in options) {
        src = target[name];
        copy = options[name];

        if (target === copy) {
          continue;
        }

        if (deep && copy && (isPlainObject(copy) || (copyIsArray = extend_type(copy) === 'array'))) {
          if (copyIsArray) {
            copyIsArray = false;
            clone = src && extend_type(src) === 'array' ? src : [];
          } else {
            clone = src && isPlainObject(src) ? src : {};
          }

          target[name] = extend(deep, clone, copy);
        } else if (copy !== undefined) {
          target[name] = copy;
        }
      }
    }
  }

  return target;
}
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/editor/QEditor.js








/* harmony default export */ var QEditor = ({
  name: 'QEditor',
  mixins: [fullscreen["a" /* default */]],
  props: {
    value: {
      type: String,
      required: true
    },
    readonly: Boolean,
    disable: Boolean,
    minHeight: {
      type: String,
      default: '10rem'
    },
    maxHeight: String,
    height: String,
    definitions: Object,
    fonts: Object,
    toolbar: {
      type: Array,
      validator: function validator(v) {
        return v.length === 0 || v.every(function (group) {
          return group.length;
        });
      },
      default: function _default() {
        return [['left', 'center', 'right', 'justify'], ['bold', 'italic', 'underline', 'strike'], ['undo', 'redo']];
      }
    },
    toolbarColor: String,
    toolbarTextColor: String,
    toolbarToggleColor: {
      type: String,
      default: 'primary'
    },
    toolbarBg: {
      type: String,
      default: 'grey-3'
    },
    toolbarFlat: Boolean,
    toolbarOutline: Boolean,
    toolbarPush: Boolean,
    toolbarRounded: Boolean,
    contentStyle: Object,
    contentClass: [Object, Array, String]
  },
  computed: {
    editable: function editable() {
      return !this.readonly && !this.disable;
    },
    hasToolbar: function hasToolbar() {
      return this.toolbar && this.toolbar.length > 0;
    },
    toolbarBackgroundClass: function toolbarBackgroundClass() {
      if (this.toolbarBg) {
        return "bg-".concat(this.toolbarBg);
      }
    },
    buttonProps: function buttonProps() {
      return {
        outline: this.toolbarOutline,
        flat: this.toolbarFlat,
        push: this.toolbarPush,
        rounded: this.toolbarRounded,
        dense: true,
        color: this.toolbarColor,
        disable: !this.editable
      };
    },
    buttonDef: function buttonDef() {
      var e = this.$q.i18n.editor,
          i = this.$q.icon.editor;
      return {
        bold: {
          cmd: 'bold',
          icon: i.bold,
          tip: e.bold,
          key: 66
        },
        italic: {
          cmd: 'italic',
          icon: i.italic,
          tip: e.italic,
          key: 73
        },
        strike: {
          cmd: 'strikeThrough',
          icon: i.strikethrough,
          tip: e.strikethrough,
          key: 83
        },
        underline: {
          cmd: 'underline',
          icon: i.underline,
          tip: e.underline,
          key: 85
        },
        unordered: {
          cmd: 'insertUnorderedList',
          icon: i.unorderedList,
          tip: e.unorderedList
        },
        ordered: {
          cmd: 'insertOrderedList',
          icon: i.orderedList,
          tip: e.orderedList
        },
        subscript: {
          cmd: 'subscript',
          icon: i.subscript,
          tip: e.subscript,
          htmlTip: 'x<subscript>2</subscript>'
        },
        superscript: {
          cmd: 'superscript',
          icon: i.superscript,
          tip: e.superscript,
          htmlTip: 'x<superscript>2</superscript>'
        },
        link: {
          cmd: 'link',
          icon: i.hyperlink,
          tip: e.hyperlink,
          key: 76
        },
        fullscreen: {
          cmd: 'fullscreen',
          icon: i.toggleFullscreen,
          tip: e.toggleFullscreen,
          key: 70
        },
        quote: {
          cmd: 'formatBlock',
          param: 'BLOCKQUOTE',
          icon: i.quote,
          tip: e.quote,
          key: 81
        },
        left: {
          cmd: 'justifyLeft',
          icon: i.left,
          tip: e.left
        },
        center: {
          cmd: 'justifyCenter',
          icon: i.center,
          tip: e.center
        },
        right: {
          cmd: 'justifyRight',
          icon: i.right,
          tip: e.right
        },
        justify: {
          cmd: 'justifyFull',
          icon: i.justify,
          tip: e.justify
        },
        print: {
          type: 'no-state',
          cmd: 'print',
          icon: i.print,
          tip: e.print,
          key: 80
        },
        outdent: {
          type: 'no-state',
          disable: function disable(vm) {
            return vm.caret && !vm.caret.can('outdent');
          },
          cmd: 'outdent',
          icon: i.outdent,
          tip: e.outdent
        },
        indent: {
          type: 'no-state',
          disable: function disable(vm) {
            return vm.caret && !vm.caret.can('indent');
          },
          cmd: 'indent',
          icon: i.indent,
          tip: e.indent
        },
        removeFormat: {
          type: 'no-state',
          cmd: 'removeFormat',
          icon: i.removeFormat,
          tip: e.removeFormat
        },
        hr: {
          type: 'no-state',
          cmd: 'insertHorizontalRule',
          icon: i.hr,
          tip: e.hr
        },
        undo: {
          type: 'no-state',
          cmd: 'undo',
          icon: i.undo,
          tip: e.undo,
          key: 90
        },
        redo: {
          type: 'no-state',
          cmd: 'redo',
          icon: i.redo,
          tip: e.redo,
          key: 89
        },
        h1: {
          cmd: 'formatBlock',
          param: 'H1',
          icon: i.header,
          tip: e.header1,
          htmlTip: "<h1 class=\"q-ma-none\">".concat(e.header1, "</h1>")
        },
        h2: {
          cmd: 'formatBlock',
          param: 'H2',
          icon: i.header,
          tip: e.header2,
          htmlTip: "<h2 class=\"q-ma-none\">".concat(e.header2, "</h2>")
        },
        h3: {
          cmd: 'formatBlock',
          param: 'H3',
          icon: i.header,
          tip: e.header3,
          htmlTip: "<h3 class=\"q-ma-none\">".concat(e.header3, "</h3>")
        },
        h4: {
          cmd: 'formatBlock',
          param: 'H4',
          icon: i.header,
          tip: e.header4,
          htmlTip: "<h4 class=\"q-ma-none\">".concat(e.header4, "</h4>")
        },
        h5: {
          cmd: 'formatBlock',
          param: 'H5',
          icon: i.header,
          tip: e.header5,
          htmlTip: "<h5 class=\"q-ma-none\">".concat(e.header5, "</h5>")
        },
        h6: {
          cmd: 'formatBlock',
          param: 'H6',
          icon: i.header,
          tip: e.header6,
          htmlTip: "<h6 class=\"q-ma-none\">".concat(e.header6, "</h6>")
        },
        p: {
          cmd: 'formatBlock',
          param: 'DIV',
          icon: i.header,
          tip: e.paragraph
        },
        code: {
          cmd: 'formatBlock',
          param: 'PRE',
          icon: i.code,
          tip: "<code>".concat(e.code, "</code>")
        },
        'size-1': {
          cmd: 'fontSize',
          param: '1',
          icon: i.size,
          tip: e.size1,
          htmlTip: "<font size=\"1\">".concat(e.size1, "</font>")
        },
        'size-2': {
          cmd: 'fontSize',
          param: '2',
          icon: i.size,
          tip: e.size2,
          htmlTip: "<font size=\"2\">".concat(e.size2, "</font>")
        },
        'size-3': {
          cmd: 'fontSize',
          param: '3',
          icon: i.size,
          tip: e.size3,
          htmlTip: "<font size=\"3\">".concat(e.size3, "</font>")
        },
        'size-4': {
          cmd: 'fontSize',
          param: '4',
          icon: i.size,
          tip: e.size4,
          htmlTip: "<font size=\"4\">".concat(e.size4, "</font>")
        },
        'size-5': {
          cmd: 'fontSize',
          param: '5',
          icon: i.size,
          tip: e.size5,
          htmlTip: "<font size=\"5\">".concat(e.size5, "</font>")
        },
        'size-6': {
          cmd: 'fontSize',
          param: '6',
          icon: i.size,
          tip: e.size6,
          htmlTip: "<font size=\"6\">".concat(e.size6, "</font>")
        },
        'size-7': {
          cmd: 'fontSize',
          param: '7',
          icon: i.size,
          tip: e.size7,
          htmlTip: "<font size=\"7\">".concat(e.size7, "</font>")
        }
      };
    },
    buttons: function buttons() {
      var _this = this;

      var userDef = this.definitions || {};
      var def = this.definitions || this.fonts ? extend(true, {}, this.buttonDef, userDef, getFonts(this.defaultFont, this.$q.i18n.editor.defaultFont, this.$q.icon.editor.font, this.fonts)) : this.buttonDef;
      return this.toolbar.map(function (group) {
        return group.map(function (token) {
          if (token.options) {
            return {
              type: 'dropdown',
              icon: token.icon,
              label: token.label,
              fixedLabel: token.fixedLabel,
              fixedIcon: token.fixedIcon,
              highlight: token.highlight,
              list: token.list,
              options: token.options.map(function (item) {
                return def[item];
              })
            };
          }

          var obj = def[token];

          if (obj) {
            return obj.type === 'no-state' || userDef[token] && (obj.cmd === void 0 || _this.buttonDef[obj.cmd] && _this.buttonDef[obj.cmd].type === 'no-state') ? obj : extend(true, {
              type: 'toggle'
            }, obj);
          } else {
            return {
              type: 'slot',
              slot: token
            };
          }
        });
      });
    },
    keys: function keys() {
      var k = {},
          add = function add(btn) {
        if (btn.key) {
          k[btn.key] = {
            cmd: btn.cmd,
            param: btn.param
          };
        }
      };

      this.buttons.forEach(function (group) {
        group.forEach(function (token) {
          if (token.options) {
            token.options.forEach(add);
          } else {
            add(token);
          }
        });
      });
      return k;
    },
    innerStyle: function innerStyle() {
      return this.inFullscreen ? this.contentStyle : [{
        minHeight: this.minHeight,
        height: this.height,
        maxHeight: this.maxHeight
      }, this.contentStyle];
    },
    innerClass: function innerClass() {
      return [this.contentClass, {
        col: this.inFullscreen,
        'overflow-auto': this.inFullscreen || this.maxHeight
      }];
    }
  },
  data: function data() {
    return {
      editWatcher: true,
      editLinkUrl: null
    };
  },
  watch: {
    value: function value(v) {
      if (this.editWatcher) {
        this.$refs.content.innerHTML = v;
      } else {
        this.editWatcher = true;
      }
    }
  },
  methods: {
    onInput: function onInput(e) {
      if (this.editWatcher) {
        var val = this.$refs.content.innerHTML;

        if (val !== this.value) {
          this.editWatcher = false;
          this.$emit('input', val);
        }
      }
    },
    onKeydown: function onKeydown(e) {
      var key = Object(utils_event["b" /* getEventKey */])(e);

      if (!e.ctrlKey) {
        this.refreshToolbar();
        this.$q.platform.is.ie && this.$nextTick(this.onInput);
        return;
      }

      var target = this.keys[key];

      if (target !== void 0) {
        var cmd = target.cmd,
            param = target.param;
        Object(utils_event["h" /* stopAndPrevent */])(e);
        this.runCmd(cmd, param, false);
        this.$q.platform.is.ie && this.$nextTick(this.onInput);
      }
    },
    runCmd: function runCmd(cmd, param) {
      var _this2 = this;

      var update = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      this.focus();
      this.caret.apply(cmd, param, function () {
        _this2.focus();

        if (update) {
          _this2.refreshToolbar();
        }
      });
    },
    refreshToolbar: function refreshToolbar() {
      var _this3 = this;

      setTimeout(function () {
        _this3.editLinkUrl = null;

        _this3.$forceUpdate();
      }, 1);
    },
    focus: function focus() {
      this.$refs.content.focus();
    },
    getContentEl: function getContentEl() {
      return this.$refs.content;
    }
  },
  created: function created() {
    if (!platform["d" /* isSSR */]) {
      document.execCommand('defaultParagraphSeparator', false, 'div');
      this.defaultFont = window.getComputedStyle(document.body).fontFamily;
    }
  },
  mounted: function mounted() {
    var _this4 = this;

    this.$nextTick(function () {
      if (_this4.$refs.content) {
        _this4.caret = new editor_caret_Caret(_this4.$refs.content, _this4);
        _this4.$refs.content.innerHTML = _this4.value;
      }

      _this4.$nextTick(_this4.refreshToolbar);
    });
  },
  render: function render(h) {
    var _this5 = this;

    var toolbars;

    if (this.hasToolbar) {
      var toolbarConfig = {
        staticClass: "q-editor-toolbar row no-wrap scroll-x",
        'class': [{
          'q-editor-toolbar-separator': !this.toolbarOutline && !this.toolbarPush
        }, this.toolbarBackgroundClass]
      };
      toolbars = [];
      toolbars.push(h('div', extend({
        key: 'qedt_top'
      }, toolbarConfig), [h('div', {
        staticClass: 'row no-wrap q-editor-toolbar-padding fit items-center'
      }, getToolbar(h, this))]));

      if (this.editLinkUrl !== null) {
        toolbars.push(h('div', extend({
          key: 'qedt_btm'
        }, toolbarConfig), [h('div', {
          staticClass: 'row no-wrap q-editor-toolbar-padding fit items-center'
        }, getLinkEditor(h, this))]));
      }

      toolbars = h('div', toolbars);
    }

    return h('div', {
      staticClass: 'q-editor',
      style: {
        height: this.inFullscreen ? '100vh' : null
      },
      'class': {
        disabled: this.disable,
        fullscreen: this.inFullscreen,
        column: this.inFullscreen
      }
    }, [toolbars, h('div', {
      ref: 'content',
      staticClass: "q-editor-content",
      style: this.innerStyle,
      class: this.innerClass,
      attrs: {
        contenteditable: this.editable
      },
      domProps: platform["d" /* isSSR */] ? {
        innerHTML: this.value
      } : undefined,
      on: {
        input: this.onInput,
        keydown: this.onKeydown,
        click: this.refreshToolbar,
        blur: function blur() {
          _this5.caret.save();
        }
      }
    })]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/editor/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/fab/fab-mixin.js
/* harmony default export */ var fab_mixin = ({
  props: {
    outline: Boolean,
    push: Boolean,
    flat: Boolean,
    color: String,
    textColor: String,
    glossy: Boolean
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/fab/QFab.js




/* harmony default export */ var QFab = ({
  name: 'QFab',
  mixins: [fab_mixin, model_toggle["a" /* default */]],
  provide: function provide() {
    var _this = this;

    return {
      __qFabClose: function __qFabClose(evt) {
        return _this.hide(evt).then(function () {
          _this.$refs.trigger && _this.$refs.trigger.$el && _this.$refs.trigger.$el.focus();
          return evt;
        });
      }
    };
  },
  props: {
    icon: String,
    activeIcon: String,
    direction: {
      type: String,
      default: 'right'
    },
    persistent: Boolean
  },
  watch: {
    $route: function $route() {
      !this.persistent && this.hide();
    }
  },
  created: function created() {
    if (this.value) {
      this.show();
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-fab z-fab row inline justify-center',
      'class': {
        'q-fab-opened': this.showing
      }
    }, [h(QBtn["a" /* default */], {
      ref: 'trigger',
      props: {
        fab: true,
        outline: this.outline,
        push: this.push,
        flat: this.flat,
        color: this.color,
        textColor: this.textColor,
        glossy: this.glossy
      },
      on: {
        click: this.toggle
      }
    }, [this.$slots.tooltip, h(QIcon["a" /* default */], {
      staticClass: 'q-fab-icon absolute-full',
      props: {
        name: this.icon || this.$q.icon.fab.icon
      }
    }), h(QIcon["a" /* default */], {
      staticClass: 'q-fab-active-icon absolute-full',
      props: {
        name: this.activeIcon || this.$q.icon.fab.activeIcon
      }
    })]), h('div', {
      staticClass: 'q-fab-actions flex no-wrap inline items-center',
      'class': "q-fab-".concat(this.direction)
    }, this.$slots.default)]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/fab/QFabAction.js


/* harmony default export */ var QFabAction = ({
  name: 'QFabAction',
  mixins: [fab_mixin],
  props: {
    icon: {
      type: String,
      required: true
    }
  },
  inject: {
    __qFabClose: {
      default: function _default() {
        console.error('QFabAction needs to be child of QFab');
      }
    }
  },
  methods: {
    click: function click(e) {
      var _this = this;

      this.__qFabClose().then(function () {
        _this.$emit('click', e);
      });
    }
  },
  render: function render(h) {
    return h(QBtn["a" /* default */], {
      props: {
        fabMini: true,
        outline: this.outline,
        push: this.push,
        flat: this.flat,
        color: this.color,
        textColor: this.textColor,
        glossy: this.glossy,
        icon: this.icon
      },
      on: {
        click: this.click
      }
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/fab/index.js



// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.number.is-integer.js
var es6_number_is_integer = __webpack_require__("7cdf");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/field/QField.js






/* harmony default export */ var QField = ({
  name: 'QField',
  mixins: [can_render["a" /* default */]],
  props: {
    inset: {
      type: String,
      validator: function validator(v) {
        return ['icon', 'label', 'full'].includes(v);
      }
    },
    label: String,
    count: {
      type: [Number, Boolean],
      default: false
    },
    error: Boolean,
    errorLabel: String,
    warning: Boolean,
    warningLabel: String,
    helper: String,
    icon: String,
    iconColor: String,
    dark: Boolean,
    orientation: {
      type: String,
      validator: function validator(v) {
        return ['vertical', 'horizontal'].includes(v);
      }
    },
    labelWidth: {
      type: [Number, String],
      default: 5,
      validator: function validator(val) {
        var v = parseInt(val, 10);
        return v > 0 && v < 13;
      }
    }
  },
  data: function data() {
    return {
      input: {}
    };
  },
  computed: {
    hasError: function hasError() {
      return this.input.error || this.error;
    },
    hasWarning: function hasWarning() {
      return !this.hasError && (this.input.warning || this.warning);
    },
    childHasLabel: function childHasLabel() {
      return this.input.floatLabel || this.input.stackLabel;
    },
    isDark: function isDark() {
      return this.input.dark || this.dark;
    },
    insetIcon: function insetIcon() {
      return ['icon', 'full'].includes(this.inset);
    },
    hasNoInput: function hasNoInput() {
      return this.canRender && (!this.input.$options || this.input.__needsBorder);
    },
    counter: function counter() {
      if (this.count) {
        var length = this.input.length || '0';
        return Number.isInteger(this.count) ? "".concat(length, " / ").concat(this.count) : length;
      }
    },
    classes: function classes() {
      return {
        'q-field-responsive': !this.isVertical && !this.isHorizontal,
        'q-field-vertical': this.isVertical,
        'q-field-horizontal': this.isHorizontal,
        'q-field-floating': this.childHasLabel,
        'q-field-no-label': !this.label && !this.$slots.label,
        'q-field-with-error': this.hasError,
        'q-field-with-warning': this.hasWarning,
        'q-field-dark': this.isDark,
        'q-field-no-input': this.hasNoInput
      };
    },
    computedLabelWidth: function computedLabelWidth() {
      return parseInt(this.labelWidth, 10);
    },
    isVertical: function isVertical() {
      return this.orientation === 'vertical' || this.computedLabelWidth === 12;
    },
    isHorizontal: function isHorizontal() {
      return this.orientation === 'horizontal';
    },
    labelClasses: function labelClasses() {
      return this.isVertical ? "col-12" : this.isHorizontal ? "col-".concat(this.labelWidth) : "col-xs-12 col-sm-".concat(this.labelWidth);
    },
    inputClasses: function inputClasses() {
      return this.isVertical ? "col-xs-12" : this.isHorizontal ? 'col' : 'col-xs-12 col-sm';
    },
    iconProps: function iconProps() {
      var prop = {
        name: this.icon
      };

      if (this.iconColor && !this.hasError && !this.hasWarning) {
        prop.color = this.iconColor;
      }

      return prop;
    },
    insetHasLabel: function insetHasLabel() {
      return ['label', 'full'].includes(this.inset);
    }
  },
  provide: function provide() {
    return {
      __field: this
    };
  },
  methods: {
    __registerInput: function __registerInput(vm) {
      this.input = vm;
    },
    __unregisterInput: function __unregisterInput(vm) {
      if (!vm || vm === this.input) {
        this.input = {};
      }
    },
    __getBottomContent: function __getBottomContent(h) {
      var label;

      if (this.hasError && (label = this.$slots['error-label'] || this.errorLabel)) {
        return h('div', {
          staticClass: 'q-field-error col'
        }, label);
      }

      if (this.hasWarning && (label = this.$slots['warning-label'] || this.warningLabel)) {
        return h('div', {
          staticClass: 'q-field-warning col'
        }, label);
      }

      if (label = this.$slots.helper || this.helper) {
        return h('div', {
          staticClass: 'q-field-helper col'
        }, label);
      }

      return h('div', {
        staticClass: 'col text-transparent'
      }, ['|']);
    },
    __hasBottom: function __hasBottom() {
      return this.$slots['error-label'] || this.errorLabel || this.$slots['warning-label'] || this.warningLabel || this.$slots.helper || this.helper || this.count;
    }
  },
  render: function render(h) {
    var label = this.$slots.label || this.label;
    return h('div', {
      staticClass: 'q-field row no-wrap items-start',
      'class': this.classes
    }, [this.icon ? h(QIcon["a" /* default */], {
      props: this.iconProps,
      staticClass: 'q-field-icon q-field-margin'
    }) : this.insetIcon ? h('div', {
      staticClass: 'q-field-icon'
    }) : null, h('div', {
      staticClass: 'row col'
    }, [label || this.insetHasLabel ? h('div', {
      staticClass: 'q-field-label q-field-margin',
      'class': this.labelClasses
    }, [h('div', {
      staticClass: 'q-field-label-inner row items-center'
    }, [this.$slots.label || this.label])]) : null, h('div', {
      staticClass: 'q-field-content',
      'class': this.inputClasses
    }, [this.$slots.default, this.__hasBottom() ? h('div', {
      staticClass: 'q-field-bottom row no-wrap'
    }, [this.__getBottomContent(h), this.counter ? h('div', {
      staticClass: 'q-field-counter col-auto'
    }, [this.counter]) : null]) : null])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/field/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/icon/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/infinite-scroll/QInfiniteScroll.js





/* harmony default export */ var QInfiniteScroll = ({
  name: 'QInfiniteScroll',
  props: {
    handler: {
      type: Function,
      required: true
    },
    inline: Boolean,
    offset: {
      type: Number,
      default: 0
    }
  },
  data: function data() {
    return {
      index: 0,
      fetching: false,
      working: true
    };
  },
  methods: {
    poll: function poll() {
      if (this.fetching || !this.working) {
        return;
      }

      var containerHeight = Object(dom["c" /* height */])(this.scrollContainer),
          containerBottom = Object(dom["d" /* offset */])(this.scrollContainer).top + containerHeight,
          triggerPosition = Object(dom["d" /* offset */])(this.element).top + Object(dom["c" /* height */])(this.element) - (this.offset || containerHeight);

      if (triggerPosition < containerBottom) {
        this.loadMore();
      }
    },
    loadMore: function loadMore() {
      var _this = this;

      if (this.fetching || !this.working) {
        return;
      }

      this.index++;
      this.fetching = true;
      this.handler(this.index, function (stopLoading) {
        _this.fetching = false;

        if (stopLoading) {
          _this.stop();

          return;
        }

        if (_this.element.closest('body')) {
          _this.poll();
        }
      });
    },
    reset: function reset() {
      this.index = 0;
    },
    resume: function resume() {
      this.working = true;
      this.scrollContainer.addEventListener('scroll', this.poll, utils_event["f" /* listenOpts */].passive);
      this.immediatePoll();
    },
    stop: function stop() {
      this.working = false;
      this.fetching = false;
      this.scrollContainer.removeEventListener('scroll', this.poll, utils_event["f" /* listenOpts */].passive);
    }
  },
  mounted: function mounted() {
    var _this2 = this;

    this.$nextTick(function () {
      _this2.element = _this2.$refs.content;
      _this2.scrollContainer = _this2.inline ? _this2.$el : Object(utils_scroll["d" /* getScrollTarget */])(_this2.$el);

      if (_this2.working) {
        _this2.scrollContainer.addEventListener('scroll', _this2.poll, utils_event["f" /* listenOpts */].passive);
      }

      _this2.poll();

      _this2.immediatePoll = _this2.poll;
      _this2.poll = debounce(_this2.poll, 50);
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.scrollContainer.removeEventListener('scroll', this.poll, utils_event["f" /* listenOpts */].passive);
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-infinite-scroll'
    }, [h('div', {
      ref: 'content',
      staticClass: 'q-infinite-scroll-content'
    }, this.$slots.default), this.fetching ? h('div', {
      staticClass: 'q-infinite-scroll-message'
    }, this.$slots.message) : null]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/infinite-scroll/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/inner-loading/QInnerLoading.js


/* harmony default export */ var QInnerLoading = ({
  name: 'QInnerLoading',
  props: {
    dark: Boolean,
    visible: Boolean,
    size: {
      type: [String, Number],
      default: 42
    },
    color: String
  },
  render: function render(h) {
    if (!this.visible) {
      return;
    }

    return h('div', {
      staticClass: 'q-inner-loading animate-fade absolute-full column flex-center',
      'class': {
        dark: this.dark
      }
    }, this.$slots.default || [h(QSpinner["a" /* default */], {
      props: {
        size: this.size,
        color: this.color
      }
    })]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/inner-loading/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/input/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/input-frame/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/jumbotron/QJumbotron.js
/* harmony default export */ var QJumbotron = ({
  name: 'QJumbotron',
  props: {
    dark: Boolean,
    tag: {
      type: String,
      default: 'div'
    },
    imgSrc: String,
    gradient: String
  },
  computed: {
    gradientType: function gradientType() {
      if (this.gradient) {
        return this.gradient.indexOf('circle') > -1 ? 'radial' : 'linear';
      }
    },
    computedStyle: function computedStyle() {
      if (this.imgSrc) {
        return {
          'background-image': "url(".concat(this.imgSrc, ")")
        };
      }

      if (this.gradientType) {
        return {
          background: "".concat(this.gradientType, "-gradient(").concat(this.gradient, ")")
        };
      }
    }
  },
  render: function render(h) {
    return h(this.tag, {
      staticClass: 'q-jumbotron',
      style: this.computedStyle,
      'class': {
        'q-jumbotron-dark': this.dark
      }
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/jumbotron/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/knob/QKnob.js








/* harmony default export */ var QKnob = ({
  name: 'QKnob',
  directives: {
    TouchPan: touch_pan["a" /* default */]
  },
  props: {
    value: Number,
    min: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 100
    },
    color: String,
    trackColor: {
      type: String,
      default: 'grey-3'
    },
    lineWidth: {
      type: String,
      default: '6px'
    },
    size: {
      type: String,
      default: '100px'
    },
    step: {
      type: Number,
      default: 1
    },
    decimals: Number,
    disable: Boolean,
    readonly: Boolean
  },
  computed: {
    classes: function classes() {
      var cls = [];

      if (this.disable) {
        cls.push('disabled');
      }

      if (!this.readonly) {
        cls.push('cursor-pointer');
      }

      if (this.color) {
        cls.push("text-".concat(this.color));
      }

      return cls;
    },
    svgStyle: function svgStyle() {
      var dir = this.$q.i18n.rtl ? -1 : 1;
      return {
        'stroke-dasharray': '295.31px, 295.31px',
        'stroke-dashoffset': 295.31 * dir * (1.0 - (this.model - this.min) / (this.max - this.min)) + 'px',
        'transition': this.dragging ? '' : 'stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease'
      };
    },
    editable: function editable() {
      return !this.disable && !this.readonly;
    },
    computedDecimals: function computedDecimals() {
      return this.decimals !== void 0 ? this.decimals || 0 : (String(this.step).trim('0').split('.')[1] || '').length;
    },
    computedStep: function computedStep() {
      return this.decimals !== void 0 ? 1 / Math.pow(10, this.decimals || 0) : this.step;
    }
  },
  data: function data() {
    return {
      model: this.value,
      dragging: false
    };
  },
  watch: {
    value: function value(_value) {
      var _this = this;

      if (_value < this.min) {
        this.model = this.min;
      } else if (_value > this.max) {
        this.model = this.max;
      } else {
        var newVal = this.computedDecimals && typeof _value === 'number' ? parseFloat(_value.toFixed(this.computedDecimals)) : _value;

        if (newVal !== this.model) {
          this.model = newVal;
        }

        return;
      }

      this.$emit('input', this.model);
      this.$nextTick(function () {
        if (_this.model !== _this.value) {
          _this.$emit('change', _this.model);
        }
      });
    }
  },
  methods: {
    __pan: function __pan(event) {
      if (!this.editable) {
        return;
      }

      if (event.isFinal) {
        this.__dragStop(event.evt);
      } else if (event.isFirst) {
        this.__dragStart(event.evt);
      } else {
        this.__dragMove(event.evt);
      }
    },
    __dragStart: function __dragStart(ev) {
      if (!this.editable) {
        return;
      }

      Object(utils_event["h" /* stopAndPrevent */])(ev);
      this.centerPosition = this.__getCenter();
      clearTimeout(this.timer);
      this.dragging = true;

      this.__onInput(ev);
    },
    __dragMove: function __dragMove(ev) {
      if (!this.dragging || !this.editable) {
        return;
      }

      Object(utils_event["h" /* stopAndPrevent */])(ev);

      this.__onInput(ev, this.centerPosition);
    },
    __dragStop: function __dragStop(ev) {
      var _this2 = this;

      if (!this.editable) {
        return;
      }

      Object(utils_event["h" /* stopAndPrevent */])(ev);
      this.timer = setTimeout(function () {
        _this2.dragging = false;
      }, 100);

      this.__onInput(ev, this.centerPosition, true);
    },
    __onKeyDown: function __onKeyDown(ev) {
      var keyCode = ev.keyCode;

      if (!this.editable || ![37, 40, 39, 38].includes(keyCode)) {
        return;
      }

      Object(utils_event["h" /* stopAndPrevent */])(ev);
      var step = ev.ctrlKey ? 10 * this.computedStep : this.computedStep;
      var offset = [37, 40].includes(keyCode) ? -step : step;

      this.__onInputValue(Object(format["a" /* between */])(this.model + offset, this.min, this.max));
    },
    __onKeyUp: function __onKeyUp(ev) {
      var keyCode = ev.keyCode;

      if (!this.editable || ![37, 40, 39, 38].includes(keyCode)) {
        return;
      }

      this.__emitChange();
    },
    __onInput: function __onInput(ev) {
      var center = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.__getCenter();
      var emitChange = arguments.length > 2 ? arguments[2] : undefined;

      if (!this.editable) {
        return;
      }

      var pos = Object(utils_event["g" /* position */])(ev),
          height = Math.abs(pos.top - center.top),
          distance = Math.sqrt(Math.pow(Math.abs(pos.top - center.top), 2) + Math.pow(Math.abs(pos.left - center.left), 2));
      var angle = Math.asin(height / distance) * (180 / Math.PI);

      if (pos.top < center.top) {
        angle = center.left < pos.left ? 90 - angle : 270 + angle;
      } else {
        angle = center.left < pos.left ? angle + 90 : 270 - angle;
      }

      if (this.$q.i18n.rtl) {
        angle = 360 - angle;
      }

      var model = this.min + angle / 360 * (this.max - this.min),
          modulo = model % this.step;
      var value = Object(format["a" /* between */])(model - modulo + (Math.abs(modulo) >= this.step / 2 ? (modulo < 0 ? -1 : 1) * this.step : 0), this.min, this.max);

      this.__onInputValue(value, emitChange);
    },
    __onInputValue: function __onInputValue(value, emitChange) {
      if (this.computedDecimals) {
        value = parseFloat(value.toFixed(this.computedDecimals));
      }

      if (this.model !== value) {
        this.model = value;
      }

      this.$emit('drag-value', value);

      if (this.value === value) {
        return;
      }

      this.$emit('input', value);

      if (emitChange) {
        this.__emitChange(value);
      }
    },
    __emitChange: function __emitChange() {
      var _this3 = this;

      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.model;
      this.$nextTick(function () {
        if (JSON.stringify(value) !== JSON.stringify(_this3.value)) {
          _this3.$emit('change', value);
        }
      });
    },
    __getCenter: function __getCenter() {
      var knobOffset = Object(dom["d" /* offset */])(this.$el);
      return {
        top: knobOffset.top + Object(dom["c" /* height */])(this.$el) / 2,
        left: knobOffset.left + Object(dom["e" /* width */])(this.$el) / 2
      };
    }
  },
  render: function render(h) {
    var _this4 = this;

    return h('div', {
      staticClass: 'q-knob non-selectable',
      'class': this.classes,
      style: {
        width: this.size,
        height: this.size
      }
    }, [h('div', {
      on: {
        click: function click(e) {
          return !_this4.dragging && _this4.__onInput(e, void 0, true);
        }
      },
      directives: this.editable ? [{
        name: 'touch-pan',
        modifiers: {
          prevent: true,
          stop: true
        },
        value: this.__pan
      }] : null
    }, [h('svg', {
      attrs: {
        viewBox: '0 0 100 100'
      }
    }, [h('path', {
      attrs: {
        d: 'M 50,50 m 0,-47 a 47,47 0 1 1 0,94 a 47,47 0 1 1 0,-94',
        'fill-opacity': '0',
        stroke: 'currentColor',
        'stroke-width': this.lineWidth
      },
      'class': "text-".concat(this.trackColor)
    }), h('path', {
      attrs: {
        d: 'M 50,50 m 0,-47 a 47,47 0 1 1 0,94 a 47,47 0 1 1 0,-94',
        'fill-opacity': '0',
        stroke: 'currentColor',
        'stroke-linecap': 'round',
        'stroke-width': this.lineWidth
      },
      style: this.svgStyle
    })]), h('div', {
      staticClass: 'q-knob-label row flex-center content-center',
      attrs: {
        tabindex: this.editable ? 0 : -1
      },
      on: {
        keydown: this.__onKeyDown,
        keyup: this.__onKeyUp
      }
    }, this.$slots.default || [h('span', [this.model])])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/knob/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/layout/QLayout.js
var QLayout = __webpack_require__("7051");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/layout/QLayoutDrawer.js
var QLayoutDrawer = __webpack_require__("cf12");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.fixed.js
var es6_string_fixed = __webpack_require__("d263");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/observables/QResizeObservable.js
var QResizeObservable = __webpack_require__("363b");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/observables/QWindowResizeObservable.js



/* harmony default export */ var QWindowResizeObservable = ({
  name: 'QWindowResizeObservable',
  props: {
    debounce: {
      type: Number,
      default: 80
    }
  },
  render: function render() {},
  methods: {
    trigger: function trigger() {
      if (this.debounce === 0) {
        this.emit();
      } else if (!this.timer) {
        this.timer = setTimeout(this.emit, this.debounce);
      }
    },
    emit: function emit(ssr) {
      this.timer = null;
      this.$emit('resize', {
        height: ssr ? 0 : window.innerHeight,
        width: ssr ? 0 : window.innerWidth
      });
    }
  },
  created: function created() {
    this.emit(platform["e" /* onSSR */]);
  },
  mounted: function mounted() {
    platform["b" /* fromSSR */] && this.emit();
    window.addEventListener('resize', this.trigger, utils_event["f" /* listenOpts */].passive);
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.timer);
    window.removeEventListener('resize', this.trigger, utils_event["f" /* listenOpts */].passive);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/layout/QLayoutFooter.js





/* harmony default export */ var QLayoutFooter = ({
  name: 'QLayoutFooter',
  mixins: [can_render["a" /* default */]],
  inject: {
    layout: {
      default: function _default() {
        console.error('QLayoutFooter needs to be child of QLayout');
      }
    }
  },
  props: {
    value: {
      type: Boolean,
      default: true
    },
    reveal: Boolean
  },
  data: function data() {
    return {
      size: 0,
      revealed: true,
      windowHeight: platform["e" /* onSSR */] || this.layout.container ? 0 : window.innerHeight
    };
  },
  watch: {
    value: function value(val) {
      this.__update('space', val);

      this.__updateLocal('revealed', true);

      this.layout.__animate();
    },
    offset: function offset(val) {
      this.__update('offset', val);
    },
    reveal: function reveal(val) {
      if (!val) {
        this.__updateLocal('revealed', this.value);
      }
    },
    revealed: function revealed(val) {
      this.layout.__animate();

      this.$emit('reveal', val);
    },
    'layout.scroll': function layoutScroll() {
      this.__updateRevealed();
    },
    'layout.height': function layoutHeight() {
      this.__updateRevealed();
    },
    size: function size() {
      this.__updateRevealed();
    }
  },
  computed: {
    fixed: function fixed() {
      return this.reveal || this.layout.view.indexOf('F') > -1 || this.layout.container;
    },
    containerHeight: function containerHeight() {
      return this.layout.container ? this.layout.containerHeight : this.windowHeight;
    },
    offset: function offset() {
      if (!this.canRender || !this.value) {
        return 0;
      }

      if (this.fixed) {
        return this.revealed ? this.size : 0;
      }

      var offset = this.layout.scroll.position + this.containerHeight + this.size - this.layout.height;
      return offset > 0 ? offset : 0;
    },
    computedClass: function computedClass() {
      return {
        'fixed-bottom': this.fixed,
        'absolute-bottom': !this.fixed,
        'hidden': !this.value && !this.fixed,
        'q-layout-footer-hidden': !this.canRender || !this.value || this.fixed && !this.revealed
      };
    },
    computedStyle: function computedStyle() {
      var view = this.layout.rows.bottom,
          css = {};

      if (view[0] === 'l' && this.layout.left.space) {
        css[this.$q.i18n.rtl ? 'right' : 'left'] = "".concat(this.layout.left.size, "px");
      }

      if (view[2] === 'r' && this.layout.right.space) {
        css[this.$q.i18n.rtl ? 'left' : 'right'] = "".concat(this.layout.right.size, "px");
      }

      return css;
    }
  },
  render: function render(h) {
    return h('footer', {
      staticClass: 'q-layout-footer q-layout-marginal q-layout-transition',
      'class': this.computedClass,
      style: this.computedStyle
    }, [h(QResizeObservable["a" /* default */], {
      props: {
        debounce: 0
      },
      on: {
        resize: this.__onResize
      }
    }), !this.layout.container && h(QWindowResizeObservable, {
      props: {
        debounce: 0
      },
      on: {
        resize: this.__onWindowResize
      }
    }) || void 0, this.$slots.default]);
  },
  created: function created() {
    this.layout.instances.footer = this;

    this.__update('space', this.value);

    this.__update('offset', this.offset);
  },
  beforeDestroy: function beforeDestroy() {
    if (this.layout.instances.footer === this) {
      this.layout.instances.footer = null;

      this.__update('size', 0);

      this.__update('offset', 0);

      this.__update('space', false);
    }
  },
  methods: {
    __onResize: function __onResize(_ref) {
      var height = _ref.height;

      this.__updateLocal('size', height);

      this.__update('size', height);
    },
    __onWindowResize: function __onWindowResize(_ref2) {
      var height = _ref2.height;

      this.__updateLocal('windowHeight', height);
    },
    __update: function __update(prop, val) {
      if (this.layout.footer[prop] !== val) {
        this.layout.footer[prop] = val;
      }
    },
    __updateLocal: function __updateLocal(prop, val) {
      if (this[prop] !== val) {
        this[prop] = val;
      }
    },
    __updateRevealed: function __updateRevealed() {
      if (!this.reveal) {
        return;
      }

      var _this$layout$scroll = this.layout.scroll,
          direction = _this$layout$scroll.direction,
          position = _this$layout$scroll.position,
          inflexionPosition = _this$layout$scroll.inflexionPosition;

      this.__updateLocal('revealed', direction === 'up' || position - inflexionPosition < 100 || this.layout.height - this.containerHeight - position - this.size < 300);
    }
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/layout/QLayoutHeader.js
var QLayoutHeader = __webpack_require__("2040");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/layout/QPage.js
var QPage = __webpack_require__("32a1");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/layout/QPageContainer.js
var QPageContainer = __webpack_require__("46a9");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/layout/QPageSticky.js


/* harmony default export */ var QPageSticky = ({
  name: 'QPageSticky',
  inject: {
    layout: {
      default: function _default() {
        console.error('QPageSticky needs to be child of QLayout');
      }
    }
  },
  props: {
    position: {
      type: String,
      default: 'bottom-right',
      validator: function validator(v) {
        return ['top-right', 'top-left', 'bottom-right', 'bottom-left', 'top', 'right', 'bottom', 'left'].includes(v);
      }
    },
    offset: {
      type: Array,
      validator: function validator(v) {
        return v.length === 2;
      }
    },
    expand: Boolean
  },
  computed: {
    attach: function attach() {
      var pos = this.position;
      return {
        top: pos.indexOf('top') > -1,
        right: pos.indexOf('right') > -1,
        bottom: pos.indexOf('bottom') > -1,
        left: pos.indexOf('left') > -1,
        vertical: pos === 'top' || pos === 'bottom',
        horizontal: pos === 'left' || pos === 'right'
      };
    },
    top: function top() {
      return this.layout.header.offset;
    },
    right: function right() {
      return this.layout.right.offset;
    },
    bottom: function bottom() {
      return this.layout.footer.offset;
    },
    left: function left() {
      return this.layout.left.offset;
    },
    computedStyle: function computedStyle() {
      var attach = this.attach,
          transforms = [],
          dir = this.$q.i18n.rtl ? -1 : 1;

      if (attach.top && this.top) {
        transforms.push("translateY(".concat(this.top, "px)"));
      } else if (attach.bottom && this.bottom) {
        transforms.push("translateY(".concat(-this.bottom, "px)"));
      }

      if (attach.left && this.left) {
        transforms.push("translateX(".concat(dir * this.left, "px)"));
      } else if (attach.right && this.right) {
        transforms.push("translateX(".concat(-dir * this.right, "px)"));
      }

      var css = transforms.length ? {
        transform: transforms.join(' ')
      } : {};

      if (this.offset) {
        css.margin = "".concat(this.offset[1], "px ").concat(this.offset[0], "px");
      }

      if (attach.vertical) {
        if (this.left) {
          css[this.$q.i18n.rtl ? 'right' : 'left'] = "".concat(this.left, "px");
        }

        if (this.right) {
          css[this.$q.i18n.rtl ? 'left' : 'right'] = "".concat(this.right, "px");
        }
      } else if (attach.horizontal) {
        if (this.top) {
          css.top = "".concat(this.top, "px");
        }

        if (this.bottom) {
          css.bottom = "".concat(this.bottom, "px");
        }
      }

      return css;
    },
    classes: function classes() {
      return ["fixed-".concat(this.position), "q-page-sticky-".concat(this.expand ? 'expand' : 'shrink')];
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-page-sticky q-layout-transition row flex-center',
      'class': this.classes,
      style: this.computedStyle
    }, this.expand ? this.$slots.default : [h('span', this.$slots.default)]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/layout/index.js








// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/list/QListHeader.js
var QListHeader = __webpack_require__("1e55");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/list/index.js









// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/modal/QModalLayout.js
/* harmony default export */ var QModalLayout = ({
  name: 'QModalLayout',
  inject: {
    __qmodal: {
      default: function _default() {
        console.error('QModalLayout needs to be child of QModal');
      }
    }
  },
  props: {
    headerStyle: [String, Object, Array],
    headerClass: [String, Object, Array],
    contentStyle: [String, Object, Array],
    contentClass: [String, Object, Array],
    footerStyle: [String, Object, Array],
    footerClass: [String, Object, Array]
  },
  watch: {
    __qmodal: function __qmodal(newModal, oldModal) {
      oldModal && oldModal.unregister(this);
      newModal && newModal.register(this);
    }
  },
  mounted: function mounted() {
    this.__qmodal && this.__qmodal.register(this);
  },
  beforeDestroy: function beforeDestroy() {
    this.__qmodal && this.__qmodal.unregister(this);
  },
  render: function render(h) {
    var child = [];

    if (this.$slots.header ||  true && this.$slots.navigation) {
      child.push(h('div', {
        staticClass: 'q-layout-header',
        style: this.headerStyle,
        'class': this.headerClass
      }, [this.$slots.header,  true ? this.$slots.navigation : undefined]));
    }

    child.push(h('div', {
      staticClass: 'q-modal-layout-content col scroll',
      style: this.contentStyle,
      'class': this.contentClass
    }, this.$slots.default));

    if (this.$slots.footer ||  false && false) {
      child.push(h('div', {
        staticClass: 'q-layout-footer',
        style: this.footerStyle,
        'class': this.footerClass
      }, [this.$slots.footer,  false ? undefined : null]));
    }

    return h('div', {
      staticClass: 'q-modal-layout col column no-wrap'
    }, child);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/modal/index.js



// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/no-ssr/QNoSsr.js

/* harmony default export */ var QNoSsr = ({
  name: 'QNoSsr',
  mixins: [can_render["a" /* default */]],
  props: {
    tag: {
      type: String,
      default: 'div'
    },
    placeholder: String
  },
  render: function render(h) {
    if (this.canRender) {
      var slot = this.$slots.default;
      return slot && slot.length > 1 ? h(this.tag, slot) : slot ? slot[0] : null;
    }

    if (this.$slots.placeholder) {
      var _slot = this.$slots.placeholder;
      return _slot && _slot.length > 1 ? h(this.tag, {
        staticClass: 'q-no-ssr-placeholder'
      }, _slot) : _slot ? _slot[0] : null;
    }

    if (this.placeholder) {
      return h(this.tag, {
        staticClass: 'q-no-ssr-placeholder'
      }, [this.placeholder]);
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/no-ssr/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/observables/QScrollObservable.js
var QScrollObservable = __webpack_require__("fc6c");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/observables/index.js




// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/option-group/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/pagination/QPagination.js








/* harmony default export */ var QPagination = ({
  name: 'QPagination',
  props: {
    value: {
      type: Number,
      required: true
    },
    min: {
      type: Number,
      default: 1
    },
    max: {
      type: Number,
      required: true
    },
    color: {
      type: String,
      default: 'primary'
    },
    textColor: String,
    size: String,
    disable: Boolean,
    input: Boolean,
    boundaryLinks: {
      type: Boolean,
      default: null
    },
    boundaryNumbers: {
      type: Boolean,
      default: null
    },
    directionLinks: {
      type: Boolean,
      default: null
    },
    ellipses: {
      type: Boolean,
      default: null
    },
    maxPages: {
      type: Number,
      default: 0,
      validator: function validator(v) {
        if (v < 0) {
          console.error('maxPages should not be negative');
          return false;
        }

        return true;
      }
    }
  },
  data: function data() {
    return {
      newPage: null
    };
  },
  watch: {
    min: function min(value) {
      this.model = this.value;
    },
    max: function max(value) {
      this.model = this.value;
    }
  },
  computed: {
    model: {
      get: function get() {
        return this.value;
      },
      set: function set(val) {
        var _this = this;

        if (this.disable || !val || isNaN(val)) {
          return;
        }

        var value = Object(format["a" /* between */])(parseInt(val, 10), this.min, this.max);
        this.$emit('input', value);
        this.$nextTick(function () {
          if (JSON.stringify(value) !== JSON.stringify(_this.value)) {
            _this.$emit('change', value);
          }
        });
      }
    },
    inputPlaceholder: function inputPlaceholder() {
      return this.model + ' / ' + this.max;
    },
    __boundaryLinks: function __boundaryLinks() {
      return this.__getBool(this.boundaryLinks, this.input);
    },
    __boundaryNumbers: function __boundaryNumbers() {
      return this.__getBool(this.boundaryNumbers, !this.input);
    },
    __directionLinks: function __directionLinks() {
      return this.__getBool(this.directionLinks, this.input);
    },
    __ellipses: function __ellipses() {
      return this.__getBool(this.ellipses, !this.input);
    },
    icons: function icons() {
      var ico = [this.$q.icon.pagination.first, this.$q.icon.pagination.prev, this.$q.icon.pagination.next, this.$q.icon.pagination.last];
      return this.$q.i18n.rtl ? ico.reverse() : ico;
    }
  },
  methods: {
    set: function set(value) {
      this.model = value;
    },
    setByOffset: function setByOffset(offset) {
      this.model = this.model + offset;
    },
    __update: function __update() {
      this.model = this.newPage;
      this.newPage = null;
    },
    __getBool: function __getBool(val, otherwise) {
      return [true, false].includes(val) ? val : otherwise;
    },
    __getBtn: function __getBtn(h, data, props) {
      data.props = Object.assign({
        color: this.color,
        flat: true,
        size: this.size
      }, props);
      return h(QBtn["a" /* default */], data);
    }
  },
  render: function render(h) {
    var _this2 = this;

    var contentStart = [],
        contentEnd = [],
        contentMiddle = [];

    if (this.__boundaryLinks) {
      contentStart.push(this.__getBtn(h, {
        key: 'bls',
        on: {
          click: function click() {
            return _this2.set(_this2.min);
          }
        }
      }, {
        disable: this.disable || this.value <= this.min,
        icon: this.icons[0]
      }));
      contentEnd.unshift(this.__getBtn(h, {
        key: 'ble',
        on: {
          click: function click() {
            return _this2.set(_this2.max);
          }
        }
      }, {
        disable: this.disable || this.value >= this.max,
        icon: this.icons[3]
      }));
    }

    if (this.__directionLinks) {
      contentStart.push(this.__getBtn(h, {
        key: 'bdp',
        on: {
          click: function click() {
            return _this2.setByOffset(-1);
          }
        }
      }, {
        disable: this.disable || this.value <= this.min,
        icon: this.icons[1]
      }));
      contentEnd.unshift(this.__getBtn(h, {
        key: 'bdn',
        on: {
          click: function click() {
            return _this2.setByOffset(1);
          }
        }
      }, {
        disable: this.disable || this.value >= this.max,
        icon: this.icons[2]
      }));
    }

    if (this.input) {
      contentMiddle.push(h(QInput["a" /* default */], {
        staticClass: 'inline no-padding',
        style: {
          width: "".concat(this.inputPlaceholder.length, "rem")
        },
        props: {
          type: 'number',
          value: this.newPage,
          noNumberToggle: true,
          min: this.min,
          max: this.max,
          color: this.color,
          placeholder: this.inputPlaceholder,
          disable: this.disable,
          hideUnderline: true
        },
        on: {
          input: function input(value) {
            return _this2.newPage = value;
          },
          keydown: function keydown(e) {
            return Object(utils_event["b" /* getEventKey */])(e) === 13 && _this2.__update();
          },
          blur: function blur() {
            return _this2.__update();
          }
        }
      }));
    } else {
      var maxPages = Math.max(this.maxPages, 1 + (this.__ellipses ? 2 : 0) + (this.__boundaryNumbers ? 2 : 0)),
          pgFrom = this.min,
          pgTo = this.max,
          ellipsesStart = false,
          ellipsesEnd = false,
          boundaryStart = false,
          boundaryEnd = false;

      if (this.maxPages && maxPages < this.max - this.min + 1) {
        maxPages = 1 + Math.floor(maxPages / 2) * 2;
        pgFrom = Math.max(this.min, Math.min(this.max - maxPages + 1, this.value - Math.floor(maxPages / 2)));
        pgTo = Math.min(this.max, pgFrom + maxPages - 1);

        if (this.__boundaryNumbers) {
          boundaryStart = true;
          pgFrom += 1;
        }

        if (this.__ellipses && pgFrom > this.min + (this.__boundaryNumbers ? 1 : 0)) {
          ellipsesStart = true;
          pgFrom += 1;
        }

        if (this.__boundaryNumbers) {
          boundaryEnd = true;
          pgTo -= 1;
        }

        if (this.__ellipses && pgTo < this.max - (this.__boundaryNumbers ? 1 : 0)) {
          ellipsesEnd = true;
          pgTo -= 1;
        }
      }

      var style = {
        minWidth: "".concat(Math.max(2, String(this.max).length), "em")
      };

      if (boundaryStart) {
        var active = this.min === this.value;
        contentStart.push(this.__getBtn(h, {
          key: 'bns',
          style: style,
          on: {
            click: function click() {
              return _this2.set(_this2.min);
            }
          }
        }, {
          disable: this.disable,
          flat: !active,
          textColor: active ? this.textColor : null,
          label: this.min,
          noRipple: true
        }));
      }

      if (boundaryEnd) {
        var _active = this.max === this.value;

        contentEnd.unshift(this.__getBtn(h, {
          key: 'bne',
          style: style,
          on: {
            click: function click() {
              return _this2.set(_this2.max);
            }
          }
        }, {
          disable: this.disable,
          flat: !_active,
          textColor: _active ? this.textColor : null,
          label: this.max,
          noRipple: true
        }));
      }

      if (ellipsesStart) {
        contentStart.push(this.__getBtn(h, {
          key: 'bes',
          style: style,
          on: {
            click: function click() {
              return _this2.set(pgFrom - 1);
            }
          }
        }, {
          disable: this.disable,
          label: '…'
        }));
      }

      if (ellipsesEnd) {
        contentEnd.unshift(this.__getBtn(h, {
          key: 'bee',
          style: style,
          on: {
            click: function click() {
              return _this2.set(pgTo + 1);
            }
          }
        }, {
          disable: this.disable,
          label: '…'
        }));
      }

      var _loop = function _loop(i) {
        var active = i === _this2.value;
        contentMiddle.push(_this2.__getBtn(h, {
          key: "bpg".concat(i),
          style: style,
          on: {
            click: function click() {
              return _this2.set(i);
            }
          }
        }, {
          disable: _this2.disable,
          flat: !active,
          textColor: active ? _this2.textColor : null,
          label: i,
          noRipple: true
        }));
      };

      for (var i = pgFrom; i <= pgTo; i++) {
        _loop(i);
      }
    }

    return h('div', {
      staticClass: 'q-pagination row no-wrap items-center',
      'class': {
        disabled: this.disable
      }
    }, [contentStart, h('div', {
      staticClass: 'row justify-center'
    }, [contentMiddle]), contentEnd]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/pagination/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/frame-debounce.js
var frame_debounce = __webpack_require__("8e2f");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/parallax/QParallax.js






/* harmony default export */ var QParallax = ({
  name: 'QParallax',
  props: {
    src: String,
    height: {
      type: Number,
      default: 500
    },
    speed: {
      type: Number,
      default: 1,
      validator: function validator(v) {
        return v >= 0 && v <= 1;
      }
    }
  },
  data: function data() {
    return {
      scrolling: false
    };
  },
  watch: {
    height: function height() {
      this.__updatePos();
    }
  },
  methods: {
    __onResize: function __onResize() {
      if (!this.scrollTarget) {
        return;
      }

      this.mediaHeight = this.media.naturalHeight || Object(dom["c" /* height */])(this.media);

      this.__updatePos();
    },
    __updatePos: function __updatePos() {
      var containerTop, containerHeight, containerBottom, top, bottom;

      if (this.scrollTarget === window) {
        containerTop = 0;
        containerHeight = window.innerHeight;
        containerBottom = containerHeight;
      } else {
        containerTop = Object(dom["d" /* offset */])(this.scrollTarget).top;
        containerHeight = Object(dom["c" /* height */])(this.scrollTarget);
        containerBottom = containerTop + containerHeight;
      }

      top = Object(dom["d" /* offset */])(this.$el).top;
      bottom = top + this.height;

      if (bottom > containerTop && top < containerBottom) {
        var percentScrolled = (containerBottom - top) / (this.height + containerHeight);

        this.__setPos((this.mediaHeight - this.height) * percentScrolled * this.speed);
      }
    },
    __setPos: function __setPos(offset) {
      this.media.style.transform = "translate3D(-50%,".concat(offset, "px, 0)");
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-parallax',
      style: {
        height: "".concat(this.height, "px")
      }
    }, [h('div', {
      staticClass: 'q-parallax-media absolute-full'
    }, [this.$slots.media || h('img', {
      ref: 'media',
      attrs: {
        src: this.src
      }
    })]), h('div', {
      staticClass: 'q-parallax-text absolute-full column flex-center no-pointer-events'
    }, this.$slots.default)]);
  },
  beforeMount: function beforeMount() {
    this.__setPos = Object(frame_debounce["a" /* default */])(this.__setPos);
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      _this.media = _this.$slots.media ? _this.$slots.media[0].elm : _this.$refs.media;
      _this.media.onload = _this.media.onloadstart = _this.__onResize;
      _this.scrollTarget = Object(utils_scroll["d" /* getScrollTarget */])(_this.$el);
      _this.resizeHandler = debounce(_this.__onResize, 50);
      window.addEventListener('resize', _this.resizeHandler, utils_event["f" /* listenOpts */].passive);

      _this.scrollTarget.addEventListener('scroll', _this.__updatePos, utils_event["f" /* listenOpts */].passive);

      _this.__onResize();
    });
  },
  beforeDestroy: function beforeDestroy() {
    window.removeEventListener('resize', this.resizeHandler, utils_event["f" /* listenOpts */].passive);
    this.scrollTarget.removeEventListener('scroll', this.__updatePos, utils_event["f" /* listenOpts */].passive);
    this.media.onload = this.media.onloadstart = null;
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/parallax/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/popover/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/popup-edit/QPopupEdit.js




/* harmony default export */ var QPopupEdit = ({
  name: 'QPopupEdit',
  props: {
    value: {},
    persistent: Boolean,
    keepOnScreen: {
      type: Boolean,
      default: true
    },
    title: String,
    buttons: Boolean,
    labelSet: String,
    labelCancel: String,
    color: {
      type: String,
      default: 'primary'
    },
    validate: {
      type: Function,
      default: function _default() {
        return true;
      }
    },
    disable: Boolean
  },
  data: function data() {
    return {
      initialValue: ''
    };
  },
  watch: {
    value: function value() {
      var _this = this;

      this.$nextTick(function () {
        _this.$refs.popover.reposition();
      });
    }
  },
  methods: {
    cancel: function cancel() {
      if (this.__hasChanged()) {
        this.$emit('cancel', this.value, this.initialValue);
        this.$emit('input', this.initialValue);
      }

      this.$nextTick(this.__close);
    },
    set: function set() {
      if (this.__hasChanged()) {
        if (!this.validate(this.value)) {
          return;
        }

        this.$emit('save', this.value, this.initialValue);
      }

      this.__close();
    },
    __hasChanged: function __hasChanged() {
      return JSON.stringify(this.value) !== JSON.stringify(this.initialValue);
    },
    __close: function __close() {
      this.validated = true;
      this.$refs.popover.hide();
    },
    __getContent: function __getContent(h) {
      var title = this.$slots.title || this.title;
      return [title && h('div', {
        staticClass: 'q-title q-mt-sm q-mb-sm'
      }, [title]) || void 0].concat(this.$slots.default).concat([this.buttons && h('div', {
        staticClass: 'row justify-center no-wrap q-mt-sm'
      }, [h(QBtn["a" /* default */], {
        props: {
          flat: true,
          color: this.color,
          label: this.labelCancel || this.$q.i18n.label.cancel
        },
        on: {
          click: this.cancel
        }
      }), h(QBtn["a" /* default */], {
        staticClass: 'q-ml-sm',
        props: {
          flat: true,
          color: this.color,
          label: this.labelSet || this.$q.i18n.label.set
        },
        on: {
          click: this.set
        }
      })]) || void 0]);
    }
  },
  render: function render(h) {
    var _this2 = this;

    return h(QPopover["a" /* default */], {
      staticClass: 'q-table-edit q-px-md q-py-sm',
      ref: 'popover',
      props: {
        cover: true,
        persistent: this.persistent,
        keepOnScreen: this.keepOnScreen,
        disable: this.disable
      },
      on: {
        show: function show() {
          var input = _this2.$el.querySelector('.q-input-target:not(.q-input-shadow)') || _this2.$el.querySelector('input') || _this2.$el.querySelector('textarea');

          input && input.focus();

          _this2.$emit('show');

          _this2.initialValue = Object(clone["a" /* default */])(_this2.value);
          _this2.validated = false;
        },
        'escape-key': function escapeKey() {
          _this2.validated = true;

          _this2.$emit('cancel', _this2.value, _this2.initialValue);

          _this2.$emit('input', _this2.initialValue);
        },
        hide: function hide() {
          if (_this2.validated) {
            return;
          }

          if (_this2.__hasChanged()) {
            if (_this2.validate(_this2.value)) {
              _this2.$emit('save', _this2.value, _this2.initialValue);
            } else {
              _this2.$emit('cancel', _this2.value, _this2.initialValue);

              _this2.$emit('input', _this2.initialValue);
            }
          }

          _this2.$emit('hide');
        }
      },
      nativeOn: {
        keydown: function keydown(e) {
          if (Object(utils_event["b" /* getEventKey */])(e) === 13) {
            _this2.buttons ? _this2.set() : _this2.$refs.popover.hide();
          }
        }
      }
    }, this.__getContent(h));
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/popup-edit/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/progress/QProgress.js
var QProgress = __webpack_require__("d3e7");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/progress/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/pull-to-refresh/QPullToRefresh.js




var QPullToRefresh_height = -65;
/* harmony default export */ var QPullToRefresh = ({
  name: 'QPullToRefresh',
  directives: {
    TouchPan: touch_pan["a" /* default */]
  },
  props: {
    handler: {
      type: Function,
      required: true
    },
    color: {
      type: String,
      default: 'primary'
    },
    distance: {
      type: Number,
      default: 35
    },
    pullMessage: String,
    releaseMessage: String,
    refreshMessage: String,
    refreshIcon: String,
    inline: Boolean,
    disable: Boolean
  },
  data: function data() {
    return {
      state: 'pull',
      pullPosition: QPullToRefresh_height,
      animating: false,
      pulling: false,
      scrolling: false
    };
  },
  watch: {
    inline: function inline(val) {
      this.setScrollContainer(val);
    }
  },
  computed: {
    message: function message() {
      switch (this.state) {
        case 'pulled':
          return this.releaseMessage || this.$q.i18n.pullToRefresh.release;

        case 'refreshing':
          return this.refreshMessage || this.$q.i18n.pullToRefresh.refresh;

        case 'pull':
        default:
          return this.pullMessage || this.$q.i18n.pullToRefresh.pull;
      }
    },
    style: function style() {
      return {
        transform: "translateY(".concat(this.pullPosition, "px)"),
        marginBottom: "".concat(QPullToRefresh_height, "px")
      };
    },
    messageClass: function messageClass() {
      return "text-".concat(this.color);
    }
  },
  methods: {
    __pull: function __pull(event) {
      if (this.disable) {
        return;
      }

      if (event.isFinal) {
        this.scrolling = false;
        this.pulling = false;

        if (this.state === 'pulled') {
          this.state = 'refreshing';

          this.__animateTo(0);

          this.trigger();
        } else if (this.state === 'pull') {
          this.__animateTo(QPullToRefresh_height);
        }

        return;
      }

      if (this.animating || this.scrolling || this.state === 'refreshing') {
        return true;
      }

      var top = Object(utils_scroll["c" /* getScrollPosition */])(this.scrollContainer);

      if (top !== 0 || top === 0 && event.direction !== 'down') {
        this.scrolling = true;

        if (this.pulling) {
          this.pulling = false;
          this.state = 'pull';

          this.__animateTo(QPullToRefresh_height);
        }

        return true;
      }

      event.evt.preventDefault();
      this.pulling = true;
      this.pullPosition = QPullToRefresh_height + Math.max(0, Math.pow(event.distance.y, 0.85));
      this.state = this.pullPosition > this.distance ? 'pulled' : 'pull';
    },
    __animateTo: function __animateTo(target, done, previousCall) {
      var _this = this;

      if (!previousCall && this.animationId) {
        cancelAnimationFrame(this.animating);
      }

      this.pullPosition -= (this.pullPosition - target) / 7;

      if (this.pullPosition - target > 1) {
        this.animating = requestAnimationFrame(function () {
          _this.__animateTo(target, done, true);
        });
      } else {
        this.animating = requestAnimationFrame(function () {
          _this.pullPosition = target;
          _this.animating = false;
          done && done();
        });
      }
    },
    trigger: function trigger() {
      var _this2 = this;

      this.handler(function () {
        _this2.__animateTo(QPullToRefresh_height, function () {
          _this2.state = 'pull';
        });
      });
    },
    setScrollContainer: function setScrollContainer(inline) {
      var _this3 = this;

      this.$nextTick(function () {
        _this3.scrollContainer = inline ? _this3.$el.parentNode : Object(utils_scroll["d" /* getScrollTarget */])(_this3.$el);
      });
    }
  },
  mounted: function mounted() {
    this.setScrollContainer(this.inline);
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'pull-to-refresh overflow-hidden-y'
    }, [h('div', {
      staticClass: 'pull-to-refresh-container',
      style: this.style,
      directives: this.disable ? null : [{
        name: 'touch-pan',
        modifiers: {
          vertical: true,
          mightPrevent: true
        },
        value: this.__pull
      }]
    }, [h('div', {
      staticClass: 'pull-to-refresh-message row flex-center',
      'class': this.messageClass
    }, [h(QIcon["a" /* default */], {
      'class': {
        'rotate-180': this.state === 'pulled'
      },
      props: {
        name: this.$q.icon.pullToRefresh.arrow
      },
      directives: [{
        name: 'show',
        value: this.state !== 'refreshing'
      }]
    }), h(QIcon["a" /* default */], {
      staticClass: 'animate-spin',
      props: {
        name: this.refreshIcon || this.$q.icon.pullToRefresh.refresh
      },
      directives: [{
        name: 'show',
        value: this.state === 'refreshing'
      }]
    }), " ".concat(this.message)]), this.$slots.default])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/pull-to-refresh/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/radio/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/range/QRange.js








var dragType = {
  MIN: 0,
  RANGE: 1,
  MAX: 2
};
/* harmony default export */ var QRange = ({
  name: 'QRange',
  mixins: [SliderMixin],
  props: {
    value: {
      type: Object,
      default: function _default() {
        return {
          min: 0,
          max: 0
        };
      },
      validator: function validator(value) {
        return value.hasOwnProperty('min') && value.hasOwnProperty('max');
      }
    },
    dragRange: Boolean,
    dragOnlyRange: Boolean,
    leftLabelColor: String,
    leftLabelValue: String,
    rightLabelColor: String,
    rightLabelValue: String
  },
  data: function data() {
    return {
      model: Object.assign({}, this.value),
      dragging: false,
      currentMinPercentage: (this.value.min - this.min) / (this.max - this.min),
      currentMaxPercentage: (this.value.max - this.min) / (this.max - this.min)
    };
  },
  computed: {
    percentageMin: function percentageMin() {
      return this.snap ? (this.model.min - this.min) / (this.max - this.min) : this.currentMinPercentage;
    },
    percentageMax: function percentageMax() {
      return this.snap ? (this.model.max - this.min) / (this.max - this.min) : this.currentMaxPercentage;
    },
    activeTrackWidth: function activeTrackWidth() {
      return 100 * (this.percentageMax - this.percentageMin) + '%';
    },
    leftDisplayValue: function leftDisplayValue() {
      return this.leftLabelValue !== void 0 ? this.leftLabelValue : this.model.min;
    },
    rightDisplayValue: function rightDisplayValue() {
      return this.rightLabelValue !== void 0 ? this.rightLabelValue : this.model.max;
    },
    leftTooltipColor: function leftTooltipColor() {
      return this.leftLabelColor || this.labelColor;
    },
    rightTooltipColor: function rightTooltipColor() {
      return this.rightLabelColor || this.labelColor;
    }
  },
  watch: {
    'value.min': function valueMin(value) {
      this.model.min = value;
    },
    'value.max': function valueMax(value) {
      this.model.max = value;
    },
    'model.min': function modelMin(value) {
      if (this.dragging) {
        return;
      }

      if (value > this.model.max) {
        value = this.model.max;
      }

      this.currentMinPercentage = (value - this.min) / (this.max - this.min);
    },
    'model.max': function modelMax(value) {
      if (this.dragging) {
        return;
      }

      if (value < this.model.min) {
        value = this.model.min;
      }

      this.currentMaxPercentage = (value - this.min) / (this.max - this.min);
    },
    min: function min(value) {
      if (this.model.min < value) {
        this.__update({
          min: value
        });
      }

      if (this.model.max < value) {
        this.__update({
          max: value
        });
      }

      this.$nextTick(this.__validateProps);
    },
    max: function max(value) {
      if (this.model.min > value) {
        this.__update({
          min: value
        });
      }

      if (this.model.max > value) {
        this.__update({
          max: value
        });
      }

      this.$nextTick(this.__validateProps);
    },
    step: function step() {
      this.$nextTick(this.__validateProps);
    }
  },
  methods: {
    __getDragging: function __getDragging(event) {
      var container = this.$refs.handle,
          width = container.offsetWidth,
          sensitivity = (this.dragOnlyRange ? -1 : 1) * this.$refs.handleMin.offsetWidth / (2 * width);
      var dragging = {
        left: container.getBoundingClientRect().left,
        width: width,
        valueMin: this.model.min,
        valueMax: this.model.max,
        percentageMin: this.currentMinPercentage,
        percentageMax: this.currentMaxPercentage
      };
      var percentage = getPercentage(event, dragging, this.$q.i18n.rtl),
          type;

      if (percentage < this.currentMinPercentage + sensitivity) {
        type = dragType.MIN;
      } else if (percentage < this.currentMaxPercentage - sensitivity) {
        if (this.dragRange || this.dragOnlyRange) {
          type = dragType.RANGE;
          Object.assign(dragging, {
            offsetPercentage: percentage,
            offsetModel: getModel(percentage, this.min, this.max, this.step, this.computedDecimals),
            rangeValue: dragging.valueMax - dragging.valueMin,
            rangePercentage: this.currentMaxPercentage - this.currentMinPercentage
          });
        } else {
          type = this.currentMaxPercentage - percentage < percentage - this.currentMinPercentage ? dragType.MAX : dragType.MIN;
        }
      } else {
        type = dragType.MAX;
      }

      if (this.dragOnlyRange && type !== dragType.RANGE) {
        return false;
      }

      dragging.type = type;
      return dragging;
    },
    __move: function __move(event) {
      var dragging = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dragging;
      var percentage = getPercentage(event, dragging, this.$q.i18n.rtl),
          model = getModel(percentage, this.min, this.max, this.step, this.computedDecimals),
          pos;

      switch (dragging.type) {
        case dragType.MIN:
          if (percentage <= dragging.percentageMax) {
            pos = {
              minP: percentage,
              maxP: dragging.percentageMax,
              min: model,
              max: dragging.valueMax
            };
          } else {
            pos = {
              minP: dragging.percentageMax,
              maxP: percentage,
              min: dragging.valueMax,
              max: model
            };
          }

          break;

        case dragType.MAX:
          if (percentage >= dragging.percentageMin) {
            pos = {
              minP: dragging.percentageMin,
              maxP: percentage,
              min: dragging.valueMin,
              max: model
            };
          } else {
            pos = {
              minP: percentage,
              maxP: dragging.percentageMin,
              min: model,
              max: dragging.valueMin
            };
          }

          break;

        case dragType.RANGE:
          var percentageDelta = percentage - dragging.offsetPercentage,
              minP = Object(format["a" /* between */])(dragging.percentageMin + percentageDelta, 0, 1 - dragging.rangePercentage),
              modelDelta = model - dragging.offsetModel,
              min = Object(format["a" /* between */])(dragging.valueMin + modelDelta, this.min, this.max - dragging.rangeValue);
          pos = {
            minP: minP,
            maxP: minP + dragging.rangePercentage,
            min: parseFloat(min.toFixed(this.computedDecimals)),
            max: parseFloat((min + dragging.rangeValue).toFixed(this.computedDecimals))
          };
          break;
      }

      this.currentMinPercentage = pos.minP;
      this.currentMaxPercentage = pos.maxP;
      this.model = {
        min: pos.min,
        max: pos.max
      };
    },
    __end: function __end(event) {
      var dragging = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dragging;

      this.__move(event, dragging);

      this.currentMinPercentage = (this.model.min - this.min) / (this.max - this.min);
      this.currentMaxPercentage = (this.model.max - this.min) / (this.max - this.min);
    },
    __onKeyDown: function __onKeyDown(ev, type) {
      var keyCode = ev.keyCode;

      if (!this.editable || ![37, 40, 39, 38].includes(keyCode)) {
        return;
      }

      Object(utils_event["h" /* stopAndPrevent */])(ev);
      var decimals = this.computedDecimals,
          step = ev.ctrlKey ? 10 * this.computedStep : this.computedStep,
          offset = [37, 40].includes(keyCode) ? -step : step,
          model = decimals ? parseFloat((this.model[type] + offset).toFixed(decimals)) : this.model[type] + offset;
      this.model[type] = Object(format["a" /* between */])(model, type === 'min' ? this.min : this.model.min, type === 'max' ? this.max : this.model.max);
      this.currentMinPercentage = (this.model.min - this.min) / (this.max - this.min);
      this.currentMaxPercentage = (this.model.max - this.min) / (this.max - this.min);

      this.__update();
    },
    __onKeyUp: function __onKeyUp(ev, type) {
      var keyCode = ev.keyCode;

      if (!this.editable || ![37, 40, 39, 38].includes(keyCode)) {
        return;
      }

      this.__update(true);
    },
    __validateProps: function __validateProps() {
      if (this.min >= this.max) {
        console.error('Range error: min >= max', this.$el, this.min, this.max);
      } else if (notDivides((this.max - this.min) / this.step, this.computedDecimals)) {
        console.error('Range error: step must be a divisor of max - min', this.min, this.max, this.step);
      } else if (notDivides((this.model.min - this.min) / this.step, this.computedDecimals)) {
        console.error('Range error: step must be a divisor of initial value.min - min', this.model.min, this.min, this.step);
      } else if (notDivides((this.model.max - this.min) / this.step, this.computedDecimals)) {
        console.error('Range error: step must be a divisor of initial value.max - min', this.model.max, this.max, this.step);
      }
    },
    __getHandle: function __getHandle(h, lower, upper, edge, percentage, color, label) {
      var _style,
          _this = this;

      return h('div', {
        ref: "handle".concat(upper),
        staticClass: "q-slider-handle q-slider-handle-".concat(lower),
        style: (_style = {}, Object(defineProperty["a" /* default */])(_style, this.$q.i18n.rtl ? 'right' : 'left', "".concat(percentage * 100, "%")), Object(defineProperty["a" /* default */])(_style, "borderRadius", this.square ? '0' : '50%'), _style),
        'class': [edge ? 'handle-at-minimum' : null, {
          dragging: this.dragging
        }],
        attrs: {
          tabindex: this.$q.platform.is.desktop ? this.editable ? 0 : -1 : void 0
        },
        on: {
          keydown: function keydown(ev) {
            return _this.__onKeyDown(ev, lower);
          },
          keyup: function keyup(ev) {
            return _this.__onKeyUp(ev, lower);
          }
        }
      }, [this.label || this.labelAlways ? h(QChip["a" /* default */], {
        props: {
          pointing: 'down',
          square: true,
          dense: true,
          color: color
        },
        staticClass: 'q-slider-label no-pointer-events',
        'class': {
          'label-always': this.labelAlways
        }
      }, [label]) : null,  true ? h('div', {
        staticClass: 'q-slider-ring'
      }) : undefined]);
    },
    __getContent: function __getContent(h) {
      var _style2;

      return [h('div', {
        staticClass: 'q-slider-track active-track',
        style: (_style2 = {}, Object(defineProperty["a" /* default */])(_style2, this.$q.i18n.rtl ? 'right' : 'left', "".concat(this.percentageMin * 100, "%")), Object(defineProperty["a" /* default */])(_style2, "width", this.activeTrackWidth), _style2),
        'class': {
          dragging: this.dragging,
          'track-draggable': this.dragRange || this.dragOnlyRange
        }
      }), this.__getHandle(h, 'min', 'Min', !this.fillHandleAlways && this.model.min === this.min, this.percentageMin, this.leftTooltipColor, this.leftDisplayValue), this.__getHandle(h, 'max', 'Max', false, this.percentageMax, this.rightTooltipColor, this.rightDisplayValue)];
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/range/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/rating/QRating.js




/* harmony default export */ var QRating = ({
  name: 'QRating',
  props: {
    value: Number,
    max: {
      type: Number,
      default: 5
    },
    icon: String,
    color: String,
    size: String,
    readonly: Boolean,
    disable: Boolean
  },
  data: function data() {
    return {
      mouseModel: 0
    };
  },
  computed: {
    model: {
      get: function get() {
        return this.value;
      },
      set: function set(value) {
        var _this = this;

        this.$emit('input', value);
        this.$nextTick(function () {
          if (JSON.stringify(value) !== JSON.stringify(_this.value)) {
            _this.$emit('change', value);
          }
        });
      }
    },
    editable: function editable() {
      return !this.readonly && !this.disable;
    },
    classes: function classes() {
      var cls = [];
      this.disable && cls.push('disabled');
      this.editable && cls.push('editable');
      this.color && cls.push("text-".concat(this.color));
      return cls;
    }
  },
  methods: {
    set: function set(value) {
      if (this.editable) {
        var model = Object(format["a" /* between */])(parseInt(value, 10), 1, this.max);
        this.model = this.model === model ? 0 : model;
        this.mouseModel = 0;
      }
    },
    __setHoverValue: function __setHoverValue(value) {
      if (this.editable) {
        this.mouseModel = value;
      }
    }
  },
  render: function render(h) {
    var _this2 = this;

    var child = [],
        tabindex = this.editable ? 0 : -1;

    var _loop = function _loop(i) {
      child.push(h('span', {
        key: i,
        ref: "rt".concat(i),
        attrs: {
          tabindex: tabindex
        },
        on: {
          keydown: function keydown(e) {
            switch (Object(utils_event["b" /* getEventKey */])(e)) {
              case 13:
              case 32:
                _this2.set(i);

                return Object(utils_event["h" /* stopAndPrevent */])(e);

              case 37:
              case 40:
                if (_this2.$refs["rt".concat(i - 1)]) {
                  _this2.$refs["rt".concat(i - 1)].focus();
                }

                return Object(utils_event["h" /* stopAndPrevent */])(e);

              case 39:
              case 38:
                if (_this2.$refs["rt".concat(i + 1)]) {
                  _this2.$refs["rt".concat(i + 1)].focus();
                }

                return Object(utils_event["h" /* stopAndPrevent */])(e);
            }
          }
        }
      }, [h(QIcon["a" /* default */], {
        props: {
          name: _this2.icon || _this2.$q.icon.rating.icon
        },
        'class': {
          active: !_this2.mouseModel && _this2.model >= i || _this2.mouseModel && _this2.mouseModel >= i,
          exselected: _this2.mouseModel && _this2.model >= i && _this2.mouseModel < i,
          hovered: _this2.mouseModel === i
        },
        attrs: {
          tabindex: -1
        },
        nativeOn: {
          click: function click() {
            return _this2.set(i);
          },
          mouseover: function mouseover() {
            return _this2.__setHoverValue(i);
          },
          mouseout: function mouseout() {
            _this2.mouseModel = 0;
          },
          focus: function focus() {
            return _this2.__setHoverValue(i);
          },
          blur: function blur() {
            _this2.mouseModel = 0;
          }
        }
      })]));
    };

    for (var i = 1; i <= this.max; i++) {
      _loop(i);
    }

    return h('div', {
      staticClass: 'q-rating row inline items-center',
      'class': this.classes,
      style: this.size ? "font-size: ".concat(this.size) : ''
    }, child);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/rating/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/scroll-area/QScrollArea.js








/* harmony default export */ var QScrollArea = ({
  name: 'QScrollArea',
  directives: {
    TouchPan: touch_pan["a" /* default */]
  },
  props: {
    thumbStyle: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    contentStyle: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    contentActiveStyle: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    delay: {
      type: Number,
      default: 1000
    }
  },
  data: function data() {
    return {
      active: false,
      hover: false,
      containerHeight: 0,
      scrollPosition: 0,
      scrollHeight: 0
    };
  },
  computed: {
    thumbHidden: function thumbHidden() {
      return this.scrollHeight <= this.containerHeight || !this.active && !this.hover;
    },
    thumbHeight: function thumbHeight() {
      return Math.round(Object(format["a" /* between */])(this.containerHeight * this.containerHeight / this.scrollHeight, 50, this.containerHeight));
    },
    style: function style() {
      var top = this.scrollPercentage * (this.containerHeight - this.thumbHeight);
      return Object.assign({}, this.thumbStyle, {
        top: "".concat(top, "px"),
        height: "".concat(this.thumbHeight, "px")
      });
    },
    mainStyle: function mainStyle() {
      return this.thumbHidden ? this.contentStyle : this.contentActiveStyle;
    },
    scrollPercentage: function scrollPercentage() {
      var p = Object(format["a" /* between */])(this.scrollPosition / (this.scrollHeight - this.containerHeight), 0, 1);
      return Math.round(p * 10000) / 10000;
    }
  },
  methods: {
    setScrollPosition: function setScrollPosition(offset, duration) {
      Object(utils_scroll["g" /* setScrollPosition */])(this.$refs.target, offset, duration);
    },
    __updateContainer: function __updateContainer(_ref) {
      var height = _ref.height;

      if (this.containerHeight !== height) {
        this.containerHeight = height;

        this.__setActive(true, true);
      }
    },
    __updateScroll: function __updateScroll(_ref2) {
      var position = _ref2.position;

      if (this.scrollPosition !== position) {
        this.scrollPosition = position;

        this.__setActive(true, true);
      }
    },
    __updateScrollHeight: function __updateScrollHeight(_ref3) {
      var height = _ref3.height;

      if (this.scrollHeight !== height) {
        this.scrollHeight = height;

        this.__setActive(true, true);
      }
    },
    __panThumb: function __panThumb(e) {
      if (e.isFirst) {
        this.refPos = this.scrollPosition;

        this.__setActive(true, true);

        document.body.classList.add('non-selectable');

        if (document.selection) {
          document.selection.empty();
        } else if (window.getSelection) {
          window.getSelection().removeAllRanges();
        }
      }

      if (e.isFinal) {
        this.__setActive(false);

        document.body.classList.remove('non-selectable');
      }

      var multiplier = (this.scrollHeight - this.containerHeight) / (this.containerHeight - this.thumbHeight);
      this.$refs.target.scrollTop = this.refPos + (e.direction === 'down' ? 1 : -1) * e.distance.y * multiplier;
    },
    __panContainer: function __panContainer(e) {
      if (e.isFirst) {
        this.refPos = this.scrollPosition;

        this.__setActive(true, true);
      }

      if (e.isFinal) {
        this.__setActive(false);
      }

      var pos = this.refPos + (e.direction === 'down' ? -1 : 1) * e.distance.y;
      this.$refs.target.scrollTop = pos;

      if (pos > 0 && pos + this.containerHeight < this.scrollHeight) {
        e.evt.preventDefault();
      }
    },
    __mouseWheel: function __mouseWheel(e) {
      var el = this.$refs.target;
      el.scrollTop += Object(utils_event["d" /* getMouseWheelDistance */])(e).y;

      if (el.scrollTop > 0 && el.scrollTop + this.containerHeight < this.scrollHeight) {
        e.preventDefault();
      }
    },
    __setActive: function __setActive(active, timer) {
      clearTimeout(this.timer);

      if (active === this.active) {
        if (active && this.timer) {
          this.__startTimer();
        }

        return;
      }

      if (active) {
        this.active = true;

        if (timer) {
          this.__startTimer();
        }
      } else {
        this.active = false;
      }
    },
    __startTimer: function __startTimer() {
      var _this = this;

      this.timer = setTimeout(function () {
        _this.active = false;
        _this.timer = null;
      }, this.delay);
    }
  },
  render: function render(h) {
    var _this2 = this;

    if (!this.$q.platform.is.desktop) {
      return h('div', {
        staticClass: 'q-scroll-area relative-position',
        style: this.contentStyle
      }, [h('div', {
        ref: 'target',
        staticClass: 'scroll relative-position fit'
      }, this.$slots.default)]);
    }

    return h('div', {
      staticClass: 'q-scrollarea relative-position',
      on: {
        mouseenter: function mouseenter() {
          _this2.hover = true;
        },
        mouseleave: function mouseleave() {
          _this2.hover = false;
        }
      }
    }, [h('div', {
      ref: 'target',
      staticClass: 'scroll relative-position overflow-hidden fit',
      on: {
        wheel: this.__mouseWheel
      },
      directives: [{
        name: 'touch-pan',
        modifiers: {
          vertical: true,
          noMouse: true,
          mightPrevent: true
        },
        value: this.__panContainer
      }]
    }, [h('div', {
      staticClass: 'absolute full-width',
      style: this.mainStyle
    }, [h(QResizeObservable["a" /* default */], {
      on: {
        resize: this.__updateScrollHeight
      }
    }), this.$slots.default]), h(QScrollObservable["a" /* default */], {
      on: {
        scroll: this.__updateScroll
      }
    })]), h(QResizeObservable["a" /* default */], {
      on: {
        resize: this.__updateContainer
      }
    }), h('div', {
      staticClass: 'q-scrollarea-thumb absolute-right',
      style: this.style,
      'class': {
        'invisible-thumb': this.thumbHidden
      },
      directives: [{
        name: 'touch-pan',
        modifiers: {
          vertical: true,
          prevent: true
        },
        value: this.__panThumb
      }]
    })]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/scroll-area/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/search/QSearch.js
var QSearch = __webpack_require__("6186");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/search/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/select/QSelect.js
var QSelect = __webpack_require__("5931");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/select/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/slide-transition/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/slider/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/spinner/spinner-mixin.js
var spinner_mixin = __webpack_require__("0b3d");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerAudio.js

/* harmony default export */ var QSpinnerAudio = ({
  name: 'QSpinnerAudio',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'fill': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 55 80',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'matrix(1 0 0 -1 0 80)'
      }
    }, [h('rect', {
      attrs: {
        'width': '10',
        'height': '20',
        'rx': '3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '4.3s',
        'values': '20;45;57;80;64;32;66;45;64;23;66;13;64;56;34;34;2;23;76;79;20',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '15',
        'width': '10',
        'height': '80',
        'rx': '3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '2s',
        'values': '80;55;33;5;75;23;73;33;12;14;60;80',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '30',
        'width': '10',
        'height': '50',
        'rx': '3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '1.4s',
        'values': '50;34;78;23;56;23;34;76;80;54;21;50',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '45',
        'width': '10',
        'height': '30',
        'rx': '3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '2s',
        'values': '30;45;13;80;56;72;45;76;34;23;67;30',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerBall.js

/* harmony default export */ var QSpinnerBall = ({
  name: 'QSpinnerBall',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'stroke': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 57 57',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'translate(1 1)',
        'stroke-width': '2',
        'fill': 'none',
        'fill-rule': 'evenodd'
      }
    }, [h('circle', {
      attrs: {
        'cx': '5',
        'cy': '50',
        'r': '5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'cy',
        'begin': '0s',
        'dur': '2.2s',
        'values': '50;5;50;50',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'cx',
        'begin': '0s',
        'dur': '2.2s',
        'values': '5;27;49;5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '27',
        'cy': '5',
        'r': '5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'cy',
        'begin': '0s',
        'dur': '2.2s',
        'from': '5',
        'to': '5',
        'values': '5;50;50;5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'cx',
        'begin': '0s',
        'dur': '2.2s',
        'from': '27',
        'to': '27',
        'values': '27;49;5;27',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '49',
        'cy': '50',
        'r': '5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'cy',
        'begin': '0s',
        'dur': '2.2s',
        'values': '50;50;5;50',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'cx',
        'from': '49',
        'to': '49',
        'begin': '0s',
        'dur': '2.2s',
        'values': '49;5;27;49',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerBars.js

/* harmony default export */ var QSpinnerBars = ({
  name: 'QSpinnerBars',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'fill': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 135 140',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('rect', {
      attrs: {
        'y': '10',
        'width': '15',
        'height': '120',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0.5s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0.5s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '30',
        'y': '10',
        'width': '15',
        'height': '120',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0.25s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0.25s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '60',
        'width': '15',
        'height': '140',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '90',
        'y': '10',
        'width': '15',
        'height': '120',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0.25s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0.25s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('rect', {
      attrs: {
        'x': '120',
        'y': '10',
        'width': '15',
        'height': '120',
        'rx': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'begin': '0.5s',
        'dur': '1s',
        'values': '120;110;100;90;80;70;60;50;40;140;120',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'begin': '0.5s',
        'dur': '1s',
        'values': '10;15;20;25;30;35;40;45;50;0;10',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerCircles.js

/* harmony default export */ var QSpinnerCircles = ({
  name: 'QSpinnerCircles',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'fill': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 135 135',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('path', {
      attrs: {
        'd': 'M67.447 58c5.523 0 10-4.477 10-10s-4.477-10-10-10-10 4.477-10 10 4.477 10 10 10zm9.448 9.447c0 5.523 4.477 10 10 10 5.522 0 10-4.477 10-10s-4.478-10-10-10c-5.523 0-10 4.477-10 10zm-9.448 9.448c-5.523 0-10 4.477-10 10 0 5.522 4.477 10 10 10s10-4.478 10-10c0-5.523-4.477-10-10-10zM58 67.447c0-5.523-4.477-10-10-10s-10 4.477-10 10 4.477 10 10 10 10-4.477 10-10z'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 67 67',
        'to': '-360 67 67',
        'dur': '2.5s',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M28.19 40.31c6.627 0 12-5.374 12-12 0-6.628-5.373-12-12-12-6.628 0-12 5.372-12 12 0 6.626 5.372 12 12 12zm30.72-19.825c4.686 4.687 12.284 4.687 16.97 0 4.686-4.686 4.686-12.284 0-16.97-4.686-4.687-12.284-4.687-16.97 0-4.687 4.686-4.687 12.284 0 16.97zm35.74 7.705c0 6.627 5.37 12 12 12 6.626 0 12-5.373 12-12 0-6.628-5.374-12-12-12-6.63 0-12 5.372-12 12zm19.822 30.72c-4.686 4.686-4.686 12.284 0 16.97 4.687 4.686 12.285 4.686 16.97 0 4.687-4.686 4.687-12.284 0-16.97-4.685-4.687-12.283-4.687-16.97 0zm-7.704 35.74c-6.627 0-12 5.37-12 12 0 6.626 5.373 12 12 12s12-5.374 12-12c0-6.63-5.373-12-12-12zm-30.72 19.822c-4.686-4.686-12.284-4.686-16.97 0-4.686 4.687-4.686 12.285 0 16.97 4.686 4.687 12.284 4.687 16.97 0 4.687-4.685 4.687-12.283 0-16.97zm-35.74-7.704c0-6.627-5.372-12-12-12-6.626 0-12 5.373-12 12s5.374 12 12 12c6.628 0 12-5.373 12-12zm-19.823-30.72c4.687-4.686 4.687-12.284 0-16.97-4.686-4.686-12.284-4.686-16.97 0-4.687 4.686-4.687 12.284 0 16.97 4.686 4.687 12.284 4.687 16.97 0z'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 67 67',
        'to': '360 67 67',
        'dur': '8s',
        'repeatCount': 'indefinite'
      }
    })])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerComment.js

/* harmony default export */ var QSpinnerComment = ({
  name: 'QSpinnerComment',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'xmlns': 'http://www.w3.org/2000/svg',
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid'
      }
    }, [h('rect', {
      attrs: {
        'x': '0',
        'y': '0',
        'width': '100',
        'height': '100',
        'fill': 'none'
      }
    }), h('path', {
      attrs: {
        'd': 'M78,19H22c-6.6,0-12,5.4-12,12v31c0,6.6,5.4,12,12,12h37.2c0.4,3,1.8,5.6,3.7,7.6c2.4,2.5,5.1,4.1,9.1,4 c-1.4-2.1-2-7.2-2-10.3c0-0.4,0-0.8,0-1.3h8c6.6,0,12-5.4,12-12V31C90,24.4,84.6,19,78,19z',
        'fill': 'currentColor'
      }
    }), h('circle', {
      attrs: {
        'cx': '30',
        'cy': '47',
        'r': '5',
        'fill': '#fff'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'values': '0;1;1',
        'keyTimes': '0;0.2;1',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '50',
        'cy': '47',
        'r': '5',
        'fill': '#fff'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'values': '0;0;1;1',
        'keyTimes': '0;0.2;0.4;1',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '70',
        'cy': '47',
        'r': '5',
        'fill': '#fff'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'values': '0;0;1;1',
        'keyTimes': '0;0.4;0.6;1',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerCube.js

/* harmony default export */ var QSpinnerCube = ({
  name: 'QSpinnerCube',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'xmlns': 'http://www.w3.org/2000/svg',
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid'
      }
    }, [h('rect', {
      attrs: {
        'x': '0',
        'y': '0',
        'width': '100',
        'height': '100',
        'fill': 'none'
      }
    }), h('g', {
      attrs: {
        'transform': 'translate(25 25)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-20',
        'y': '-20',
        'width': '40',
        'height': '40',
        'fill': 'currentColor',
        'opacity': '0.9'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '1.5',
        'to': '1',
        'repeatCount': 'indefinite',
        'begin': '0s',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.2 0.8 0.2 0.8',
        'keyTimes': '0;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(75 25)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-20',
        'y': '-20',
        'width': '40',
        'height': '40',
        'fill': 'currentColor',
        'opacity': '0.8'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '1.5',
        'to': '1',
        'repeatCount': 'indefinite',
        'begin': '0.1s',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.2 0.8 0.2 0.8',
        'keyTimes': '0;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(25 75)'
      }
    }, [h('rect', {
      staticClass: 'cube',
      attrs: {
        'x': '-20',
        'y': '-20',
        'width': '40',
        'height': '40',
        'fill': 'currentColor',
        'opacity': '0.7'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '1.5',
        'to': '1',
        'repeatCount': 'indefinite',
        'begin': '0.3s',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.2 0.8 0.2 0.8',
        'keyTimes': '0;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(75 75)'
      }
    }, [h('rect', {
      staticClass: 'cube',
      attrs: {
        'x': '-20',
        'y': '-20',
        'width': '40',
        'height': '40',
        'fill': 'currentColor',
        'opacity': '0.6'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '1.5',
        'to': '1',
        'repeatCount': 'indefinite',
        'begin': '0.2s',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.2 0.8 0.2 0.8',
        'keyTimes': '0;1'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerDots.js

/* harmony default export */ var QSpinnerDots = ({
  name: 'QSpinnerDots',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'fill': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 120 30',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('circle', {
      attrs: {
        'cx': '15',
        'cy': '15',
        'r': '15'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'from': '15',
        'to': '15',
        'begin': '0s',
        'dur': '0.8s',
        'values': '15;9;15',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'from': '1',
        'to': '1',
        'begin': '0s',
        'dur': '0.8s',
        'values': '1;.5;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '60',
        'cy': '15',
        'r': '9',
        'fill-opacity': '.3'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'from': '9',
        'to': '9',
        'begin': '0s',
        'dur': '0.8s',
        'values': '9;15;9',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'from': '.5',
        'to': '.5',
        'begin': '0s',
        'dur': '0.8s',
        'values': '.5;1;.5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '105',
        'cy': '15',
        'r': '15'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'from': '15',
        'to': '15',
        'begin': '0s',
        'dur': '0.8s',
        'values': '15;9;15',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'from': '1',
        'to': '1',
        'begin': '0s',
        'dur': '0.8s',
        'values': '1;.5;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerFacebook.js

/* harmony default export */ var QSpinnerFacebook = ({
  name: 'QSpinnerFacebook',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 100 100',
        'xmlns': 'http://www.w3.org/2000/svg',
        'preserveAspectRatio': 'xMidYMid'
      }
    }, [h('g', {
      attrs: {
        'transform': 'translate(20 50)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-10',
        'y': '-30',
        'width': '20',
        'height': '60',
        'fill': 'currentColor',
        'opacity': '0.6'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '2',
        'to': '1',
        'begin': '0s',
        'repeatCount': 'indefinite',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.1 0.9 0.4 1',
        'keyTimes': '0;1',
        'values': '2;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(50 50)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-10',
        'y': '-30',
        'width': '20',
        'height': '60',
        'fill': 'currentColor',
        'opacity': '0.8'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '2',
        'to': '1',
        'begin': '0.1s',
        'repeatCount': 'indefinite',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.1 0.9 0.4 1',
        'keyTimes': '0;1',
        'values': '2;1'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(80 50)'
      }
    }, [h('rect', {
      attrs: {
        'x': '-10',
        'y': '-30',
        'width': '20',
        'height': '60',
        'fill': 'currentColor',
        'opacity': '0.9'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'scale',
        'from': '2',
        'to': '1',
        'begin': '0.2s',
        'repeatCount': 'indefinite',
        'dur': '1s',
        'calcMode': 'spline',
        'keySplines': '0.1 0.9 0.4 1',
        'keyTimes': '0;1',
        'values': '2;1'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerGears.js

/* harmony default export */ var QSpinnerGears = ({
  name: 'QSpinnerGears',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'translate(-20,-20)'
      }
    }, [h('path', {
      attrs: {
        'd': 'M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z',
        'fill': 'currentColor'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '90 50 50',
        'to': '0 50 50',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(20,20) rotate(15 50 50)'
      }
    }, [h('path', {
      attrs: {
        'd': 'M79.9,52.6C80,51.8,80,50.9,80,50s0-1.8-0.1-2.6l-5.1-0.4c-0.3-2.4-0.9-4.6-1.8-6.7l4.2-2.9c-0.7-1.6-1.6-3.1-2.6-4.5 L70,35c-1.4-1.9-3.1-3.5-4.9-4.9l2.2-4.6c-1.4-1-2.9-1.9-4.5-2.6L59.8,27c-2.1-0.9-4.4-1.5-6.7-1.8l-0.4-5.1C51.8,20,50.9,20,50,20 s-1.8,0-2.6,0.1l-0.4,5.1c-2.4,0.3-4.6,0.9-6.7,1.8l-2.9-4.1c-1.6,0.7-3.1,1.6-4.5,2.6l2.1,4.6c-1.9,1.4-3.5,3.1-5,4.9l-4.5-2.1 c-1,1.4-1.9,2.9-2.6,4.5l4.1,2.9c-0.9,2.1-1.5,4.4-1.8,6.8l-5,0.4C20,48.2,20,49.1,20,50s0,1.8,0.1,2.6l5,0.4 c0.3,2.4,0.9,4.7,1.8,6.8l-4.1,2.9c0.7,1.6,1.6,3.1,2.6,4.5l4.5-2.1c1.4,1.9,3.1,3.5,5,4.9l-2.1,4.6c1.4,1,2.9,1.9,4.5,2.6l2.9-4.1 c2.1,0.9,4.4,1.5,6.7,1.8l0.4,5.1C48.2,80,49.1,80,50,80s1.8,0,2.6-0.1l0.4-5.1c2.3-0.3,4.6-0.9,6.7-1.8l2.9,4.2 c1.6-0.7,3.1-1.6,4.5-2.6L65,69.9c1.9-1.4,3.5-3,4.9-4.9l4.6,2.2c1-1.4,1.9-2.9,2.6-4.5L73,59.8c0.9-2.1,1.5-4.4,1.8-6.7L79.9,52.6 z M50,65c-8.3,0-15-6.7-15-15c0-8.3,6.7-15,15-15s15,6.7,15,15C65,58.3,58.3,65,50,65z',
        'fill': 'currentColor'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '90 50 50',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerGrid.js

/* harmony default export */ var QSpinnerGrid = ({
  name: 'QSpinnerGrid',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'fill': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 105 105',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('circle', {
      attrs: {
        'cx': '12.5',
        'cy': '12.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '0s',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '12.5',
        'cy': '52.5',
        'r': '12.5',
        'fill-opacity': '.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '100ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '52.5',
        'cy': '12.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '300ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '52.5',
        'cy': '52.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '600ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '92.5',
        'cy': '12.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '800ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '92.5',
        'cy': '52.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '400ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '12.5',
        'cy': '92.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '700ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '52.5',
        'cy': '92.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '500ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '92.5',
        'cy': '92.5',
        'r': '12.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '200ms',
        'dur': '1s',
        'values': '1;.2;1',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerHearts.js

/* harmony default export */ var QSpinnerHearts = ({
  name: 'QSpinnerHearts',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'fill': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 140 64',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('path', {
      attrs: {
        'd': 'M30.262 57.02L7.195 40.723c-5.84-3.976-7.56-12.06-3.842-18.063 3.715-6 11.467-7.65 17.306-3.68l4.52 3.76 2.6-5.274c3.716-6.002 11.47-7.65 17.304-3.68 5.84 3.97 7.56 12.054 3.842 18.062L34.49 56.118c-.897 1.512-2.793 1.915-4.228.9z',
        'fill-opacity': '.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '0s',
        'dur': '1.4s',
        'values': '0.5;1;0.5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M105.512 56.12l-14.44-24.272c-3.716-6.008-1.996-14.093 3.843-18.062 5.835-3.97 13.588-2.322 17.306 3.68l2.6 5.274 4.52-3.76c5.84-3.97 13.593-2.32 17.308 3.68 3.718 6.003 1.998 14.088-3.842 18.064L109.74 57.02c-1.434 1.014-3.33.61-4.228-.9z',
        'fill-opacity': '.5'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'fill-opacity',
        'begin': '0.7s',
        'dur': '1.4s',
        'values': '0.5;1;0.5',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M67.408 57.834l-23.01-24.98c-5.864-6.15-5.864-16.108 0-22.248 5.86-6.14 15.37-6.14 21.234 0L70 16.168l4.368-5.562c5.863-6.14 15.375-6.14 21.235 0 5.863 6.14 5.863 16.098 0 22.247l-23.007 24.98c-1.43 1.556-3.757 1.556-5.188 0z'
      }
    })]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerHourglass.js

/* harmony default export */ var QSpinnerHourglass = ({
  name: 'QSpinnerHourglass',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', [h('path', {
      staticClass: 'glass',
      attrs: {
        'fill': 'none',
        'stroke': 'currentColor',
        'stroke-width': '5',
        'stroke-miterlimit': '10',
        'd': 'M58.4,51.7c-0.9-0.9-1.4-2-1.4-2.3s0.5-0.4,1.4-1.4 C70.8,43.8,79.8,30.5,80,15.5H70H30H20c0.2,15,9.2,28.1,21.6,32.3c0.9,0.9,1.4,1.2,1.4,1.5s-0.5,1.6-1.4,2.5 C29.2,56.1,20.2,69.5,20,85.5h10h40h10C79.8,69.5,70.8,55.9,58.4,51.7z'
      }
    }), h('clipPath', {
      attrs: {
        'id': 'uil-hourglass-clip1'
      }
    }, [h('rect', {
      staticClass: 'clip',
      attrs: {
        'x': '15',
        'y': '20',
        'width': '70',
        'height': '25'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'from': '25',
        'to': '0',
        'dur': '1s',
        'repeatCount': 'indefinite',
        'vlaues': '25;0;0',
        'keyTimes': '0;0.5;1'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'from': '20',
        'to': '45',
        'dur': '1s',
        'repeatCount': 'indefinite',
        'vlaues': '20;45;45',
        'keyTimes': '0;0.5;1'
      }
    })])]), h('clipPath', {
      attrs: {
        'id': 'uil-hourglass-clip2'
      }
    }, [h('rect', {
      staticClass: 'clip',
      attrs: {
        'x': '15',
        'y': '55',
        'width': '70',
        'height': '25'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'height',
        'from': '0',
        'to': '25',
        'dur': '1s',
        'repeatCount': 'indefinite',
        'vlaues': '0;25;25',
        'keyTimes': '0;0.5;1'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'y',
        'from': '80',
        'to': '55',
        'dur': '1s',
        'repeatCount': 'indefinite',
        'vlaues': '80;55;55',
        'keyTimes': '0;0.5;1'
      }
    })])]), h('path', {
      staticClass: 'sand',
      attrs: {
        'd': 'M29,23c3.1,11.4,11.3,19.5,21,19.5S67.9,34.4,71,23H29z',
        'clip-path': 'url(#uil-hourglass-clip1)',
        'fill': 'currentColor'
      }
    }), h('path', {
      staticClass: 'sand',
      attrs: {
        'd': 'M71.6,78c-3-11.6-11.5-20-21.5-20s-18.5,8.4-21.5,20H71.6z',
        'clip-path': 'url(#uil-hourglass-clip2)',
        'fill': 'currentColor'
      }
    }), h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '180 50 50',
        'repeatCount': 'indefinite',
        'dur': '1s',
        'values': '0 50 50;0 50 50;180 50 50',
        'keyTimes': '0;0.7;1'
      }
    })])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerInfinity.js

/* harmony default export */ var QSpinnerInfinity = ({
  name: 'QSpinnerInfinity',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid'
      }
    }, [h('path', {
      attrs: {
        'd': 'M24.3,30C11.4,30,5,43.3,5,50s6.4,20,19.3,20c19.3,0,32.1-40,51.4-40C88.6,30,95,43.3,95,50s-6.4,20-19.3,20C56.4,70,43.6,30,24.3,30z',
        'fill': 'none',
        'stroke': 'currentColor',
        'stroke-width': '8',
        'stroke-dasharray': '10.691205342610678 10.691205342610678',
        'stroke-dashoffset': '0'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-dashoffset',
        'from': '0',
        'to': '21.382410685221355',
        'begin': '0',
        'dur': '2s',
        'repeatCount': 'indefinite',
        'fill': 'freeze'
      }
    })])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinner.ios.js

/* harmony default export */ var QSpinner_ios = ({
  name: 'QSpinnerIos',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'stroke': 'currentColor',
        'fill': 'currentColor',
        'viewBox': '0 0 64 64'
      }
    }, [h('g', {
      attrs: {
        'stroke-width': '4',
        'stroke-linecap': 'round'
      }
    }, [h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(180)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(210)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '0;1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(240)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.1;0;1;.85;.7;.65;.55;.45;.35;.25;.15;.1',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(270)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.15;.1;0;1;.85;.7;.65;.55;.45;.35;.25;.15',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(300)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.25;.15;.1;0;1;.85;.7;.65;.55;.45;.35;.25',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(330)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.35;.25;.15;.1;0;1;.85;.7;.65;.55;.45;.35',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(0)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.45;.35;.25;.15;.1;0;1;.85;.7;.65;.55;.45',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(30)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.55;.45;.35;.25;.15;.1;0;1;.85;.7;.65;.55',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(60)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.65;.55;.45;.35;.25;.15;.1;0;1;.85;.7;.65',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(90)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.7;.65;.55;.45;.35;.25;.15;.1;0;1;.85;.7',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(120)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1;.85',
        'repeatCount': 'indefinite'
      }
    })]), h('line', {
      attrs: {
        'y1': '17',
        'y2': '29',
        'transform': 'translate(32,32) rotate(150)'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'dur': '750ms',
        'values': '1;.85;.7;.65;.55;.45;.35;.25;.15;.1;0;1',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinner.mat.js
var QSpinner_mat = __webpack_require__("7668");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerOval.js

/* harmony default export */ var QSpinnerOval = ({
  name: 'QSpinnerOval',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'stroke': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 38 38',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'translate(1 1)',
        'stroke-width': '2',
        'fill': 'none',
        'fill-rule': 'evenodd'
      }
    }, [h('circle', {
      attrs: {
        'stroke-opacity': '.5',
        'cx': '18',
        'cy': '18',
        'r': '18'
      }
    }), h('path', {
      attrs: {
        'd': 'M36 18c0-9.94-8.06-18-18-18'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 18 18',
        'to': '360 18 18',
        'dur': '1s',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerPie.js

/* harmony default export */ var QSpinnerPie = ({
  name: 'QSpinnerPie',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('path', {
      attrs: {
        'd': 'M0 50A50 50 0 0 1 50 0L50 50L0 50',
        'fill': 'currentColor',
        'opacity': '0.5'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '360 50 50',
        'dur': '0.8s',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M50 0A50 50 0 0 1 100 50L50 50L50 0',
        'fill': 'currentColor',
        'opacity': '0.5'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '360 50 50',
        'dur': '1.6s',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M100 50A50 50 0 0 1 50 100L50 50L100 50',
        'fill': 'currentColor',
        'opacity': '0.5'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '360 50 50',
        'dur': '2.4s',
        'repeatCount': 'indefinite'
      }
    })]), h('path', {
      attrs: {
        'd': 'M50 100A50 50 0 0 1 0 50L50 50L50 100',
        'fill': 'currentColor',
        'opacity': '0.5'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 50 50',
        'to': '360 50 50',
        'dur': '3.2s',
        'repeatCount': 'indefinite'
      }
    })])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerPuff.js

/* harmony default export */ var QSpinnerPuff = ({
  name: 'QSpinnerPuff',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'stroke': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 44 44',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'fill': 'none',
        'fill-rule': 'evenodd',
        'stroke-width': '2'
      }
    }, [h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '1'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '0s',
        'dur': '1.8s',
        'values': '1; 20',
        'calcMode': 'spline',
        'keyTimes': '0; 1',
        'keySplines': '0.165, 0.84, 0.44, 1',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'begin': '0s',
        'dur': '1.8s',
        'values': '1; 0',
        'calcMode': 'spline',
        'keyTimes': '0; 1',
        'keySplines': '0.3, 0.61, 0.355, 1',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '1'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '-0.9s',
        'dur': '1.8s',
        'values': '1; 20',
        'calcMode': 'spline',
        'keyTimes': '0; 1',
        'keySplines': '0.165, 0.84, 0.44, 1',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'begin': '-0.9s',
        'dur': '1.8s',
        'values': '1; 0',
        'calcMode': 'spline',
        'keyTimes': '0; 1',
        'keySplines': '0.3, 0.61, 0.355, 1',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerRadio.js

/* harmony default export */ var QSpinnerRadio = ({
  name: 'QSpinnerRadio',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 100 100',
        'preserveAspectRatio': 'xMidYMid',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'transform': 'scale(0.55)'
      }
    }, [h('circle', {
      attrs: {
        'cx': '30',
        'cy': '150',
        'r': '30',
        'fill': 'currentColor'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'dur': '1s',
        'begin': '0',
        'repeatCount': 'indefinite',
        'keyTimes': '0;0.5;1',
        'values': '0;1;1'
      }
    })]), h('path', {
      attrs: {
        'd': 'M90,150h30c0-49.7-40.3-90-90-90v30C63.1,90,90,116.9,90,150z',
        'fill': 'currentColor'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'dur': '1s',
        'begin': '0.1',
        'repeatCount': 'indefinite',
        'keyTimes': '0;0.5;1',
        'values': '0;1;1'
      }
    })]), h('path', {
      attrs: {
        'd': 'M150,150h30C180,67.2,112.8,0,30,0v30C96.3,30,150,83.7,150,150z',
        'fill': 'currentColor'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'opacity',
        'from': '0',
        'to': '1',
        'dur': '1s',
        'begin': '0.2',
        'repeatCount': 'indefinite',
        'keyTimes': '0;0.5;1',
        'values': '0;1;1'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerRings.js

/* harmony default export */ var QSpinnerRings = ({
  name: 'QSpinnerRings',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'stroke': 'currentColor',
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 45 45',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('g', {
      attrs: {
        'fill': 'none',
        'fill-rule': 'evenodd',
        'transform': 'translate(1 1)',
        'stroke-width': '2'
      }
    }, [h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '1.5s',
        'dur': '3s',
        'values': '6;22',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'begin': '1.5s',
        'dur': '3s',
        'values': '1;0',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-width',
        'begin': '1.5s',
        'dur': '3s',
        'values': '2;0',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '6'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '3s',
        'dur': '3s',
        'values': '6;22',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-opacity',
        'begin': '3s',
        'dur': '3s',
        'values': '1;0',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    }), h('animate', {
      attrs: {
        'attributeName': 'stroke-width',
        'begin': '3s',
        'dur': '3s',
        'values': '2;0',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'cx': '22',
        'cy': '22',
        'r': '8'
      }
    }, [h('animate', {
      attrs: {
        'attributeName': 'r',
        'begin': '0s',
        'dur': '1.5s',
        'values': '6;1;2;3;4;5;6',
        'calcMode': 'linear',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/QSpinnerTail.js

/* harmony default export */ var QSpinnerTail = ({
  name: 'QSpinnerTail',
  mixins: [spinner_mixin["a" /* default */]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'viewBox': '0 0 38 38',
        'xmlns': 'http://www.w3.org/2000/svg'
      }
    }, [h('defs', [h('linearGradient', {
      attrs: {
        'x1': '8.042%',
        'y1': '0%',
        'x2': '65.682%',
        'y2': '23.865%',
        'id': 'a'
      }
    }, [h('stop', {
      attrs: {
        'stop-color': 'currentColor',
        'stop-opacity': '0',
        'offset': '0%'
      }
    }), h('stop', {
      attrs: {
        'stop-color': 'currentColor',
        'stop-opacity': '.631',
        'offset': '63.146%'
      }
    }), h('stop', {
      attrs: {
        'stop-color': 'currentColor',
        'offset': '100%'
      }
    })])]), h('g', {
      attrs: {
        'transform': 'translate(1 1)',
        'fill': 'none',
        'fill-rule': 'evenodd'
      }
    }, [h('path', {
      attrs: {
        'd': 'M36 18c0-9.94-8.06-18-18-18',
        'stroke': 'url(#a)',
        'stroke-width': '2'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 18 18',
        'to': '360 18 18',
        'dur': '0.9s',
        'repeatCount': 'indefinite'
      }
    })]), h('circle', {
      attrs: {
        'fill': 'currentColor',
        'cx': '36',
        'cy': '18',
        'r': '1'
      }
    }, [h('animateTransform', {
      attrs: {
        'attributeName': 'transform',
        'type': 'rotate',
        'from': '0 18 18',
        'to': '360 18 18',
        'dur': '0.9s',
        'repeatCount': 'indefinite'
      }
    })])])]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/spinner/index.js























// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/stepper/StepTab.js


/* harmony default export */ var StepTab = ({
  name: 'QStepTab',
  directives: {
    Ripple: ripple["a" /* default */]
  },
  props: ['vm'],
  computed: {
    hasNavigation: function hasNavigation() {
      return !this.vm.__stepper.noHeaderNavigation;
    },
    classes: function classes() {
      return {
        'step-error': this.vm.error,
        'step-active': this.vm.active,
        'step-done': this.vm.done,
        'step-navigation': this.vm.done && this.hasNavigation,
        'step-waiting': this.vm.waiting,
        'step-disabled': this.vm.disable,
        'step-colored': this.vm.active || this.vm.done,
        'items-center': !this.vm.__stepper.vertical,
        'items-start': this.vm.__stepper.vertical,
        'q-stepper-first': this.vm.first,
        'q-stepper-last': this.vm.last
      };
    }
  },
  methods: {
    __select: function __select() {
      if (this.hasNavigation) {
        this.vm.select();
      }
    }
  },
  render: function render(h) {
    var icon = this.vm.stepIcon ? h(QIcon["a" /* default */], {
      props: {
        name: this.vm.stepIcon
      }
    }) : h('span', [this.vm.innerOrder + 1]);
    return h('div', {
      staticClass: 'q-stepper-tab col-grow flex no-wrap relative-position',
      'class': this.classes,
      on: {
        click: this.__select
      },
      directives:  true && this.hasNavigation ? [{
        name: 'ripple',
        value: this.vm.done
      }] : null
    }, [h('div', {
      staticClass: 'q-stepper-dot row flex-center q-stepper-line relative-position'
    }, [h('span', {
      staticClass: 'row flex-center'
    }, [icon])]), this.vm.title ? h('div', {
      staticClass: 'q-stepper-label q-stepper-line relative-position'
    }, [h('div', {
      staticClass: 'q-stepper-title'
    }, [this.vm.title]), h('div', {
      staticClass: 'q-stepper-subtitle'
    }, [this.vm.subtitle])]) : null]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/stepper/QStep.js





/* harmony default export */ var QStep = ({
  name: 'QStep',
  inject: {
    __stepper: {
      default: function _default() {
        console.error('QStep needs to be child of QStepper');
      }
    }
  },
  props: {
    name: {
      type: [Number, String],
      default: function _default() {
        return Object(uid["a" /* default */])();
      }
    },
    default: Boolean,
    title: {
      type: String,
      required: true
    },
    subtitle: String,
    icon: String,
    order: [Number, String],
    error: Boolean,
    activeIcon: String,
    errorIcon: String,
    doneIcon: String,
    disable: Boolean
  },
  watch: {
    order: function order() {
      this.__stepper.__sortSteps();
    }
  },
  data: function data() {
    return {
      innerOrder: 0,
      first: false,
      last: false
    };
  },
  computed: {
    stepIcon: function stepIcon() {
      var data = this.__stepper;

      if (this.active) {
        return this.activeIcon || data.activeIcon || this.$q.icon.stepper.active;
      }

      if (this.error) {
        return this.errorIcon || data.errorIcon || this.$q.icon.stepper.error;
      }

      if (this.done && !this.disable) {
        return this.doneIcon || data.doneIcon || this.$q.icon.stepper.done;
      }

      return this.icon;
    },
    actualOrder: function actualOrder() {
      return parseInt(this.order || this.innerOrder, 10);
    },
    active: function active() {
      return this.__stepper.step === this.name;
    },
    done: function done() {
      return !this.disable && this.__stepper.currentOrder > this.innerOrder;
    },
    waiting: function waiting() {
      return !this.disable && this.__stepper.currentOrder < this.innerOrder;
    },
    style: function style() {
      var ord = this.actualOrder;
      return {
        '-webkit-box-ordinal-group': ord,
        '-ms-flex-order': ord,
        order: ord
      };
    },
    classes: function classes() {
      if (!this.__stepper.vertical) {
        var cls = [];
        !this.active && cls.push('hidden');
        this.__stepper.animation !== null && cls.push(this.__stepper.animation);
        return cls;
      }
    }
  },
  methods: {
    select: function select() {
      if (this.done) {
        this.__stepper.goToStep(this.name);
      }
    },
    __getContainer: function __getContainer(h) {
      var content = this.active ? h('div', {
        staticClass: 'q-stepper-step-content',
        'class': this.classes
      }, [h('div', {
        staticClass: 'q-stepper-step-inner'
      }, this.$slots.default)]) : null;
      return this.__stepper.vertical ? h(QSlideTransition, [content]) : content;
    }
  },
  mounted: function mounted() {
    this.__stepper.__registerStep(this);

    if (this.default) {
      this.select();
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.__stepper.__unregisterStep(this);
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-stepper-step',
      style: this.style
    }, [this.__stepper.vertical ? h(StepTab, {
      props: {
        vm: this
      }
    }) : null, this.__getContainer(h)]);
  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.sort.js
var es6_array_sort = __webpack_require__("55dd");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find-index.js
var es6_array_find_index = __webpack_require__("20d6");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/stepper/QStepper.js








/* harmony default export */ var QStepper = ({
  name: 'QStepper',
  props: {
    value: [Number, String],
    color: {
      type: String,
      default: 'primary'
    },
    vertical: Boolean,
    alternativeLabels: Boolean,
    noHeaderNavigation: Boolean,
    contractable: Boolean,
    doneIcon: Boolean,
    activeIcon: Boolean,
    errorIcon: Boolean
  },
  data: function data() {
    return {
      animation: null,
      step: this.value || null,
      steps: []
    };
  },
  provide: function provide() {
    return {
      __stepper: this
    };
  },
  watch: {
    value: function value(v) {
      this.goToStep(v);
    },
    step: function step(cur, old) {
      if (!this.vertical) {
        var curIndex = this.steps.findIndex(function (step) {
          return step.name === cur;
        }),
            oldIndex = this.steps.findIndex(function (step) {
          return step.name === old;
        });
        this.animation = curIndex < oldIndex ? 'animate-fade-left' : curIndex > oldIndex ? 'animate-fade-right' : null;
      }
    }
  },
  computed: {
    classes: function classes() {
      var cls = ["q-stepper-".concat(this.vertical ? 'vertical' : 'horizontal'), "text-".concat(this.color)];
      this.contractable && cls.push("q-stepper-contractable");
      return cls;
    },
    hasSteps: function hasSteps() {
      return this.steps.length > 0;
    },
    currentStep: function currentStep() {
      var _this = this;

      if (this.hasSteps) {
        return this.steps.find(function (step) {
          return step.name === _this.step;
        });
      }
    },
    currentOrder: function currentOrder() {
      if (this.currentStep) {
        return this.currentStep.innerOrder;
      }
    },
    length: function length() {
      return this.steps.length;
    }
  },
  methods: {
    goToStep: function goToStep(value) {
      var _this2 = this;

      if (this.step === value || value === void 0) {
        return;
      }

      this.step = value;
      this.$emit('input', value);
      this.$emit('step', value);
      this.$nextTick(function () {
        if (JSON.stringify(value) !== JSON.stringify(_this2.value)) {
          _this2.$emit('change', value);
        }
      });
    },
    next: function next() {
      this.__go(1);
    },
    previous: function previous() {
      this.__go(-1);
    },
    reset: function reset() {
      if (this.hasSteps) {
        this.goToStep(this.steps[0].name);
      }
    },
    __go: function __go(offset) {
      var name,
          index = this.currentOrder;

      if (index === void 0) {
        if (!this.hasSteps) {
          return;
        }

        name = this.steps[0].name;
      } else {
        do {
          index += offset;
        } while (index >= 0 && index < this.length - 1 && this.steps[index].disable);

        if (index < 0 || index > this.length - 1 || this.steps[index].disable) {
          return;
        }

        name = this.steps[index].name;
      }

      this.goToStep(name);
    },
    __sortSteps: function __sortSteps() {
      var _this3 = this;

      this.steps.sort(function (a, b) {
        return a.actualOrder - b.actualOrder;
      });
      var last = this.steps.length - 1;
      this.steps.forEach(function (step, index) {
        step.innerOrder = index;
        step.first = index === 0;
        step.last = index === last;
      });
      this.$nextTick(function () {
        if (!_this3.steps.some(function (step) {
          return step.active;
        })) {
          _this3.goToStep(_this3.steps[0].name);
        }
      });
    },
    __registerStep: function __registerStep(vm) {
      this.steps.push(vm);

      this.__sortSteps();

      return this;
    },
    __unregisterStep: function __unregisterStep(vm) {
      this.steps = this.steps.filter(function (step) {
        return step !== vm;
      });
    }
  },
  created: function created() {
    this.__sortSteps = Object(frame_debounce["a" /* default */])(this.__sortSteps);
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-stepper column overflow-hidden relative-position',
      'class': this.classes
    }, [this.vertical ? null : h('div', {
      staticClass: 'q-stepper-header row items-stretch justify-between shadow-1',
      'class': {
        'alternative-labels': this.alternativeLabels
      }
    }, this.steps.map(function (step) {
      return h(StepTab, {
        key: step.name,
        props: {
          vm: step
        }
      });
    })), this.$slots.default]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/stepper/QStepperNavigation.js
/* harmony default export */ var QStepperNavigation = ({
  name: 'QStepperNavigation',
  render: function render(h) {
    return h('div', {
      staticClass: 'q-stepper-nav order-last row items-center'
    }, [this.$slots.left, h('div', {
      staticClass: 'col'
    }), this.$slots.default]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/stepper/index.js




// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tab/tab-mixin.js






/* harmony default export */ var tab_mixin = ({
  directives: {
    Ripple: ripple["a" /* default */]
  },
  props: {
    label: String,
    icon: String,
    disable: Boolean,
    hidden: Boolean,
    hide: {
      type: String,
      default: ''
    },
    name: {
      type: String,
      default: function _default() {
        return Object(uid["a" /* default */])();
      }
    },
    alert: Boolean,
    count: [Number, String],
    color: String,
    tabindex: Number
  },
  inject: {
    data: {
      default: function _default() {
        console.error('QTab/QRouteTab components need to be child of QTabs');
      }
    },
    selectTab: {}
  },
  watch: {
    active: function active(val) {
      if (val) {
        this.$emit('select', this.name);
      }
    }
  },
  computed: {
    active: function active() {
      return this.data.tabName === this.name;
    },
    classes: function classes() {
      var cls = {
        active: this.active,
        hidden: this.hidden,
        disabled: this.disable,
        'q-tab-full': this.icon && this.label,
        'q-tab-only-label': !this.icon && this.label,
        'hide-none': !this.hide,
        'hide-icon': this.hide === 'icon',
        'hide-label': this.hide === 'label'
      };
      var color = this.data.inverted ? this.color || this.data.textColor || this.data.color : this.color;

      if (color) {
        cls["text-".concat(color)] =  false ? undefined : true;
      }

      return cls;
    },
    barStyle: function barStyle() {
      if (!this.active || !this.data.highlight) {
        return 'display: none;';
      }
    },
    computedTabIndex: function computedTabIndex() {
      return this.disable || this.active ? -1 : this.tabindex || 0;
    }
  },
  methods: {
    __getTabMeta: function __getTabMeta(h) {
      if (this.count) {
        return [h(QChip["a" /* default */], {
          staticClass: 'q-tab-meta',
          props: {
            floating: true
          }
        }, [this.count])];
      }

      if (this.alert) {
        return [h('div', {
          staticClass: 'q-tab-meta q-dot'
        })];
      }
    },
    __getTabContent: function __getTabContent(h) {
      var child = [];
      this.icon && child.push(h('div', {
        staticClass: 'q-tab-icon-parent relative-position'
      }, [h(QIcon["a" /* default */], {
        staticClass: 'q-tab-icon',
        props: {
          name: this.icon
        }
      }), this.__getTabMeta(h)]));
      this.label && child.push(h('div', {
        staticClass: 'q-tab-label-parent relative-position'
      }, [h('div', {
        staticClass: 'q-tab-label'
      }, [this.label]), this.__getTabMeta(h)]));
      child = child.concat(this.$slots.default);

      if (true) {
        child.push(h('div', {
          staticClass: 'q-tabs-bar',
          style: this.barStyle,
          'class': this.data.underlineClass
        }));
      }

      child.push(h('div', {
        staticClass: 'q-tab-focus-helper absolute-full',
        attrs: {
          tabindex: this.computedTabIndex
        }
      }));
      return child;
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tab/QRouteTab.js




/* harmony default export */ var QRouteTab = ({
  name: 'QRouteTab',
  mixins: [tab_mixin, router_link["a" /* RouterLinkMixin */]],
  inject: {
    selectTabRouter: {}
  },
  watch: {
    $route: function $route() {
      this.checkIfSelected();
    }
  },
  methods: {
    select: function select() {
      this.$emit('click', this.name);

      if (!this.disable) {
        this.$el.dispatchEvent(router_link["b" /* routerLinkEvent */]);
        this.selectTabRouter({
          value: this.name,
          selected: true
        });
      }
    },
    checkIfSelected: function checkIfSelected() {
      var _this = this;

      this.$nextTick(function () {
        if (_this.$el.classList.contains('q-router-link-exact-active')) {
          _this.selectTabRouter({
            value: _this.name,
            selectable: true,
            exact: true
          });
        } else if (_this.$el.classList.contains('q-router-link-active')) {
          var path = _this.$router.resolve(_this.to, undefined, _this.append);

          _this.selectTabRouter({
            value: _this.name,
            selectable: true,
            priority: path.href.length
          });
        } else if (_this.active) {
          _this.selectTabRouter({
            value: null
          });
        }
      });
    }
  },
  mounted: function mounted() {
    this.checkIfSelected();
  },
  render: function render(h) {
    var _this2 = this;

    return h('router-link', {
      props: {
        tag: 'a',
        to: this.to,
        exact: this.exact,
        append: this.append,
        replace: this.replace,
        event: router_link["c" /* routerLinkEventName */],
        activeClass: 'q-router-link-active',
        exactActiveClass: 'q-router-link-exact-active'
      },
      attrs: {
        tabindex: -1
      },
      nativeOn: {
        click: this.select,
        keyup: function keyup(e) {
          return e.keyCode === 13 && _this2.select(e);
        }
      },
      staticClass: 'q-link q-tab column flex-center relative-position',
      'class': this.classes,
      directives:  true ? [{
        name: 'ripple'
      }] : undefined
    }, this.__getTabContent(h));
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tab/QTab.js


/* harmony default export */ var QTab = ({
  name: 'QTab',
  mixins: [tab_mixin],
  props: {
    default: Boolean
  },
  methods: {
    select: function select() {
      this.$emit('click', this.name);

      if (!this.disable) {
        this.selectTab(this.name);
      }
    }
  },
  mounted: function mounted() {
    if (this.default && !this.disable) {
      this.select();
    }
  },
  render: function render(h) {
    var _this = this;

    return h('div', {
      staticClass: 'q-tab column flex-center relative-position',
      'class': this.classes,
      attrs: {
        'data-tab-name': this.name
      },
      on: {
        click: this.select,
        keyup: function keyup(e) {
          return e.keyCode === 13 && _this.select(e);
        }
      },
      directives:  true ? [{
        name: 'ripple'
      }] : undefined
    }, this.__getTabContent(h));
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tab/QTabPane.js

/* harmony default export */ var QTabPane = ({
  name: 'QTabPane',
  inject: {
    data: {
      default: function _default() {
        console.error('QTabPane needs to be child of QTabs');
      }
    }
  },
  props: {
    name: {
      type: String,
      required: true
    },
    keepAlive: Boolean
  },
  data: function data() {
    return {
      shown: false
    };
  },
  computed: {
    active: function active() {
      return this.data.tabName === this.name;
    },
    classes: function classes() {
      return {
        hidden: !this.active,
        'animate-fade-left': this.data.direction === 'left',
        'animate-fade-right': this.data.direction === 'right'
      };
    }
  },
  render: function render(h) {
    var node = h('div', {
      staticClass: 'q-tab-pane',
      'class': this.classes
    }, this.$slots.default);

    if (this.keepAlive) {
      if (!this.shown && !this.active) {
        return;
      }

      this.shown = true;
      return node;
    } else {
      this.shown = this.active;

      if (this.active) {
        return node;
      }
    }
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/directives/touch-swipe.js
var touch_swipe = __webpack_require__("28c4");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tab/QTabs.js











var scrollNavigationSpeed = 5,
    debounceDelay = 50;

function getUnderlineClass(v) {
  if (v) {
    return "text-".concat(v);
  }
}

/* harmony default export */ var QTabs = ({
  name: 'QTabs',
  provide: function provide() {
    return {
      data: this.data,
      selectTab: this.selectTab,
      selectTabRouter: this.selectTabRouter
    };
  },
  directives: {
    TouchSwipe: touch_swipe["a" /* default */]
  },
  props: {
    value: String,
    align: {
      type: String,
      default:  false ? undefined : 'left',
      validator: function validator(v) {
        return ['left', 'center', 'right', 'justify'].includes(v);
      }
    },
    position: {
      type: String,
      default: 'top',
      validator: function validator(v) {
        return ['top', 'bottom'].includes(v);
      }
    },
    color: {
      type: String,
      default: 'primary'
    },
    textColor: String,
    inverted: Boolean,
    twoLines: Boolean,
    glossy: Boolean,
    animated: Boolean,
    swipeable: Boolean,
    panesContainerClass: String,
    underlineColor: String
  },
  data: function data() {
    return {
      currentEl: null,
      posbar: {
        width: 0,
        left: 0
      },
      data: {
        highlight: true,
        tabName: this.value || '',
        color: this.color,
        textColor: this.textColor,
        inverted: this.inverted,
        underlineClass: getUnderlineClass(this.underlineColor),
        direction: null
      }
    };
  },
  watch: {
    value: function value(name) {
      this.selectTab(name);
    },
    color: function color(v) {
      this.data.color = v;
    },
    textColor: function textColor(v) {
      this.data.textColor = v;
    },
    inverted: function inverted(v) {
      this.data.inverted = v;
    },
    underlineColor: function underlineColor(v) {
      this.data.underlineClass = getUnderlineClass(v);
    }
  },
  computed: {
    classes: function classes() {
      return ["q-tabs-position-".concat(this.position), "q-tabs-".concat(this.inverted ? 'inverted' : 'normal'), this.twoLines ? 'q-tabs-two-lines' : ''];
    },
    innerClasses: function innerClasses() {
      var cls = ["q-tabs-align-".concat(this.align)];
      this.glossy && cls.push('glossy');

      if (this.inverted) {
        cls.push("text-".concat(this.textColor || this.color));
      } else {
        cls.push("bg-".concat(this.color));
        cls.push("text-".concat(this.textColor || 'white'));
      }

      return cls;
    },
    posbarClasses: function posbarClasses() {
      var cls = [];
      this.inverted && cls.push("text-".concat(this.textColor || this.color));
      this.data.highlight && cls.push('highlight');
      return cls;
    }
  },
  methods: {
    go: function go(offset) {
      var index = 0;

      if (this.data.tabName) {
        var el = this.$refs.scroller.querySelector("[data-tab-name=\"".concat(this.data.tabName, "\"]"));

        if (el) {
          index = Array.prototype.indexOf.call(this.$refs.scroller.children, el);
        }
      }

      var nodes = this.$refs.scroller.querySelectorAll('[data-tab-name]');
      index += offset;

      if (index > -1 && index < nodes.length) {
        this.selectTab(nodes[index].getAttribute('data-tab-name'));
      }
    },
    previous: function previous() {
      this.go(-1);
    },
    next: function next() {
      this.go(1);
    },
    selectTab: function selectTab(value) {
      if (this.data.tabName === value) {
        return;
      }

      this.data.tabName = value;

      var el = this.__getTabElByName(value);

      if (el) {
        this.__scrollToTab(el);

        this.currentEl = el;

        if (this.oldEl) {
          if (this.animated) {
            var children = this.$refs.scroller.children;
            this.data.direction = Array.prototype.indexOf.call(children, el) < Array.prototype.indexOf.call(children, this.oldEl) ? 'left' : 'right';
          }

          if (true) {
            this.__repositionBar();
          }
        } else {
          this.oldEl = el;
        }
      } else {
        this.oldEl = null;
        this.data.direction = null;
      }

      this.$emit('input', value, this.data.direction);
      this.$emit('select', value, this.data.direction);
    },
    selectTabRouter: function selectTabRouter(params) {
      var _this = this;

      var value = params.value,
          selectable = params.selectable,
          exact = params.exact,
          selected = params.selected,
          priority = params.priority,
          first = !this.buffer.length,
          existingIndex = first ? -1 : this.buffer.findIndex(function (t) {
        return t.value === value;
      });

      if (existingIndex > -1) {
        var buffer = this.buffer[existingIndex];
        exact && (buffer.exact = exact);
        selectable && (buffer.selectable = selectable);
        selected && (buffer.selected = selected);
        priority && (buffer.priority = priority);
      } else {
        this.buffer.push(params);
      }

      if (first) {
        this.bufferTimer = setTimeout(function () {
          var tab = _this.buffer.find(function (t) {
            return t.exact && t.selected;
          }) || _this.buffer.find(function (t) {
            return t.selectable && t.selected;
          }) || _this.buffer.find(function (t) {
            return t.exact;
          }) || _this.buffer.filter(function (t) {
            return t.selectable;
          }).sort(function (t1, t2) {
            return t2.priority - t1.priority;
          })[0] || _this.buffer[0];

          _this.buffer.length = 0;

          _this.selectTab(tab.value);
        }, 100);
      }
    },
    __swipe: function __swipe(touch) {
      this.go(touch.direction === 'left' ? 1 : -1);
    },
    __repositionBar: function __repositionBar() {
      var _this2 = this;

      clearTimeout(this.timer);
      var needsUpdate = false;
      var ref = this.$refs.posbar,
          el = this.currentEl;

      if (this.data.highlight !== false) {
        this.data.highlight = false;
        needsUpdate = true;
      }

      if (!el) {
        this.finalPosbar = {
          width: 0,
          left: 0
        };

        this.__setPositionBar(0, 0);

        return;
      }

      var offsetReference = ref.parentNode.offsetLeft;

      if (needsUpdate && this.oldEl) {
        this.__setPositionBar(this.oldEl.getBoundingClientRect().width, this.oldEl.offsetLeft - offsetReference);
      }

      this.timer = setTimeout(function () {
        var width = el.getBoundingClientRect().width,
            left = el.offsetLeft - offsetReference;
        ref.classList.remove('contract');
        _this2.oldEl = el;
        _this2.finalPosbar = {
          width: width,
          left: left
        };

        _this2.__setPositionBar(_this2.posbar.left < left ? left + width - _this2.posbar.left : _this2.posbar.left + _this2.posbar.width - left, _this2.posbar.left < left ? _this2.posbar.left : left);
      }, 20);
    },
    __setPositionBar: function __setPositionBar() {
      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (this.posbar.width === width && this.posbar.left === left) {
        this.__updatePosbarTransition();

        return;
      }

      this.posbar = {
        width: width,
        left: left
      };
      var xPos = this.$q.i18n.rtl ? left + width : left;
      this.$refs.posbar.style.transform = "translateX(".concat(xPos, "px) scaleX(").concat(width, ")");
    },
    __updatePosbarTransition: function __updatePosbarTransition() {
      if (this.finalPosbar.width === this.posbar.width && this.finalPosbar.left === this.posbar.left) {
        this.posbar = {};

        if (this.data.highlight !== true) {
          this.data.highlight = true;
        }

        return;
      }

      this.$refs.posbar.classList.add('contract');

      this.__setPositionBar(this.finalPosbar.width, this.finalPosbar.left);
    },
    __redraw: function __redraw() {
      if (!this.$q.platform.is.desktop) {
        return;
      }

      this.scrollerWidth = Object(dom["e" /* width */])(this.$refs.scroller);

      if (this.scrollerWidth === 0 && this.$refs.scroller.scrollWidth === 0) {
        return;
      }

      if (this.scrollerWidth + 5 < this.$refs.scroller.scrollWidth) {
        this.$refs.tabs.classList.add('scrollable');
        this.scrollable = true;

        this.__updateScrollIndicator();
      } else {
        this.$refs.tabs.classList.remove('scrollable');
        this.scrollable = false;
      }
    },
    __updateScrollIndicator: function __updateScrollIndicator() {
      if (!this.$q.platform.is.desktop || !this.scrollable) {
        return;
      }

      var action = this.$refs.scroller.scrollLeft + Object(dom["e" /* width */])(this.$refs.scroller) + 5 >= this.$refs.scroller.scrollWidth ? 'add' : 'remove';
      this.$refs.leftScroll.classList[this.$refs.scroller.scrollLeft <= 0 ? 'add' : 'remove']('disabled');
      this.$refs.rightScroll.classList[action]('disabled');
    },
    __getTabElByName: function __getTabElByName(value) {
      var tab = this.$children.find(function (child) {
        return child.name === value && child.$el && child.$el.nodeType === 1;
      });

      if (tab) {
        return tab.$el;
      }
    },
    __findTabAndScroll: function __findTabAndScroll(name, noAnimation) {
      var _this3 = this;

      setTimeout(function () {
        _this3.__scrollToTab(_this3.__getTabElByName(name), noAnimation);
      }, debounceDelay * 4);
    },
    __scrollToTab: function __scrollToTab(tab, noAnimation) {
      if (!tab || !this.scrollable) {
        return;
      }

      var contentRect = this.$refs.scroller.getBoundingClientRect(),
          rect = tab.getBoundingClientRect(),
          tabWidth = rect.width,
          offset = rect.left - contentRect.left;

      if (offset < 0) {
        if (noAnimation) {
          this.$refs.scroller.scrollLeft += offset;
        } else {
          this.__animScrollTo(this.$refs.scroller.scrollLeft + offset);
        }

        return;
      }

      offset += tabWidth - this.$refs.scroller.offsetWidth;

      if (offset > 0) {
        if (noAnimation) {
          this.$refs.scroller.scrollLeft += offset;
        } else {
          this.__animScrollTo(this.$refs.scroller.scrollLeft + offset);
        }
      }
    },
    __animScrollTo: function __animScrollTo(value) {
      var _this4 = this;

      this.__stopAnimScroll();

      this.__scrollTowards(value);

      this.scrollTimer = setInterval(function () {
        if (_this4.__scrollTowards(value)) {
          _this4.__stopAnimScroll();
        }
      }, 5);
    },
    __scrollToStart: function __scrollToStart() {
      this.__animScrollTo(0);
    },
    __scrollToEnd: function __scrollToEnd() {
      this.__animScrollTo(9999);
    },
    __stopAnimScroll: function __stopAnimScroll() {
      clearInterval(this.scrollTimer);
    },
    __scrollTowards: function __scrollTowards(value) {
      var scrollPosition = this.$refs.scroller.scrollLeft,
          direction = value < scrollPosition ? -1 : 1,
          done = false;
      scrollPosition += direction * scrollNavigationSpeed;

      if (scrollPosition < 0) {
        done = true;
        scrollPosition = 0;
      } else if (direction === -1 && scrollPosition <= value || direction === 1 && scrollPosition >= value) {
        done = true;
        scrollPosition = value;
      }

      this.$refs.scroller.scrollLeft = scrollPosition;
      return done;
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-tabs flex no-wrap overflow-hidden',
      'class': this.classes
    }, [h('div', {
      staticClass: 'q-tabs-head row',
      ref: 'tabs',
      'class': this.innerClasses
    }, [h('div', {
      ref: 'scroller',
      staticClass: 'q-tabs-scroller row no-wrap'
    }, [this.$slots.title,  true ? h('div', {
      staticClass: 'relative-position self-stretch q-tabs-global-bar-container',
      'class': this.posbarClasses
    }, [h('div', {
      ref: 'posbar',
      staticClass: 'q-tabs-bar q-tabs-global-bar',
      'class': this.data.underlineClass,
      on: {
        transitionend: this.__updatePosbarTransition
      }
    })]) : undefined]), h('div', {
      ref: 'leftScroll',
      staticClass: 'row flex-center q-tabs-left-scroll',
      on: {
        mousedown: this.__scrollToStart,
        touchstart: this.__scrollToStart,
        mouseup: this.__stopAnimScroll,
        mouseleave: this.__stopAnimScroll,
        touchend: this.__stopAnimScroll
      }
    }, [h(QIcon["a" /* default */], {
      props: {
        name: this.$q.icon.tabs.left
      }
    })]), h('div', {
      ref: 'rightScroll',
      staticClass: 'row flex-center q-tabs-right-scroll',
      on: {
        mousedown: this.__scrollToEnd,
        touchstart: this.__scrollToEnd,
        mouseup: this.__stopAnimScroll,
        mouseleave: this.__stopAnimScroll,
        touchend: this.__stopAnimScroll
      }
    }, [h(QIcon["a" /* default */], {
      props: {
        name: this.$q.icon.tabs.right
      }
    })])]), h('div', {
      staticClass: 'q-tabs-panes',
      'class': this.panesContainerClass,
      directives: this.swipeable ? [{
        name: 'touch-swipe',
        value: this.__swipe
      }] : null
    }, this.$slots.default)]);
  },
  created: function created() {
    this.timer = null;
    this.scrollTimer = null;
    this.bufferTimer = null;
    this.buffer = [];
    this.scrollable = !this.$q.platform.is.desktop;
    this.__redraw = debounce(this.__redraw, debounceDelay);
    this.__updateScrollIndicator = debounce(this.__updateScrollIndicator, debounceDelay);
  },
  mounted: function mounted() {
    var _this5 = this;

    this.$nextTick(function () {
      if (!_this5.$refs.scroller) {
        return;
      }

      _this5.$refs.scroller.addEventListener('scroll', _this5.__updateScrollIndicator, utils_event["f" /* listenOpts */].passive);

      window.addEventListener('resize', _this5.__redraw, utils_event["f" /* listenOpts */].passive);

      if (_this5.data.tabName !== '' && _this5.value) {
        _this5.selectTab(_this5.value);
      }

      _this5.__redraw();

      _this5.__findTabAndScroll(_this5.data.tabName, true);
    });
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.timer);
    clearTimeout(this.bufferTimer);

    this.__stopAnimScroll();

    this.$refs.scroller.removeEventListener('scroll', this.__updateScrollIndicator, utils_event["f" /* listenOpts */].passive);
    window.removeEventListener('resize', this.__redraw, utils_event["f" /* listenOpts */].passive);

    this.__redraw.cancel();

    this.__updateScrollIndicator.cancel();
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tab/index.js





// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/table/QTable.js + 15 modules
var QTable = __webpack_require__("c604");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/table/QTh.js
var QTh = __webpack_require__("62a9");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/QTr.js
/* harmony default export */ var QTr = ({
  name: 'QTr',
  props: {
    props: Object
  },
  render: function render(h) {
    return h('tr', !this.props || this.props.header ? {} : {
      'class': this.props.__trClass
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/QTd.js

/* harmony default export */ var QTd = ({
  name: 'QTd',
  props: {
    props: Object,
    autoWidth: Boolean
  },
  render: function render(h) {
    if (!this.props) {
      return h('td', {
        'class': {
          'q-table-col-auto-width': this.autoWidth
        }
      }, this.$slots.default);
    }

    var col;
    var name = this.$vnode.key;

    if (name) {
      col = this.props.colsMap[name];

      if (!col) {
        return;
      }
    } else {
      col = this.props.col;
    }

    return h('td', {
      'class': [col.__tdClass, {
        'q-table-col-auto-width': this.autoWidth
      }]
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/QTableColumns.js


/* harmony default export */ var QTableColumns = ({
  name: 'QTableColumns',
  props: {
    value: {
      type: Array,
      required: true
    },
    label: String,
    columns: {
      type: Array,
      required: true
    },
    color: String,
    dark: Boolean
  },
  computed: {
    computedOptions: function computedOptions() {
      return this.columns.filter(function (col) {
        return !col.required;
      }).map(function (col) {
        return {
          value: col.name,
          label: col.label
        };
      });
    }
  },
  render: function render(h) {
    var _this = this;

    return h(QSelect["a" /* default */], {
      props: {
        multiple: true,
        toggle: true,
        value: this.value,
        options: this.computedOptions,
        displayValue: this.label || this.$q.i18n.table.columns,
        color: this.color,
        dark: this.dark,
        hideUnderline: true
      },
      on: {
        input: function input(v) {
          _this.$emit('input', v);
        },
        change: function change(v) {
          _this.$emit('change', v);
        }
      }
    });
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/index.js






// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/timeline/QTimeline.js
/* harmony default export */ var QTimeline = ({
  name: 'QTimeline',
  provide: function provide() {
    return {
      __timeline: this
    };
  },
  props: {
    color: {
      type: String,
      default: 'primary'
    },
    responsive: Boolean,
    noHover: Boolean,
    dark: Boolean
  },
  render: function render(h) {
    return h('ul', {
      staticClass: 'q-timeline',
      'class': {
        'q-timeline-dark': this.dark,
        'q-timeline-responsive': this.responsive,
        'q-timeline-hover': !this.noHover
      }
    }, this.$slots.default);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/timeline/QTimelineEntry.js



/* harmony default export */ var QTimelineEntry = ({
  name: 'QTimelineEntry',
  inject: {
    __timeline: {
      default: function _default() {
        console.error('QTimelineEntry needs to be child of QTimeline');
      }
    }
  },
  props: {
    heading: Boolean,
    tag: {
      type: String,
      default: 'h3'
    },
    side: {
      type: String,
      default: 'right',
      validator: function validator(v) {
        return ['left', 'right'].includes(v);
      }
    },
    icon: String,
    color: String,
    title: String,
    subtitle: String
  },
  computed: {
    colorClass: function colorClass() {
      return "text-".concat(this.color || this.__timeline.color);
    },
    classes: function classes() {
      return ["q-timeline-entry-".concat(this.side === 'left' ? 'left' : 'right'), this.icon ? 'q-timeline-entry-with-icon' : ''];
    }
  },
  render: function render(h) {
    if (this.heading) {
      return h('div', {
        staticClass: 'q-timeline-heading'
      }, [h('div'), h('div'), h(this.tag, {
        staticClass: 'q-timeline-heading-title'
      }, this.$slots.default)]);
    }

    return h('li', {
      staticClass: "q-timeline-entry",
      'class': this.classes
    }, [this.$slots.subtitle || h('div', {
      staticClass: 'q-timeline-subtitle'
    }, [h('span', this.subtitle)]), h('div', {
      staticClass: 'q-timeline-dot',
      'class': this.colorClass
    }, [this.icon ? h(QIcon["a" /* default */], {
      props: {
        name: this.icon
      }
    }) : null]), h('div', {
      staticClass: 'q-timeline-content'
    }, (this.$slots.title || [h('h6', {
      staticClass: 'q-timeline-title'
    }, [this.title])]).concat(this.$slots.default))]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/timeline/index.js



// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/toggle/index.js


// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/toolbar/QToolbar.js
var QToolbar = __webpack_require__("f30c");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/toolbar/QToolbarTitle.js
var QToolbarTitle = __webpack_require__("ce67");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/toolbar/index.js



// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tooltip/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.link.js
var es6_string_link = __webpack_require__("b54a");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tree/QTree.js










/* harmony default export */ var QTree = ({
  name: 'QTree',
  directives: {
    Ripple: ripple["a" /* default */]
  },
  props: {
    nodes: Array,
    nodeKey: {
      type: String,
      required: true
    },
    labelKey: {
      type: String,
      default: 'label'
    },
    color: {
      type: String,
      default: 'grey'
    },
    controlColor: String,
    textColor: String,
    dark: Boolean,
    icon: String,
    tickStrategy: {
      type: String,
      default: 'none',
      validator: function validator(v) {
        return ['none', 'strict', 'leaf', 'leaf-filtered'].includes(v);
      }
    },
    ticked: Array,
    expanded: Array,
    selected: {},
    defaultExpandAll: Boolean,
    accordion: Boolean,
    filter: String,
    filterMethod: {
      type: Function,
      default: function _default(node, filter) {
        var filt = filter.toLowerCase();
        return node[this.labelKey] && node[this.labelKey].toLowerCase().indexOf(filt) > -1;
      }
    },
    duration: Number,
    noNodesLabel: String,
    noResultsLabel: String
  },
  computed: {
    hasRipple: function hasRipple() {
      return  true && !this.noRipple;
    },
    classes: function classes() {
      return ["text-".concat(this.color), {
        'q-tree-dark': this.dark
      }];
    },
    hasSelection: function hasSelection() {
      return this.selected !== void 0;
    },
    computedIcon: function computedIcon() {
      return this.icon || this.$q.icon.tree.icon;
    },
    computedControlColor: function computedControlColor() {
      return this.controlColor || this.color;
    },
    contentClass: function contentClass() {
      return "text-".concat(this.textColor || (this.dark ? 'white' : 'black'));
    },
    meta: function meta() {
      var _this = this;

      var meta = {};

      var travel = function travel(node, parent) {
        var tickStrategy = node.tickStrategy || (parent ? parent.tickStrategy : _this.tickStrategy);
        var key = node[_this.nodeKey],
            isParent = node.children && node.children.length > 0,
            isLeaf = !isParent,
            selectable = !node.disabled && _this.hasSelection && node.selectable !== false,
            expandable = !node.disabled && node.expandable !== false,
            hasTicking = tickStrategy !== 'none',
            strictTicking = tickStrategy === 'strict',
            leafFilteredTicking = tickStrategy === 'leaf-filtered',
            leafTicking = tickStrategy === 'leaf' || tickStrategy === 'leaf-filtered';
        var tickable = !node.disabled && node.tickable !== false;

        if (leafTicking && tickable && parent && !parent.tickable) {
          tickable = false;
        }

        var lazy = node.lazy;

        if (lazy && _this.lazy[key]) {
          lazy = _this.lazy[key];
        }

        var m = {
          key: key,
          parent: parent,
          isParent: isParent,
          isLeaf: isLeaf,
          lazy: lazy,
          disabled: node.disabled,
          link: selectable || expandable && (isParent || lazy === true),
          children: [],
          matchesFilter: _this.filter ? _this.filterMethod(node, _this.filter) : true,
          selected: key === _this.selected && selectable,
          selectable: selectable,
          expanded: isParent ? _this.innerExpanded.includes(key) : false,
          expandable: expandable,
          noTick: node.noTick || !strictTicking && lazy && lazy !== 'loaded',
          tickable: tickable,
          tickStrategy: tickStrategy,
          hasTicking: hasTicking,
          strictTicking: strictTicking,
          leafFilteredTicking: leafFilteredTicking,
          leafTicking: leafTicking,
          ticked: strictTicking ? _this.innerTicked.includes(key) : isLeaf ? _this.innerTicked.includes(key) : false
        };
        meta[key] = m;

        if (isParent) {
          m.children = node.children.map(function (n) {
            return travel(n, m);
          });

          if (_this.filter) {
            if (!m.matchesFilter) {
              m.matchesFilter = m.children.some(function (n) {
                return n.matchesFilter;
              });
            }

            if (m.matchesFilter && !m.noTick && !m.disabled && m.tickable && leafFilteredTicking && m.children.every(function (n) {
              return !n.matchesFilter || n.noTick || !n.tickable;
            })) {
              m.tickable = false;
            }
          }

          if (m.matchesFilter) {
            if (!m.noTick && !strictTicking && m.children.every(function (n) {
              return n.noTick;
            })) {
              m.noTick = true;
            }

            if (leafTicking) {
              m.ticked = false;
              m.indeterminate = m.children.some(function (node) {
                return node.indeterminate;
              });

              if (!m.indeterminate) {
                var sel = m.children.reduce(function (acc, meta) {
                  return meta.ticked ? acc + 1 : acc;
                }, 0);

                if (sel === m.children.length) {
                  m.ticked = true;
                } else if (sel > 0) {
                  m.indeterminate = true;
                }
              }
            }
          }
        }

        return m;
      };

      this.nodes.forEach(function (node) {
        return travel(node, null);
      });
      return meta;
    }
  },
  data: function data() {
    return {
      lazy: {},
      innerTicked: this.ticked || [],
      innerExpanded: this.expanded || []
    };
  },
  watch: {
    ticked: function ticked(val) {
      this.innerTicked = val;
    },
    expanded: function expanded(val) {
      this.innerExpanded = val;
    }
  },
  methods: {
    getNodeByKey: function getNodeByKey(key) {
      var _this2 = this;

      var reduce = [].reduce;

      var find = function find(result, node) {
        if (result || !node) {
          return result;
        }

        if (Array.isArray(node)) {
          return reduce.call(Object(node), find, result);
        }

        if (node[_this2.nodeKey] === key) {
          return node;
        }

        if (node.children) {
          return find(null, node.children);
        }
      };

      return find(null, this.nodes);
    },
    getTickedNodes: function getTickedNodes() {
      var _this3 = this;

      return this.innerTicked.map(function (key) {
        return _this3.getNodeByKey(key);
      });
    },
    getExpandedNodes: function getExpandedNodes() {
      var _this4 = this;

      return this.innerExpanded.map(function (key) {
        return _this4.getNodeByKey(key);
      });
    },
    isExpanded: function isExpanded(key) {
      return key && this.meta[key] ? this.meta[key].expanded : false;
    },
    collapseAll: function collapseAll() {
      if (this.expanded !== void 0) {
        this.$emit('update:expanded', []);
      } else {
        this.innerExpanded = [];
      }
    },
    expandAll: function expandAll() {
      var _this5 = this;

      var expanded = this.innerExpanded,
          travel = function travel(node) {
        if (node.children && node.children.length > 0) {
          if (node.expandable !== false && node.disabled !== true) {
            expanded.push(node[_this5.nodeKey]);
            node.children.forEach(travel);
          }
        }
      };

      this.nodes.forEach(travel);

      if (this.expanded !== void 0) {
        this.$emit('update:expanded', expanded);
      } else {
        this.innerExpanded = expanded;
      }
    },
    setExpanded: function setExpanded(key, state) {
      var _this6 = this;

      var node = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getNodeByKey(key);
      var meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.meta[key];

      if (meta.lazy && meta.lazy !== 'loaded') {
        if (meta.lazy === 'loading') {
          return;
        }

        this.$set(this.lazy, key, 'loading');
        this.$emit('lazy-load', {
          node: node,
          key: key,
          done: function done(children) {
            _this6.lazy[key] = 'loaded';

            if (children) {
              node.children = children;
            }

            _this6.$nextTick(function () {
              var m = _this6.meta[key];

              if (m && m.isParent) {
                _this6.__setExpanded(key, true);
              }
            });
          },
          fail: function fail() {
            _this6.$delete(_this6.lazy, key);
          }
        });
      } else if (meta.isParent && meta.expandable) {
        this.__setExpanded(key, state);
      }
    },
    __setExpanded: function __setExpanded(key, state) {
      var _this7 = this;

      var target = this.innerExpanded;
      var emit = this.expanded !== void 0;

      if (emit) {
        target = target.slice();
      }

      if (state) {
        if (this.accordion) {
          if (this.meta[key]) {
            var collapse = [];

            if (this.meta[key].parent) {
              this.meta[key].parent.children.forEach(function (m) {
                if (m.key !== key && m.expandable) {
                  collapse.push(m.key);
                }
              });
            } else {
              this.nodes.forEach(function (node) {
                var k = node[_this7.nodeKey];

                if (k !== key) {
                  collapse.push(k);
                }
              });
            }

            if (collapse.length > 0) {
              target = target.filter(function (k) {
                return !collapse.includes(k);
              });
            }
          }
        }

        target = target.concat([key]).filter(function (key, index, self) {
          return self.indexOf(key) === index;
        });
      } else {
        target = target.filter(function (k) {
          return k !== key;
        });
      }

      if (emit) {
        this.$emit("update:expanded", target);
      } else {
        this.innerExpanded = target;
      }
    },
    isTicked: function isTicked(key) {
      return key && this.meta[key] ? this.meta[key].ticked : false;
    },
    setTicked: function setTicked(keys, state) {
      var target = this.innerTicked;
      var emit = this.ticked !== void 0;

      if (emit) {
        target = target.slice();
      }

      if (state) {
        target = target.concat(keys).filter(function (key, index, self) {
          return self.indexOf(key) === index;
        });
      } else {
        target = target.filter(function (k) {
          return !keys.includes(k);
        });
      }

      if (emit) {
        this.$emit("update:ticked", target);
      }
    },
    __getSlotScope: function __getSlotScope(node, meta, key) {
      var _this8 = this;

      var scope = {
        tree: this,
        node: node,
        key: key,
        color: this.color,
        dark: this.dark
      };
      Object.defineProperty(scope, 'expanded', {
        get: function get() {
          return meta.expanded;
        },
        set: function set(val) {
          val !== meta.expanded && _this8.setExpanded(key, val);
        }
      });
      Object.defineProperty(scope, 'ticked', {
        get: function get() {
          return meta.ticked;
        },
        set: function set(val) {
          val !== meta.ticked && _this8.setTicked([key], val);
        }
      });
      return scope;
    },
    __getChildren: function __getChildren(h, nodes) {
      var _this9 = this;

      return (this.filter ? nodes.filter(function (n) {
        return _this9.meta[n[_this9.nodeKey]].matchesFilter;
      }) : nodes).map(function (child) {
        return _this9.__getNode(h, child);
      });
    },
    __getNodeMedia: function __getNodeMedia(h, node) {
      if (node.icon) {
        return h(QIcon["a" /* default */], {
          staticClass: "q-tree-icon q-mr-sm",
          props: {
            name: node.icon,
            color: node.iconColor
          }
        });
      }

      if (node.img || node.avatar) {
        return h('img', {
          staticClass: "q-tree-img q-mr-sm",
          'class': {
            avatar: node.avatar
          },
          attrs: {
            src: node.img || node.avatar
          }
        });
      }
    },
    __getNode: function __getNode(h, node) {
      var _this10 = this;

      var key = node[this.nodeKey],
          meta = this.meta[key],
          header = node.header ? this.$scopedSlots["header-".concat(node.header)] || this.$scopedSlots['default-header'] : this.$scopedSlots['default-header'];
      var children = meta.isParent ? this.__getChildren(h, node.children) : [];
      var isParent = children.length > 0 || meta.lazy && meta.lazy !== 'loaded';
      var body = node.body ? this.$scopedSlots["body-".concat(node.body)] || this.$scopedSlots['default-body'] : this.$scopedSlots['default-body'],
          slotScope = header || body ? this.__getSlotScope(node, meta, key) : null;

      if (body) {
        body = h('div', {
          staticClass: 'q-tree-node-body relative-position'
        }, [h('div', {
          'class': this.contentClass
        }, [body(slotScope)])]);
      }

      return h('div', {
        key: key,
        staticClass: 'q-tree-node',
        'class': {
          'q-tree-node-parent': isParent,
          'q-tree-node-child': !isParent
        }
      }, [h('div', {
        staticClass: 'q-tree-node-header relative-position row no-wrap items-center',
        'class': {
          'q-tree-node-link': meta.link,
          'q-tree-node-selected': meta.selected,
          disabled: meta.disabled
        },
        on: {
          click: function click() {
            _this10.__onClick(node, meta);
          }
        },
        directives:  true && meta.selectable ? [{
          name: 'ripple'
        }] : null
      }, [meta.lazy === 'loading' ? h(QSpinner["a" /* default */], {
        staticClass: 'q-tree-node-header-media q-mr-xs',
        props: {
          color: this.computedControlColor
        }
      }) : isParent ? h(QIcon["a" /* default */], {
        staticClass: 'q-tree-arrow q-mr-xs transition-generic',
        'class': {
          'q-tree-arrow-rotate': meta.expanded
        },
        props: {
          name: this.computedIcon
        },
        nativeOn: {
          click: function click(e) {
            _this10.__onExpandClick(node, meta, e);
          }
        }
      }) : null, h('span', {
        'staticClass': 'row no-wrap items-center',
        'class': this.contentClass
      }, [meta.hasTicking && !meta.noTick ? h(QCheckbox["a" /* default */], {
        staticClass: 'q-mr-xs',
        props: {
          value: meta.indeterminate ? null : meta.ticked,
          color: this.computedControlColor,
          dark: this.dark,
          keepColor: true,
          disable: !meta.tickable
        },
        on: {
          input: function input(v) {
            _this10.__onTickedClick(node, meta, v);
          }
        }
      }) : null, header ? header(slotScope) : [this.__getNodeMedia(h, node), h('span', node[this.labelKey])]])]), isParent ? h(QSlideTransition, {
        props: {
          duration: this.duration
        }
      }, [h('div', {
        directives: [{
          name: 'show',
          value: meta.expanded
        }],
        staticClass: 'q-tree-node-collapsible',
        'class': "text-".concat(this.color)
      }, [body, h('div', {
        staticClass: 'q-tree-children',
        'class': {
          disabled: meta.disabled
        }
      }, children)])]) : body]);
    },
    __onClick: function __onClick(node, meta) {
      if (this.hasSelection) {
        if (meta.selectable) {
          this.$emit('update:selected', meta.key !== this.selected ? meta.key : null);
        }
      } else {
        this.__onExpandClick(node, meta);
      }

      if (typeof node.handler === 'function') {
        node.handler(node);
      }
    },
    __onExpandClick: function __onExpandClick(node, meta, e) {
      if (e !== void 0) {
        e.stopPropagation();
      }

      this.setExpanded(meta.key, !meta.expanded, node, meta);
    },
    __onTickedClick: function __onTickedClick(node, meta, state) {
      if (meta.indeterminate && state) {
        state = false;
      }

      if (meta.strictTicking) {
        this.setTicked([meta.key], state);
      } else if (meta.leafTicking) {
        var keys = [];

        var travel = function travel(meta) {
          if (meta.isParent) {
            if (!state && !meta.noTick && meta.tickable) {
              keys.push(meta.key);
            }

            if (meta.leafTicking) {
              meta.children.forEach(travel);
            }
          } else if (!meta.noTick && meta.tickable && (!meta.leafFilteredTicking || meta.matchesFilter)) {
            keys.push(meta.key);
          }
        };

        travel(meta);
        this.setTicked(keys, state);
      }
    }
  },
  render: function render(h) {
    var children = this.__getChildren(h, this.nodes);

    return h('div', {
      staticClass: 'q-tree relative-position',
      'class': this.classes
    }, children.length === 0 ? this.filter ? this.noResultsLabel || this.$q.i18n.tree.noResults : this.noNodesLabel || this.$q.i18n.tree.noNodes : children);
  },
  created: function created() {
    if (this.defaultExpandAll) {
      this.expandAll();
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/tree/index.js


// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.iterator.js
var es6_string_iterator = __webpack_require__("5df3");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/uploader/QUploader.js






















function initFile(file) {
  file.__doneUploading = false;
  file.__failed = false;
  file.__uploaded = 0;
  file.__progress = 0;
}

/* harmony default export */ var QUploader = ({
  name: 'QUploader',
  mixins: [input_frame["a" /* default */]],
  props: {
    name: {
      type: String,
      default: 'file'
    },
    headers: Object,
    url: {
      type: String,
      required: true
    },
    urlFactory: {
      type: Function,
      required: false
    },
    uploadFactory: Function,
    additionalFields: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    noContentType: Boolean,
    method: {
      type: String,
      default: 'POST'
    },
    filter: Function,
    extensions: String,
    multiple: Boolean,
    hideUploadButton: Boolean,
    hideUploadProgress: Boolean,
    noThumbnails: Boolean,
    autoExpand: Boolean,
    expandStyle: [Array, String, Object],
    expandClass: [Array, String, Object],
    withCredentials: Boolean,
    sendRaw: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      queue: [],
      files: [],
      uploading: false,
      uploadedSize: 0,
      totalSize: 0,
      xhrs: [],
      focused: false,
      dnd: false,
      expanded: false
    };
  },
  computed: {
    queueLength: function queueLength() {
      return this.queue.length;
    },
    hasExpandedContent: function hasExpandedContent() {
      return this.files.length > 0;
    },
    label: function label() {
      var total = Object(format["d" /* humanStorageSize */])(this.totalSize);
      return this.uploading ? "".concat(this.progress.toFixed(2), "% (").concat(Object(format["d" /* humanStorageSize */])(this.uploadedSize), " / ").concat(total, ")") : "".concat(this.queueLength, " (").concat(total, ")");
    },
    progress: function progress() {
      return this.totalSize ? Math.min(99.99, this.uploadedSize / this.totalSize * 100) : 0;
    },
    addDisabled: function addDisabled() {
      return this.disable || !this.multiple && this.queueLength >= 1;
    },
    filesStyle: function filesStyle() {
      if (this.maxHeight) {
        return {
          maxHeight: this.maxHeight
        };
      }
    },
    dndClass: function dndClass() {
      var cls = ["text-".concat(this.color)];

      if (this.isInverted) {
        cls.push('inverted');
      }

      return cls;
    },
    classes: function classes() {
      return {
        'q-uploader-expanded': this.expanded,
        'q-uploader-dark': this.dark,
        'q-uploader-files-no-border': this.isInverted || !this.hideUnderline
      };
    },
    progressColor: function progressColor() {
      return this.dark ? 'white' : 'grey';
    },
    computedExtensions: function computedExtensions() {
      if (this.extensions) {
        return this.extensions.split(',').map(function (ext) {
          ext = ext.trim();

          if (ext.endsWith('/*')) {
            ext = ext.slice(0, ext.length - 1);
          }

          return ext;
        });
      }
    }
  },
  watch: {
    hasExpandedContent: function hasExpandedContent(v) {
      if (v === false) {
        this.expanded = false;
      } else if (this.autoExpand) {
        this.expanded = true;
      }
    }
  },
  methods: {
    add: function add(files) {
      if (files) {
        this.__add(null, files);
      }
    },
    __onDragOver: function __onDragOver(e) {
      Object(utils_event["h" /* stopAndPrevent */])(e);
      this.dnd = true;
    },
    __onDragLeave: function __onDragLeave(e) {
      Object(utils_event["h" /* stopAndPrevent */])(e);
      this.dnd = false;
    },
    __onDrop: function __onDrop(e) {
      Object(utils_event["h" /* stopAndPrevent */])(e);
      this.dnd = false;
      var files = e.dataTransfer.files;

      if (files.length === 0) {
        return;
      }

      files = this.multiple ? files : [files[0]];

      this.__add(null, files);
    },
    __filter: function __filter(files) {
      var _this = this;

      return Array.prototype.filter.call(files, function (file) {
        return _this.computedExtensions.some(function (ext) {
          return file.type.toUpperCase().startsWith(ext.toUpperCase()) || file.name.toUpperCase().endsWith(ext.toUpperCase());
        });
      });
    },
    __add: function __add(e, files) {
      var _this2 = this;

      if (this.addDisabled) {
        return;
      }

      files = Array.prototype.slice.call(files || e.target.files);

      if (this.extensions) {
        files = this.__filter(files);

        if (files.length === 0) {
          return;
        }
      }

      this.$refs.file.value = '';
      var filesReady = [];
      files = files.filter(function (file) {
        return !_this2.queue.some(function (f) {
          return file.name === f.name;
        });
      });

      if (typeof this.filter === 'function') {
        files = this.filter(files);
      }

      files = files.map(function (file) {
        initFile(file);
        file.__size = Object(format["d" /* humanStorageSize */])(file.size);
        file.__timestamp = new Date().getTime();

        if (_this2.noThumbnails || !file.type.toUpperCase().startsWith('IMAGE')) {
          _this2.queue.push(file);
        } else {
          var reader = new FileReader();
          var p = new Promise(function (resolve, reject) {
            reader.onload = function (e) {
              var img = new Image();
              img.src = e.target.result;
              file.__img = img;

              _this2.queue.push(file);

              _this2.__computeTotalSize();

              resolve(true);
            };

            reader.onerror = function (e) {
              reject(e);
            };
          });
          reader.readAsDataURL(file);
          filesReady.push(p);
        }

        return file;
      });

      if (files.length > 0) {
        this.files = this.files.concat(files);
        Promise.all(filesReady).then(function () {
          _this2.$emit('add', files);
        });

        this.__computeTotalSize();
      }
    },
    __computeTotalSize: function __computeTotalSize() {
      this.totalSize = this.queueLength ? this.queue.map(function (f) {
        return f.size;
      }).reduce(function (total, size) {
        return total + size;
      }) : 0;
    },
    __remove: function __remove(file) {
      var name = file.name,
          done = file.__doneUploading;

      if (this.uploading && !done) {
        this.$emit('remove:abort', file, file.xhr);
        file.xhr && file.xhr.abort();
        this.uploadedSize -= file.__uploaded;
      } else {
        this.$emit("remove:".concat(done ? 'done' : 'cancel'), file, file.xhr);
      }

      if (!done) {
        this.queue = this.queue.filter(function (obj) {
          return obj.name !== name;
        });
      }

      file.__removed = true;
      this.files = this.files.filter(function (obj) {
        return obj.name !== name;
      });

      if (!this.files.length) {
        this.uploading = false;
      }

      this.__computeTotalSize();
    },
    __pick: function __pick() {
      if (!this.addDisabled && this.$q.platform.is.mozilla) {
        this.$refs.file.click();
      }
    },
    __getUploadPromise: function __getUploadPromise(file) {
      var _this3 = this;

      initFile(file);

      if (this.uploadFactory) {
        var updateProgress = function updateProgress(percentage) {
          var uploaded = percentage * file.size;
          _this3.uploadedSize += uploaded - file.__uploaded;
          file.__uploaded = uploaded;
          file.__progress = Math.min(99, parseInt(percentage * 100, 10));

          _this3.$forceUpdate();
        };

        return new Promise(function (resolve, reject) {
          _this3.uploadFactory(file, updateProgress).then(function (file) {
            file.__doneUploading = true;
            file.__progress = 100;

            _this3.$emit('uploaded', file);

            _this3.$forceUpdate();

            resolve(file);
          }).catch(function (error) {
            file.__failed = true;

            _this3.$emit('fail', file);

            _this3.$forceUpdate();

            reject(error);
          });
        });
      }

      var form = new FormData(),
          xhr = new XMLHttpRequest();

      try {
        this.additionalFields.forEach(function (field) {
          form.append(field.name, field.value);
        });

        if (this.noContentType !== true) {
          form.append('Content-Type', file.type || 'application/octet-stream');
        }

        form.append(this.name, file);
      } catch (e) {
        return;
      }

      file.xhr = xhr;
      return new Promise(function (resolve, reject) {
        xhr.upload.addEventListener('progress', function (e) {
          if (file.__removed) {
            return;
          }

          e.percent = e.total ? e.loaded / e.total : 0;
          var uploaded = e.percent * file.size;
          _this3.uploadedSize += uploaded - file.__uploaded;
          file.__uploaded = uploaded;
          file.__progress = Math.min(99, parseInt(e.percent * 100, 10));
        }, false);

        xhr.onreadystatechange = function () {
          if (xhr.readyState < 4) {
            return;
          }

          if (xhr.status && xhr.status < 400) {
            file.__doneUploading = true;
            file.__progress = 100;

            _this3.$emit('uploaded', file, xhr);

            resolve(file);
          } else {
            file.__failed = true;

            _this3.$emit('fail', file, xhr);

            reject(xhr);
          }
        };

        xhr.onerror = function () {
          file.__failed = true;

          _this3.$emit('fail', file, xhr);

          reject(xhr);
        };

        var resolver = _this3.urlFactory ? _this3.urlFactory(file) : Promise.resolve(_this3.url);
        resolver.then(function (url) {
          xhr.open(_this3.method, url, true);

          if (_this3.withCredentials) {
            xhr.withCredentials = true;
          }

          if (_this3.headers) {
            Object.keys(_this3.headers).forEach(function (key) {
              xhr.setRequestHeader(key, _this3.headers[key]);
            });
          }

          _this3.xhrs.push(xhr);

          if (_this3.sendRaw) {
            xhr.send(file);
          } else {
            xhr.send(form);
          }
        });
      });
    },
    pick: function pick() {
      if (!this.addDisabled) {
        this.$refs.file.click();
      }
    },
    upload: function upload() {
      var _this4 = this;

      var length = this.queueLength;

      if (this.disable || length === 0) {
        return;
      }

      var filesDone = 0;
      this.uploadedSize = 0;
      this.uploading = true;
      this.xhrs = [];
      this.$emit('start');

      var solved = function solved() {
        filesDone++;

        if (filesDone === length) {
          _this4.uploading = false;
          _this4.xhrs = [];
          _this4.queue = _this4.queue.filter(function (f) {
            return !f.__doneUploading;
          });

          _this4.__computeTotalSize();

          _this4.$emit('finish');
        }
      };

      this.queue.map(function (file) {
        return _this4.__getUploadPromise(file);
      }).forEach(function (promise) {
        promise.then(solved).catch(solved);
      });
    },
    abort: function abort() {
      this.xhrs.forEach(function (xhr) {
        xhr.abort();
      });
      this.uploading = false;
      this.$emit('abort');
    },
    reset: function reset() {
      this.abort();
      this.files = [];
      this.queue = [];
      this.expanded = false;

      this.__computeTotalSize();

      this.$emit('reset');
    }
  },
  render: function render(h) {
    var _this5 = this;

    var child = [h('div', {
      staticClass: 'col q-input-target ellipsis',
      'class': this.alignClass
    }, [this.label])];

    if (this.uploading) {
      child.push(this.$slots.loading ? h('div', {
        slot: 'after',
        staticClass: 'q-if-end self-center q-if-control'
      }, this.$slots.loading) : h(QSpinner["a" /* default */], {
        slot: 'after',
        staticClass: 'q-if-end self-center',
        props: {
          size: '24px'
        }
      }), h(QIcon["a" /* default */], {
        slot: 'after',
        staticClass: 'q-if-end self-center q-if-control',
        props: {
          name: this.$q.icon.uploader["clear".concat(this.isInverted ? 'Inverted' : '')]
        },
        nativeOn: {
          click: this.abort
        }
      }));
    } else {
      child.push(h(QIcon["a" /* default */], {
        slot: 'after',
        staticClass: 'q-uploader-pick-button self-center q-if-control relative-position overflow-hidden',
        props: {
          name: this.$q.icon.uploader.add
        },
        attrs: {
          disabled: this.addDisabled
        }
      }, [h('input', {
        ref: 'file',
        staticClass: 'q-uploader-input absolute-full cursor-pointer',
        attrs: Object.assign({
          type: 'file',
          accept: this.extensions
        }, this.multiple ? {
          multiple: true
        } : {}),
        on: {
          change: this.__add
        }
      })]));

      if (!this.hideUploadButton) {
        child.push(h(QIcon["a" /* default */], {
          slot: 'after',
          staticClass: 'q-if-control self-center',
          props: {
            name: this.$q.icon.uploader.upload
          },
          attrs: {
            disabled: this.queueLength === 0
          },
          nativeOn: {
            click: this.upload
          }
        }));
      }
    }

    if (this.hasExpandedContent) {
      child.push(h(QIcon["a" /* default */], {
        slot: 'after',
        staticClass: 'q-if-control generic_transition self-center',
        'class': {
          'rotate-180': this.expanded
        },
        props: {
          name: this.$q.icon.uploader.expand
        },
        nativeOn: {
          click: function click() {
            _this5.expanded = !_this5.expanded;
          }
        }
      }));
    }

    return h('div', {
      staticClass: 'q-uploader relative-position',
      'class': this.classes,
      on: {
        dragover: this.__onDragOver
      }
    }, [h(QInputFrame["a" /* default */], {
      ref: 'input',
      props: {
        prefix: this.prefix,
        suffix: this.suffix,
        stackLabel: this.stackLabel,
        floatLabel: this.floatLabel,
        error: this.error,
        warning: this.warning,
        readonly: this.readonly,
        inverted: this.inverted,
        invertedLight: this.invertedLight,
        dark: this.dark,
        hideUnderline: this.hideUnderline,
        before: this.before,
        after: this.after,
        color: this.color,
        align: this.align,
        noParentField: this.noParentField,
        length: this.queueLength,
        additionalLength: true
      }
    }, child), h(QSlideTransition, [h('div', {
      'class': this.expandClass,
      style: this.expandStyle,
      directives: [{
        name: 'show',
        value: this.expanded
      }]
    }, [h(QList["a" /* default */], {
      staticClass: 'q-uploader-files q-py-none scroll',
      style: this.filesStyle,
      props: {
        dark: this.dark
      }
    }, this.files.map(function (file) {
      return h(QItem["a" /* default */], {
        key: file.name + file.__timestamp,
        staticClass: 'q-uploader-file q-pa-xs'
      }, [!_this5.hideUploadProgress && h(QProgress["a" /* default */], {
        staticClass: 'q-uploader-progress-bg absolute-full',
        props: {
          color: file.__failed ? 'negative' : _this5.progressColor,
          percentage: file.__progress,
          height: '100%'
        }
      }) || void 0, !_this5.hideUploadProgress && h('div', {
        staticClass: 'q-uploader-progress-text absolute'
      }, [file.__progress + '%']) || void 0, h(QItemSide["a" /* default */], {
        props: file.__img ? {
          image: file.__img.src
        } : {
          icon: _this5.$q.icon.uploader.file,
          color: _this5.color
        }
      }), h(QItemMain["a" /* default */], {
        props: {
          label: file.name,
          sublabel: file.__size
        }
      }), h(QItemSide["a" /* default */], {
        props: {
          right: true
        }
      }, [h(QItemTile, {
        staticClass: 'cursor-pointer',
        props: {
          icon: _this5.$q.icon.uploader[file.__doneUploading ? 'done' : 'clear'],
          color: _this5.color
        },
        nativeOn: {
          click: function click() {
            _this5.__remove(file);
          }
        }
      })])]);
    }))])]), this.dnd && h('div', {
      staticClass: 'q-uploader-dnd flex row items-center justify-center absolute-full',
      'class': this.dndClass,
      on: {
        dragenter: utils_event["h" /* stopAndPrevent */],
        dragover: utils_event["h" /* stopAndPrevent */],
        dragleave: this.__onDragLeave,
        drop: this.__onDrop
      }
    }) || void 0]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/uploader/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/video/QVideo.js
/* harmony default export */ var QVideo = ({
  name: 'QVideo',
  props: {
    src: {
      type: String,
      required: true
    }
  },
  computed: {
    iframeData: function iframeData() {
      return {
        attrs: {
          src: this.src,
          frameborder: '0',
          allowfullscreen: true
        }
      };
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-video'
    }, [h('iframe', this.iframeData)]);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/video/index.js


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components.js


























































// CONCATENATED MODULE: ./node_modules/quasar-framework/src/directives/back-to-top.js




function updateBinding(el, _ref) {
  var value = _ref.value,
      modifiers = _ref.modifiers;
  var ctx = el.__qbacktotop;

  if (!value) {
    ctx.update();
    return;
  }

  if (typeof value === 'number') {
    ctx.offset = value;
    ctx.update();
    return;
  }

  if (value && Object(value) !== value) {
    console.error('v-back-to-top requires an object {offset, duration} as parameter', el);
    return;
  }

  if (value.offset) {
    if (typeof value.offset !== 'number') {
      console.error('v-back-to-top requires a number as offset', el);
      return;
    }

    ctx.offset = value.offset;
  }

  if (value.duration) {
    if (typeof value.duration !== 'number') {
      console.error('v-back-to-top requires a number as duration', el);
      return;
    }

    ctx.duration = value.duration;
  }

  ctx.update();
}

/* harmony default export */ var back_to_top = ({
  name: 'back-to-top',
  bind: function bind(el) {
    var ctx = {
      offset: 200,
      duration: 300,
      updateNow: function updateNow() {
        var trigger = Object(utils_scroll["c" /* getScrollPosition */])(ctx.scrollTarget) <= ctx.offset;

        if (trigger !== el.classList.contains('hidden')) {
          el.classList[trigger ? 'add' : 'remove']('hidden');
        }
      },
      goToTop: function goToTop() {
        Object(utils_scroll["g" /* setScrollPosition */])(ctx.scrollTarget, 0, ctx.animate ? ctx.duration : 0);
      },
      goToTopKey: function goToTopKey(evt) {
        if (evt.keyCode === 13) {
          Object(utils_scroll["g" /* setScrollPosition */])(ctx.scrollTarget, 0, ctx.animate ? ctx.duration : 0);
        }
      }
    };
    ctx.update = debounce(ctx.updateNow, 25);
    el.classList.add('hidden');
    el.__qbacktotop = ctx;
  },
  inserted: function inserted(el, binding) {
    var ctx = el.__qbacktotop;
    ctx.scrollTarget = Object(utils_scroll["d" /* getScrollTarget */])(el);
    ctx.animate = binding.modifiers.animate;
    updateBinding(el, binding);
    ctx.scrollTarget.addEventListener('scroll', ctx.update, utils_event["f" /* listenOpts */].passive);
    window.addEventListener('resize', ctx.update, utils_event["f" /* listenOpts */].passive);
    el.addEventListener('click', ctx.goToTop);
    el.addEventListener('keyup', ctx.goToTopKey);
  },
  update: function update(el, binding) {
    if (JSON.stringify(binding.oldValue) !== JSON.stringify(binding.value)) {
      updateBinding(el, binding);
    } else {
      setTimeout(function () {
        el.__qbacktotop && el.__qbacktotop.updateNow();
      }, 0);
    }
  },
  unbind: function unbind(el) {
    var ctx = el.__qbacktotop;

    if (!ctx) {
      return;
    }

    ctx.scrollTarget.removeEventListener('scroll', ctx.update, utils_event["f" /* listenOpts */].passive);
    window.removeEventListener('resize', ctx.update, utils_event["f" /* listenOpts */].passive);
    el.removeEventListener('click', ctx.goToTop);
    el.removeEventListener('keyup', ctx.goToTopKey);
    delete el.__qbacktotop;
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/directives/close-overlay.js

/* harmony default export */ var close_overlay = ({
  name: 'close-overlay',
  bind: function bind(el, binding, vnode) {
    var handler = function handler(ev) {
      var vm = vnode.componentInstance;

      while (vm = vm.$parent) {
        var name = vm.$options.name;

        if (name === 'QPopover' || name === 'QModal') {
          vm.hide(ev);
          break;
        }
      }
    },
        handlerKey = function handlerKey(ev) {
      if (ev.keyCode === 13) {
        handler(ev);
      }
    };

    el.__qclose = {
      handler: handler,
      handlerKey: handlerKey
    };
    el.addEventListener('click', handler);
    el.addEventListener('keyup', handlerKey);
  },
  unbind: function unbind(el) {
    var ctx = el.__qclose;

    if (!ctx) {
      return;
    }

    el.removeEventListener('click', ctx.handler);
    el.removeEventListener('keyup', ctx.handlerKey);
    delete el.__qclose;
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/directives/go-back.js


/* harmony default export */ var go_back = ({
  name: 'go-back',
  bind: function bind(el, _ref, vnode) {
    var value = _ref.value,
        modifiers = _ref.modifiers;
    var ctx = {
      value: value,
      position: window.history.length - 1,
      single: modifiers.single
    };

    if (platform["a" /* default */].is.cordova) {
      ctx.goBack = function () {
        vnode.context.$router.go(ctx.single ? -1 : ctx.position - window.history.length);
      };
    } else {
      ctx.goBack = function () {
        vnode.context.$router.replace(ctx.value);
      };
    }

    ctx.goBackKey = function (ev) {
      if (ev.keyCode === 13) {
        ctx.goBack(ev);
      }
    };

    el.__qgoback = ctx;
    el.addEventListener('click', ctx.goBack);
    el.addEventListener('keyup', ctx.goBackKey);
  },
  update: function update(el, binding) {
    if (binding.oldValue !== binding.value) {
      el.__qgoback.value = binding.value;
    }
  },
  unbind: function unbind(el) {
    var ctx = el.__qgoback;

    if (!ctx) {
      return;
    }

    el.removeEventListener('click', ctx.goBack);
    el.removeEventListener('keyup', ctx.goBackKey);
    delete el.__qgoback;
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/directives/scroll-fire.js





function scroll_fire_updateBinding(el, binding) {
  var ctx = el.__qscrollfire;

  if (typeof binding.value !== 'function') {
    ctx.scrollTarget.removeEventListener('scroll', ctx.scroll);
    console.error('v-scroll-fire requires a function as parameter', el);
    return;
  }

  ctx.handler = binding.value;

  if (typeof binding.oldValue !== 'function') {
    ctx.scrollTarget.addEventListener('scroll', ctx.scroll, utils_event["f" /* listenOpts */].passive);
    ctx.scroll();
  }
}

/* harmony default export */ var scroll_fire = ({
  name: 'scroll-fire',
  bind: function bind(el, binding) {
    var ctx = {
      scroll: debounce(function () {
        var containerBottom, elBottom;

        if (ctx.scrollTarget === window) {
          elBottom = el.getBoundingClientRect().bottom;
          containerBottom = window.innerHeight;
        } else {
          elBottom = Object(dom["d" /* offset */])(el).top + Object(dom["c" /* height */])(el);
          containerBottom = Object(dom["d" /* offset */])(ctx.scrollTarget).top + Object(dom["c" /* height */])(ctx.scrollTarget);
        }

        if (elBottom > 0 && elBottom < containerBottom) {
          ctx.scrollTarget.removeEventListener('scroll', ctx.scroll, utils_event["f" /* listenOpts */].passive);
          ctx.handler(el);
        }
      }, 25)
    };
    el.__qscrollfire = ctx;
  },
  inserted: function inserted(el, binding) {
    var ctx = el.__qscrollfire;
    ctx.scrollTarget = Object(utils_scroll["d" /* getScrollTarget */])(el);
    scroll_fire_updateBinding(el, binding);
  },
  update: function update(el, binding) {
    if (binding.value !== binding.oldValue) {
      scroll_fire_updateBinding(el, binding);
    }
  },
  unbind: function unbind(el) {
    var ctx = el.__qscrollfire;

    if (!ctx) {
      return;
    }

    ctx.scrollTarget.removeEventListener('scroll', ctx.scroll, utils_event["f" /* listenOpts */].passive);
    delete el.__qscrollfire;
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/directives/scroll.js



function scroll_updateBinding(el, binding) {
  var ctx = el.__qscroll;

  if (typeof binding.value !== 'function') {
    ctx.scrollTarget.removeEventListener('scroll', ctx.scroll, utils_event["f" /* listenOpts */].passive);
    console.error('v-scroll requires a function as parameter', el);
    return;
  }

  ctx.handler = binding.value;

  if (typeof binding.oldValue !== 'function') {
    ctx.scrollTarget.addEventListener('scroll', ctx.scroll, utils_event["f" /* listenOpts */].passive);
  }
}

/* harmony default export */ var directives_scroll = ({
  name: 'scroll',
  bind: function bind(el, binding) {
    var ctx = {
      scroll: function scroll() {
        ctx.handler(Object(utils_scroll["c" /* getScrollPosition */])(ctx.scrollTarget), Object(utils_scroll["b" /* getHorizontalScrollPosition */])(ctx.scrollTarget));
      }
    };
    el.__qscroll = ctx;
  },
  inserted: function inserted(el, binding) {
    var ctx = el.__qscroll;
    ctx.scrollTarget = Object(utils_scroll["d" /* getScrollTarget */])(el);
    scroll_updateBinding(el, binding);
  },
  update: function update(el, binding) {
    if (binding.oldValue !== binding.value) {
      scroll_updateBinding(el, binding);
    }
  },
  unbind: function unbind(el) {
    var ctx = el.__qscroll;

    if (!ctx) {
      return;
    }

    ctx.scrollTarget.removeEventListener('scroll', ctx.scroll, utils_event["f" /* listenOpts */].passive);
    delete el.__qscroll;
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/directives/touch-hold.js


function touch_hold_updateBinding(el, binding) {
  var ctx = el.__qtouchhold;
  ctx.duration = parseInt(binding.arg, 10) || 600;

  if (binding.oldValue !== binding.value) {
    ctx.handler = binding.value;
  }
}

/* harmony default export */ var touch_hold = ({
  name: 'touch-hold',
  bind: function bind(el, binding) {
    var mouse = !binding.modifiers.noMouse,
        stopPropagation = binding.modifiers.stop,
        preventDefault = binding.modifiers.prevent;
    var ctx = {
      mouseStart: function mouseStart(evt) {
        if (Object(utils_event["e" /* leftClick */])(evt)) {
          document.addEventListener('mousemove', ctx.mouseAbort);
          document.addEventListener('mouseup', ctx.mouseAbort);
          ctx.start(evt);
        }
      },
      mouseAbort: function mouseAbort(evt) {
        document.removeEventListener('mousemove', ctx.mouseAbort);
        document.removeEventListener('mouseup', ctx.mouseAbort);
        ctx.abort(evt);
      },
      start: function start(evt) {
        var startTime = new Date().getTime();
        stopPropagation && evt.stopPropagation();
        preventDefault && evt.preventDefault();
        ctx.timer = setTimeout(function () {
          if (mouse) {
            document.removeEventListener('mousemove', ctx.mouseAbort);
            document.removeEventListener('mouseup', ctx.mouseAbort);
          }

          ctx.handler({
            evt: evt,
            position: Object(utils_event["g" /* position */])(evt),
            duration: new Date().getTime() - startTime
          });
        }, ctx.duration);
      },
      abort: function abort(evt) {
        clearTimeout(ctx.timer);
        ctx.timer = null;
      }
    };
    el.__qtouchhold = ctx;
    touch_hold_updateBinding(el, binding);

    if (mouse) {
      el.addEventListener('mousedown', ctx.mouseStart);
    }

    el.addEventListener('touchstart', ctx.start);
    el.addEventListener('touchmove', ctx.abort);
    el.addEventListener('touchend', ctx.abort);
  },
  update: function update(el, binding) {
    touch_hold_updateBinding(el, binding);
  },
  unbind: function unbind(el, binding) {
    var ctx = el.__qtouchhold;

    if (!ctx) {
      return;
    }

    el.removeEventListener('touchstart', ctx.start);
    el.removeEventListener('touchend', ctx.abort);
    el.removeEventListener('touchmove', ctx.abort);
    el.removeEventListener('mousedown', ctx.mouseStart);
    document.removeEventListener('mousemove', ctx.mouseAbort);
    document.removeEventListener('mouseup', ctx.mouseAbort);
    delete el.__qtouchhold;
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/directives.js










// CONCATENATED MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}
// CONCATENATED MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/modal-fn.js


/* harmony default export */ var modal_fn = (function (Component, Vue) {
  return function (_ref, resolver) {
    var className = _ref.className,
        props = _objectWithoutProperties(_ref, ["className"]);

    return new Promise(function (resolve, reject) {
      if (platform["d" /* isSSR */]) {
        return resolve();
      }

      var node = document.createElement('div');
      document.body.appendChild(node);

      var ok = function ok(data) {
        resolve(data);
        vm.$destroy();
      },
          cancel = function cancel(reason) {
        reject(reason || new Error());
        vm.$destroy();
      };

      var vm = new Vue({
        el: node,
        data: function data() {
          return {
            props: props
          };
        },
        render: function render(h) {
          return h(Component, {
            ref: 'modal',
            props: props,
            'class': className,
            on: {
              ok: ok,
              cancel: cancel
            }
          });
        },
        mounted: function mounted() {
          this.$refs.modal.show();
        }
      });
      resolver && resolver.then(ok, cancel);
    });
  };
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/action-sheet.js


/* harmony default export */ var action_sheet = ({
  install: function install(_ref) {
    var $q = _ref.$q,
        Vue = _ref.Vue;
    this.create = $q.actionSheet = modal_fn(QActionSheet, Vue);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/addressbar-color.js



var metaValue;

function getProp() {
  if (platform["a" /* default */].is.winphone) {
    return 'msapplication-navbutton-color';
  }

  if (platform["a" /* default */].is.safari) {
    return 'apple-mobile-web-app-status-bar-style';
  }

  return 'theme-color';
}

function getMetaTag(v) {
  var els = document.getElementsByTagName('META');

  for (var i in els) {
    if (els[i].name === v) {
      return els[i];
    }
  }
}

function setColor(hexColor) {
  if (metaValue === void 0) {
    metaValue = getProp();
  }

  var metaTag = getMetaTag(metaValue);
  var newTag = metaTag === void 0;

  if (newTag) {
    metaTag = document.createElement('meta');
    metaTag.setAttribute('name', metaValue);
  }

  metaTag.setAttribute('content', hexColor);

  if (newTag) {
    document.head.appendChild(metaTag);
  }
}

/* harmony default export */ var addressbar_color = ({
  install: function install(_ref) {
    var $q = _ref.$q,
        Vue = _ref.Vue,
        cfg = _ref.cfg;
    this.set = !platform["d" /* isSSR */] && platform["a" /* default */].is.mobile && (platform["a" /* default */].is.cordova || platform["a" /* default */].is.winphone || platform["a" /* default */].is.safari || platform["a" /* default */].is.webkit || platform["a" /* default */].is.vivaldi) ? function (hexColor) {
      var val = hexColor || Object(colors["b" /* getBrand */])('primary');

      if (platform["a" /* default */].is.cordova && window.StatusBar) {
        window.StatusBar.backgroundColorByHexString(val);
      } else {
        setColor(val);
      }
    } : function () {};
    $q.addressbarColor = this;
    cfg.addressbarColor && this.set(cfg.addressbarColor);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/app-fullscreen.js



var prefixes = {};
/* harmony default export */ var app_fullscreen = ({
  isCapable: false,
  isActive: false,
  request: function request(target) {
    if (this.isCapable && !this.isActive) {
      target = target || document.documentElement;
      target[prefixes.request]();
    }
  },
  exit: function exit() {
    if (this.isCapable && this.isActive) {
      document[prefixes.exit]();
    }
  },
  toggle: function toggle(target) {
    if (this.isActive) {
      this.exit();
    } else {
      this.request(target);
    }
  },
  install: function install(_ref) {
    var _this = this;

    var $q = _ref.$q,
        Vue = _ref.Vue;
    $q.fullscreen = this;

    if (platform["d" /* isSSR */]) {
      return;
    }

    prefixes.request = ['requestFullscreen', 'msRequestFullscreen', 'mozRequestFullScreen', 'webkitRequestFullscreen'].find(function (request) {
      return document.documentElement[request];
    });
    this.isCapable = prefixes.request !== undefined;

    if (!this.isCapable) {
      return;
    }

    prefixes.exit = ['exitFullscreen', 'msExitFullscreen', 'mozCancelFullScreen', 'webkitExitFullscreen'].find(function (exit) {
      return document[exit];
    });
    this.isActive = !!(document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement);
    ['onfullscreenchange', 'onmsfullscreenchange', 'onmozfullscreenchange', 'onwebkitfullscreenchange'].forEach(function (evt) {
      document[evt] = function () {
        _this.isActive = !_this.isActive;
      };
    });
    Vue.util.defineReactive(this, 'isActive', this.isActive);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/app-visibility.js

/* harmony default export */ var app_visibility = ({
  appVisible: false,
  install: function install(_ref) {
    var _this = this;

    var $q = _ref.$q,
        Vue = _ref.Vue;

    if (platform["d" /* isSSR */]) {
      this.appVisible = $q.appVisible = true;
      return;
    }

    var prop, evt;

    if (typeof document.hidden !== 'undefined') {
      prop = 'hidden';
      evt = 'visibilitychange';
    } else if (typeof document.msHidden !== 'undefined') {
      prop = 'msHidden';
      evt = 'msvisibilitychange';
    } else if (typeof document.webkitHidden !== 'undefined') {
      prop = 'webkitHidden';
      evt = 'webkitvisibilitychange';
    }

    var update = function update() {
      _this.appVisible = $q.appVisible = !document[prop];
    };

    update();

    if (evt && typeof document[prop] !== 'undefined') {
      Vue.util.defineReactive($q, 'appVisible', this.appVisible);
      document.addEventListener(evt, update, false);
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/cookies.js





function encode(string) {
  return encodeURIComponent(string);
}

function decode(string) {
  return decodeURIComponent(string);
}

function stringifyCookieValue(value) {
  return encode(value === Object(value) ? JSON.stringify(value) : '' + value);
}

function read(string) {
  if (string === '') {
    return string;
  }

  if (string.indexOf('"') === 0) {
    string = string.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
  }

  string = decode(string.replace(/\+/g, ' '));

  try {
    string = JSON.parse(string);
  } catch (e) {}

  return string;
}

function _set(key, val) {
  var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var ssr = arguments.length > 3 ? arguments[3] : undefined;
  var time = opts.expires;
  var hasExpire = typeof opts.expires === 'number';

  if (hasExpire) {
    time = new Date();
    time.setMilliseconds(time.getMilliseconds() + opts.expires * 864e+5);
  }

  var keyValue = "".concat(encode(key), "=").concat(stringifyCookieValue(val));
  var cookie = [keyValue, time ? '; Expires=' + time.toUTCString() : '', opts.path ? '; Path=' + opts.path : '', opts.domain ? '; Domain=' + opts.domain : '', opts.httpOnly ? '; HttpOnly' : '', opts.secure ? '; Secure' : ''].join('');

  if (ssr) {
    if (ssr.req.qCookies) {
      ssr.req.qCookies.push(cookie);
    } else {
      ssr.req.qCookies = [cookie];
    }

    ssr.res.setHeader('Set-Cookie', ssr.req.qCookies);
    var all = ssr.req.headers.cookie || '';

    if (hasExpire && opts.expires < 0) {
      var _val = _get(key, ssr);

      if (_val !== undefined) {
        all = all.replace("".concat(key, "=").concat(_val, "; "), '').replace("; ".concat(key, "=").concat(_val), '').replace("".concat(key, "=").concat(_val), '');
      }
    } else {
      all = all ? "".concat(keyValue, "; ").concat(all) : cookie;
    }

    ssr.req.headers.cookie = all;
  } else {
    document.cookie = cookie;
  }
}

function _get(key, ssr) {
  var result = key ? undefined : {},
      cookieSource = ssr ? ssr.req.headers : document,
      cookies = cookieSource.cookie ? cookieSource.cookie.split('; ') : [],
      i = 0,
      l = cookies.length,
      parts,
      name,
      cookie;

  for (; i < l; i++) {
    parts = cookies[i].split('=');
    name = decode(parts.shift());
    cookie = parts.join('=');

    if (!key) {
      result[name] = cookie;
    } else if (key === name) {
      result = read(cookie);
      break;
    }
  }

  return result;
}

function _remove(key, options, ssr) {
  _set(key, '', Object.assign({}, options, {
    expires: -1
  }), ssr);
}

function _has(key, ssr) {
  return _get(key, ssr) !== undefined;
}

function getObject() {
  var ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var ssr = ctx.ssr;
  return {
    get: function get(key) {
      return _get(key, ssr);
    },
    set: function set(key, val, opts) {
      return _set(key, val, opts, ssr);
    },
    has: function has(key) {
      return _has(key, ssr);
    },
    remove: function remove(key, options) {
      return _remove(key, options, ssr);
    },
    all: function all() {
      return _get(null, ssr);
    }
  };
}
/* harmony default export */ var cookies = ({
  parseSSR: function parseSSR(ssr) {
    return ssr ? getObject({
      ssr: ssr
    }) : this;
  },
  install: function install(_ref) {
    var $q = _ref.$q,
        queues = _ref.queues;

    if (platform["d" /* isSSR */]) {
      queues.server.push(function (q, ctx) {
        q.cookies = getObject(ctx);
      });
    } else {
      Object.assign(this, getObject());
      $q.cookies = this;
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/dialog.js


/* harmony default export */ var dialog = ({
  install: function install(_ref) {
    var $q = _ref.$q,
        Vue = _ref.Vue;
    this.create = $q.dialog = modal_fn(QDialog, Vue);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/loading-bar.js



/* harmony default export */ var loading_bar = ({
  start: function start() {},
  stop: function stop() {},
  increment: function increment() {},
  install: function install(_ref) {
    var $q = _ref.$q,
        Vue = _ref.Vue,
        cfg = _ref.cfg;

    if (platform["d" /* isSSR */]) {
      $q.loadingBar = this;
      return;
    }

    var bar = $q.loadingBar = new Vue({
      render: function render(h) {
        return h(QAjaxBar, {
          ref: 'bar',
          props: cfg.loadingBar
        });
      }
    }).$mount().$refs.bar;
    Object.assign(this, {
      start: bar.start,
      stop: bar.stop,
      increment: bar.increment
    });
    document.body.appendChild($q.loadingBar.$parent.$el);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/loading.js



var loading_vm,
    timeout,
    loading_props = {},
    defaults = {
  delay: 0,
  message: false,
  spinnerSize: 80,
  spinnerColor: 'white',
  messageColor: 'white',
  spinner: QSpinner["a" /* default */],
  customClass: false
};
var staticClass = 'q-loading animate-fade fullscreen column flex-center z-max';
/* harmony default export */ var loading = ({
  isActive: false,
  show: function show(opts) {
    var _this = this;

    if (platform["d" /* isSSR */]) {
      return;
    }

    loading_props = Object.assign({}, defaults, opts);

    if (typeof loading_props.customClass === 'string') {
      loading_props.customClass = loading_props.customClass.trim();
    }

    if (this.isActive) {
      loading_vm && loading_vm.$forceUpdate();
      return;
    }

    timeout = setTimeout(function () {
      timeout = null;
      var node = document.createElement('div');
      document.body.appendChild(node);
      document.body.classList.add('with-loading');
      loading_vm = new _this.__Vue({
        name: 'QLoading',
        el: node,
        render: function render(h) {
          return h('div', {
            staticClass: staticClass,
            'class': loading_props.customClass
          }, [h(loading_props.spinner, {
            props: {
              color: loading_props.spinnerColor,
              size: loading_props.spinnerSize
            }
          }), loading_props.message ? h('div', {
            'class': "text-".concat(loading_props.messageColor),
            domProps: {
              innerHTML: loading_props.message
            }
          }) : null]);
        }
      });
    }, loading_props.delay);
    this.isActive = true;
  },
  hide: function hide() {
    if (!this.isActive) {
      return;
    }

    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    } else {
      loading_vm.$destroy();
      document.body.classList.remove('with-loading');
      loading_vm.$el.remove();
      loading_vm = null;
    }

    this.isActive = false;
  },
  setDefaults: function setDefaults(opts) {
    Object.assign(defaults, opts);
  },
  __Vue: null,
  install: function install(_ref) {
    var $q = _ref.$q,
        Vue = _ref.Vue,
        loading = _ref.cfg.loading;
    loading && this.setDefaults(loading);
    $q.loading = this;
    this.__Vue = Vue;
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/meta.js









var updateId, ssrTakeover;

function normalize(meta) {
  if (meta.title) {
    meta.title = meta.titleTemplate ? meta.titleTemplate(meta.title || '') : meta.title;
    delete meta.titleTemplate;
  }

  ;
  [['meta', 'content'], ['link', 'href']].forEach(function (type) {
    var metaType = meta[type[0]],
        metaProp = type[1];

    for (var name in metaType) {
      var metaLink = metaType[name];

      if (metaLink.template) {
        if (Object.keys(metaLink).length === 1) {
          delete metaType[name];
        } else {
          metaLink[metaProp] = metaLink.template(metaLink[metaProp] || '');
          delete metaLink.template;
        }
      }
    }
  });
}

function changed(old, def) {
  if (Object.keys(old).length !== Object.keys(def).length) {
    return true;
  }

  for (var key in old) {
    if (old[key] !== def[key]) {
      return true;
    }
  }
}

function bodyFilter(name) {
  return !['class', 'style'].includes(name);
}

function htmlFilter(name) {
  return !['lang', 'dir'].includes(name);
}

function diff(meta, other) {
  var add = {},
      remove = {};

  if (!meta) {
    return {
      add: other,
      remove: remove
    };
  }

  if (meta.title !== other.title) {
    add.title = other.title;
  }

  ;
  ['meta', 'link', 'script', 'htmlAttr', 'bodyAttr'].forEach(function (type) {
    var old = meta[type],
        cur = other[type];
    remove[type] = [];

    if (!old) {
      add[type] = cur;
      return;
    }

    add[type] = {};

    for (var key in old) {
      if (!cur.hasOwnProperty(key)) {
        remove[type].push(key);
      }
    }

    for (var _key in cur) {
      if (!old.hasOwnProperty(_key)) {
        add[type][_key] = cur[_key];
      } else if (changed(old[_key], cur[_key])) {
        remove[type].push(_key);
        add[type][_key] = cur[_key];
      }
    }
  });
  return {
    add: add,
    remove: remove
  };
}

function meta_apply(_ref) {
  var add = _ref.add,
      remove = _ref.remove;

  if (add.title) {
    document.title = add.title;
  }

  if (Object.keys(remove).length > 0) {
    ['meta', 'link', 'script'].forEach(function (type) {
      remove[type].forEach(function (name) {
        document.head.querySelector("".concat(type, "[data-qmeta=\"").concat(name, "\"]")).remove();
      });
    });
    remove.htmlAttr.filter(htmlFilter).forEach(function (name) {
      document.documentElement.removeAttribute(name);
    });
    remove.bodyAttr.filter(bodyFilter).forEach(function (name) {
      document.body.removeAttribute(name);
    });
  }

  ;
  ['meta', 'link', 'script'].forEach(function (type) {
    var metaType = add[type];

    for (var name in metaType) {
      var tag = document.createElement(type);

      for (var att in metaType[name]) {
        if (att !== 'innerHTML') {
          tag.setAttribute(att, metaType[name][att]);
        }
      }

      tag.setAttribute('data-qmeta', name);

      if (type === 'script') {
        tag.innerHTML = metaType[name].innerHTML || '';
      }

      document.head.appendChild(tag);
    }
  });
  Object.keys(add.htmlAttr).filter(htmlFilter).forEach(function (name) {
    document.documentElement.setAttribute(name, add.htmlAttr[name] || '');
  });
  Object.keys(add.bodyAttr).filter(bodyFilter).forEach(function (name) {
    document.body.setAttribute(name, add.bodyAttr[name] || '');
  });
}

function parseMeta(component, meta) {
  if (component._inactive) {
    return;
  }

  var hasMeta = component.$options.meta;

  if (hasMeta) {
    extend(true, meta, component.__qMeta);

    if (hasMeta.stopPropagation) {
      return;
    }
  }

  component.$children && component.$children.forEach(function (child) {
    parseMeta(child, meta);
  });
}

function updateClient() {
  if (ssrTakeover) {
    ssrTakeover = false;
    this.$root.__currentMeta = window.__Q_META__;
    document.body.querySelector('script[data-qmeta-init]').remove();
    return;
  }

  var meta = {
    title: '',
    titleTemplate: null,
    meta: {},
    link: {},
    script: {},
    htmlAttr: {},
    bodyAttr: {}
  };
  parseMeta(this.$root, meta);
  normalize(meta);
  meta_apply(diff(this.$root.__currentMeta, meta));
  this.$root.__currentMeta = meta;
}

function getAttr(seed) {
  return function (att) {
    var val = seed[att];
    return att + (val !== void 0 ? "=\"".concat(val, "\"") : '');
  };
}

function getHead(meta) {
  var output = '';

  if (meta.title) {
    output += "<title>".concat(meta.title, "</title>");
  }

  ;
  ['meta', 'link', 'script'].forEach(function (type) {
    var metaType = meta[type];

    for (var att in metaType) {
      var attrs = Object.keys(metaType[att]).filter(function (att) {
        return att !== 'innerHTML';
      }).map(getAttr(metaType[att]));
      output += "<".concat(type, " ").concat(attrs.join(' '), " data-qmeta=\"").concat(att, "\">");

      if (type === 'script') {
        output += (metaType[att].innerHTML || '') + "</script>";
      }
    }
  });
  return output;
}

function getServerMeta(app, html) {
  var meta = {
    title: '',
    titleTemplate: null,
    meta: {},
    link: {},
    htmlAttr: {},
    bodyAttr: {},
    noscript: {}
  };
  parseMeta(app, meta);
  normalize(meta);
  var tokens = {
    '%%Q_HTML_ATTRS%%': Object.keys(meta.htmlAttr).filter(htmlFilter).map(getAttr(meta.htmlAttr)).join(' '),
    '%%Q_HEAD_TAGS%%': getHead(meta),
    '%%Q_BODY_ATTRS%%': Object.keys(meta.bodyAttr).filter(bodyFilter).map(getAttr(meta.bodyAttr)).join(' '),
    '%%Q_BODY_TAGS%%': Object.keys(meta.noscript).map(function (name) {
      return "<noscript data-qmeta=\"".concat(name, "\">").concat(meta.noscript[name], "</noscript>");
    }).join('') + "<script data-qmeta-init>window.__Q_META__=".concat(delete meta.noscript && JSON.stringify(meta), "</script>")
  };
  Object.keys(tokens).forEach(function (key) {
    html = html.replace(key, tokens[key]);
  });
  return html;
}

function beforeCreate() {
  if (this.$options.meta) {
    if (typeof this.$options.meta === 'function') {
      if (!this.$options.computed) {
        this.$options.computed = {};
      }

      this.$options.computed.__qMeta = this.$options.meta;
    } else {
      this.__qMeta = this.$options.meta;
    }
  }
}

function triggerMeta() {
  this.$options.meta && this.__qMetaUpdate();
}

/* harmony default export */ var plugins_meta = ({
  install: function install(_ref2) {
    var queues = _ref2.queues,
        Vue = _ref2.Vue;

    if (platform["d" /* isSSR */]) {
      Vue.prototype.$getMetaHTML = function (app) {
        return function (html) {
          return getServerMeta(app, html);
        };
      };

      Vue.mixin({
        beforeCreate: beforeCreate
      });
      queues.server.push(function (q, ctx) {
        ctx.ssr.Q_HTML_ATTRS += ' %%Q_HTML_ATTRS%%';
        Object.assign(ctx.ssr, {
          Q_HEAD_TAGS: '%%Q_HEAD_TAGS%%',
          Q_BODY_ATTRS: '%%Q_BODY_ATTRS%%',
          Q_BODY_TAGS: '%%Q_BODY_TAGS%%'
        });
      });
    } else {
      ssrTakeover = platform["b" /* fromSSR */];
      Vue.mixin({
        beforeCreate: beforeCreate,
        created: function created() {
          if (this.$options.meta) {
            this.__qMetaUnwatch = this.$watch('__qMeta', this.__qMetaUpdate);
          }
        },
        activated: triggerMeta,
        deactivated: triggerMeta,
        beforeMount: triggerMeta,
        destroyed: function destroyed() {
          if (this.$options.meta) {
            this.__qMetaUnwatch();

            this.__qMetaUpdate();
          }
        },
        methods: {
          __qMetaUpdate: function __qMetaUpdate() {
            clearTimeout(updateId);
            updateId = setTimeout(updateClient.bind(this), 50);
          }
        }
      });
    }
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/plugins/notify.js
var notify = __webpack_require__("133b");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/screen.js






var SIZE_LIST = ['sm', 'md', 'lg', 'xl'];
/* harmony default export */ var screen = ({
  width: 0,
  sizes: {
    sm: 576,
    md: 768,
    lg: 992,
    xl: 1200
  },
  lt: {
    sm: true,
    md: true,
    lg: true,
    xl: true
  },
  gt: {},
  xs: true,
  setSizes: function setSizes() {},
  setDebounce: function setDebounce() {},
  install: function install(_ref) {
    var _this = this;

    var $q = _ref.$q,
        queues = _ref.queues,
        Vue = _ref.Vue;

    if (platform["d" /* isSSR */]) {
      $q.screen = this;
      return;
    }

    var update = function update(resized) {
      var w = window.innerWidth,
          s = _this.sizes;

      if (resized && w === _this.width) {
        return;
      }

      _this.width = w;
      _this.gt.xs = w >= s.sm;
      _this.gt.sm = w >= s.md;
      _this.gt.md = w >= s.lg;
      _this.gt.lg = w >= s.xl;
      _this.lt.sm = w < s.sm;
      _this.lt.md = w < s.md;
      _this.lt.lg = w < s.lg;
      _this.lt.xl = w < s.xl;
      _this.xs = _this.lt.sm;
      _this.sm = _this.gt.xs && _this.lt.md;
      _this.md = _this.gt.sm && _this.lt.lg;
      _this.lg = _this.gt.md && _this.lt.xl;
      _this.xl = w > s.xl;
    };

    var updateEvt,
        updateSizes = {},
        updateDebounce;

    this.setSizes = function (sizes) {
      SIZE_LIST.forEach(function (name) {
        if (sizes[name]) {
          updateSizes[name] = sizes[name];
        }
      });
    };

    this.setDebounce = function (deb) {
      updateDebounce = deb;
    };

    var start = function start() {
      var style = getComputedStyle(document.body);

      if (style.getPropertyValue('--q-size-sm')) {
        SIZE_LIST.forEach(function (name) {
          _this.sizes[name] = parseInt(style.getPropertyValue("--q-size-".concat(name)), 10);
        });
      }

      _this.setSizes = function (sizes) {
        SIZE_LIST.forEach(function (name) {
          if (sizes[name]) {
            _this.sizes[name] = sizes[name];
          }
        });
        update();
      };

      _this.setDebounce = function (delay) {
        var fn = function fn() {
          update(true);
        };

        updateEvt && window.removeEventListener('resize', updateEvt, utils_event["f" /* listenOpts */].passive);
        updateEvt = delay > 0 ? debounce(fn, delay) : fn;
        window.addEventListener('resize', updateEvt, utils_event["f" /* listenOpts */].passive);
      };

      _this.setDebounce(updateDebounce || 100);

      if (Object.keys(updateSizes).length > 0) {
        _this.setSizes(updateSizes);

        updateSizes = null;
      } else {
        update();
      }
    };

    if (platform["b" /* fromSSR */]) {
      queues.takeover.push(start);
    } else {
      start();
    }

    Vue.util.defineReactive($q, 'screen', this);
  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.constructor.js
var es6_regexp_constructor = __webpack_require__("3b2b");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/web-storage.js




function web_storage_encode(value) {
  if (Object.prototype.toString.call(value) === '[object Date]') {
    return '__q_date|' + value.toUTCString();
  }

  if (Object.prototype.toString.call(value) === '[object RegExp]') {
    return '__q_expr|' + value.source;
  }

  if (typeof value === 'number') {
    return '__q_numb|' + value;
  }

  if (typeof value === 'boolean') {
    return '__q_bool|' + (value ? '1' : '0');
  }

  if (typeof value === 'string') {
    return '__q_strn|' + value;
  }

  if (typeof value === 'function') {
    return '__q_strn|' + value.toString();
  }

  if (value === Object(value)) {
    return '__q_objt|' + JSON.stringify(value);
  }

  return value;
}

function web_storage_decode(value) {
  var type, length, source;
  length = value.length;

  if (length < 9) {
    return value;
  }

  type = value.substr(0, 8);
  source = value.substring(9);

  switch (type) {
    case '__q_date':
      return new Date(source);

    case '__q_expr':
      return new RegExp(source);

    case '__q_numb':
      return Number(source);

    case '__q_bool':
      return Boolean(source === '1');

    case '__q_strn':
      return '' + source;

    case '__q_objt':
      return JSON.parse(source);

    default:
      return value;
  }
}

function getEmptyStorage() {
  var fn = function fn() {};

  return {
    has: fn,
    get: {
      length: fn,
      item: fn,
      index: fn,
      all: fn
    },
    set: fn,
    remove: fn,
    clear: fn,
    isEmpty: fn
  };
}
function getStorage(type) {
  var webStorage = window[type + 'Storage'],
      get = function get(key) {
    var item = webStorage.getItem(key);
    return item ? web_storage_decode(item) : null;
  };

  return {
    has: function has(key) {
      return webStorage.getItem(key) !== null;
    },
    get: {
      length: function length() {
        return webStorage.length;
      },
      item: get,
      index: function index(_index) {
        if (_index < webStorage.length) {
          return get(webStorage.key(_index));
        }
      },
      all: function all() {
        var result = {},
            key,
            len = webStorage.length;

        for (var i = 0; i < len; i++) {
          key = webStorage.key(i);
          result[key] = get(key);
        }

        return result;
      }
    },
    set: function set(key, value) {
      webStorage.setItem(key, web_storage_encode(value));
    },
    remove: function remove(key) {
      webStorage.removeItem(key);
    },
    clear: function clear() {
      webStorage.clear();
    },
    isEmpty: function isEmpty() {
      return webStorage.length === 0;
    }
  };
}
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/local-storage.js



/* harmony default export */ var local_storage = ({
  install: function install(_ref) {
    var $q = _ref.$q;
    var storage = platform["d" /* isSSR */] || !platform["c" /* hasWebStorage */] ? getEmptyStorage() : getStorage('local');
    $q.localStorage = storage;
    Object.assign(this, storage);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins/session-storage.js



/* harmony default export */ var session_storage = ({
  install: function install(_ref) {
    var $q = _ref.$q;
    var storage = platform["d" /* isSSR */] || !platform["c" /* hasWebStorage */] ? getEmptyStorage() : getStorage('session');
    $q.sessionStorage = storage;
    Object.assign(this, storage);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/plugins.js















// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/open-url.js

/* harmony default export */ var open_url = (function (url, reject) {
  if (platform["a" /* default */].is.cordova && navigator && navigator.app) {
    return navigator.app.loadUrl(url, {
      openExternal: true
    });
  }

  var win = window.open(url, '_blank');

  if (win) {
    win.focus();
    return win;
  } else {
    reject && reject();
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils.js

















function noop() {}


// CONCATENATED MODULE: ./node_modules/quasar-framework/src/index.esm.js
/* concated harmony reexport QActionSheet */__webpack_require__.d(__webpack_exports__, "QActionSheet", function() { return QActionSheet; });
/* concated harmony reexport QAjaxBar */__webpack_require__.d(__webpack_exports__, "QAjaxBar", function() { return QAjaxBar; });
/* concated harmony reexport QAlert */__webpack_require__.d(__webpack_exports__, "QAlert", function() { return QAlert["a" /* default */]; });
/* concated harmony reexport QAutocomplete */__webpack_require__.d(__webpack_exports__, "QAutocomplete", function() { return QAutocomplete; });
/* concated harmony reexport QBreadcrumbs */__webpack_require__.d(__webpack_exports__, "QBreadcrumbs", function() { return QBreadcrumbs; });
/* concated harmony reexport QBreadcrumbsEl */__webpack_require__.d(__webpack_exports__, "QBreadcrumbsEl", function() { return QBreadcrumbsEl; });
/* concated harmony reexport QBtn */__webpack_require__.d(__webpack_exports__, "QBtn", function() { return QBtn["a" /* default */]; });
/* concated harmony reexport QBtnGroup */__webpack_require__.d(__webpack_exports__, "QBtnGroup", function() { return QBtnGroup; });
/* concated harmony reexport QBtnDropdown */__webpack_require__.d(__webpack_exports__, "QBtnDropdown", function() { return QBtnDropdown; });
/* concated harmony reexport QBtnToggle */__webpack_require__.d(__webpack_exports__, "QBtnToggle", function() { return QBtnToggle; });
/* concated harmony reexport QCard */__webpack_require__.d(__webpack_exports__, "QCard", function() { return QCard; });
/* concated harmony reexport QCardTitle */__webpack_require__.d(__webpack_exports__, "QCardTitle", function() { return QCardTitle; });
/* concated harmony reexport QCardMain */__webpack_require__.d(__webpack_exports__, "QCardMain", function() { return QCardMain; });
/* concated harmony reexport QCardActions */__webpack_require__.d(__webpack_exports__, "QCardActions", function() { return QCardActions; });
/* concated harmony reexport QCardMedia */__webpack_require__.d(__webpack_exports__, "QCardMedia", function() { return QCardMedia; });
/* concated harmony reexport QCardSeparator */__webpack_require__.d(__webpack_exports__, "QCardSeparator", function() { return QCardSeparator; });
/* concated harmony reexport QCarousel */__webpack_require__.d(__webpack_exports__, "QCarousel", function() { return QCarousel; });
/* concated harmony reexport QCarouselSlide */__webpack_require__.d(__webpack_exports__, "QCarouselSlide", function() { return QCarouselSlide; });
/* concated harmony reexport QCarouselControl */__webpack_require__.d(__webpack_exports__, "QCarouselControl", function() { return QCarouselControl; });
/* concated harmony reexport QChatMessage */__webpack_require__.d(__webpack_exports__, "QChatMessage", function() { return QChatMessage; });
/* concated harmony reexport QCheckbox */__webpack_require__.d(__webpack_exports__, "QCheckbox", function() { return QCheckbox["a" /* default */]; });
/* concated harmony reexport QChip */__webpack_require__.d(__webpack_exports__, "QChip", function() { return QChip["a" /* default */]; });
/* concated harmony reexport QChipsInput */__webpack_require__.d(__webpack_exports__, "QChipsInput", function() { return QChipsInput; });
/* concated harmony reexport QCollapsible */__webpack_require__.d(__webpack_exports__, "QCollapsible", function() { return QCollapsible; });
/* concated harmony reexport QColor */__webpack_require__.d(__webpack_exports__, "QColor", function() { return QColor; });
/* concated harmony reexport QColorPicker */__webpack_require__.d(__webpack_exports__, "QColorPicker", function() { return QColorPicker; });
/* concated harmony reexport QContextMenu */__webpack_require__.d(__webpack_exports__, "QContextMenu", function() { return QContextMenu; });
/* concated harmony reexport QDatetime */__webpack_require__.d(__webpack_exports__, "QDatetime", function() { return QDatetime; });
/* concated harmony reexport QDatetimePicker */__webpack_require__.d(__webpack_exports__, "QDatetimePicker", function() { return QDatetimePicker_mat; });
/* concated harmony reexport QDialog */__webpack_require__.d(__webpack_exports__, "QDialog", function() { return QDialog; });
/* concated harmony reexport QEditor */__webpack_require__.d(__webpack_exports__, "QEditor", function() { return QEditor; });
/* concated harmony reexport QFab */__webpack_require__.d(__webpack_exports__, "QFab", function() { return QFab; });
/* concated harmony reexport QFabAction */__webpack_require__.d(__webpack_exports__, "QFabAction", function() { return QFabAction; });
/* concated harmony reexport QField */__webpack_require__.d(__webpack_exports__, "QField", function() { return QField; });
/* concated harmony reexport QIcon */__webpack_require__.d(__webpack_exports__, "QIcon", function() { return QIcon["a" /* default */]; });
/* concated harmony reexport QInfiniteScroll */__webpack_require__.d(__webpack_exports__, "QInfiniteScroll", function() { return QInfiniteScroll; });
/* concated harmony reexport QInnerLoading */__webpack_require__.d(__webpack_exports__, "QInnerLoading", function() { return QInnerLoading; });
/* concated harmony reexport QInput */__webpack_require__.d(__webpack_exports__, "QInput", function() { return QInput["a" /* default */]; });
/* concated harmony reexport QInputFrame */__webpack_require__.d(__webpack_exports__, "QInputFrame", function() { return QInputFrame["a" /* default */]; });
/* concated harmony reexport QJumbotron */__webpack_require__.d(__webpack_exports__, "QJumbotron", function() { return QJumbotron; });
/* concated harmony reexport QKnob */__webpack_require__.d(__webpack_exports__, "QKnob", function() { return QKnob; });
/* concated harmony reexport QLayout */__webpack_require__.d(__webpack_exports__, "QLayout", function() { return QLayout["a" /* default */]; });
/* concated harmony reexport QLayoutDrawer */__webpack_require__.d(__webpack_exports__, "QLayoutDrawer", function() { return QLayoutDrawer["a" /* default */]; });
/* concated harmony reexport QLayoutFooter */__webpack_require__.d(__webpack_exports__, "QLayoutFooter", function() { return QLayoutFooter; });
/* concated harmony reexport QLayoutHeader */__webpack_require__.d(__webpack_exports__, "QLayoutHeader", function() { return QLayoutHeader["a" /* default */]; });
/* concated harmony reexport QPage */__webpack_require__.d(__webpack_exports__, "QPage", function() { return QPage["a" /* default */]; });
/* concated harmony reexport QPageContainer */__webpack_require__.d(__webpack_exports__, "QPageContainer", function() { return QPageContainer["a" /* default */]; });
/* concated harmony reexport QPageSticky */__webpack_require__.d(__webpack_exports__, "QPageSticky", function() { return QPageSticky; });
/* concated harmony reexport QItem */__webpack_require__.d(__webpack_exports__, "QItem", function() { return QItem["a" /* default */]; });
/* concated harmony reexport QItemSeparator */__webpack_require__.d(__webpack_exports__, "QItemSeparator", function() { return QItemSeparator; });
/* concated harmony reexport QItemMain */__webpack_require__.d(__webpack_exports__, "QItemMain", function() { return QItemMain["a" /* default */]; });
/* concated harmony reexport QItemSide */__webpack_require__.d(__webpack_exports__, "QItemSide", function() { return QItemSide["a" /* default */]; });
/* concated harmony reexport QItemTile */__webpack_require__.d(__webpack_exports__, "QItemTile", function() { return QItemTile; });
/* concated harmony reexport QItemWrapper */__webpack_require__.d(__webpack_exports__, "QItemWrapper", function() { return QItemWrapper["a" /* default */]; });
/* concated harmony reexport QList */__webpack_require__.d(__webpack_exports__, "QList", function() { return QList["a" /* default */]; });
/* concated harmony reexport QListHeader */__webpack_require__.d(__webpack_exports__, "QListHeader", function() { return QListHeader["a" /* default */]; });
/* concated harmony reexport QModal */__webpack_require__.d(__webpack_exports__, "QModal", function() { return QModal; });
/* concated harmony reexport QModalLayout */__webpack_require__.d(__webpack_exports__, "QModalLayout", function() { return QModalLayout; });
/* concated harmony reexport QNoSsr */__webpack_require__.d(__webpack_exports__, "QNoSsr", function() { return QNoSsr; });
/* concated harmony reexport QResizeObservable */__webpack_require__.d(__webpack_exports__, "QResizeObservable", function() { return QResizeObservable["a" /* default */]; });
/* concated harmony reexport QScrollObservable */__webpack_require__.d(__webpack_exports__, "QScrollObservable", function() { return QScrollObservable["a" /* default */]; });
/* concated harmony reexport QWindowResizeObservable */__webpack_require__.d(__webpack_exports__, "QWindowResizeObservable", function() { return QWindowResizeObservable; });
/* concated harmony reexport QOptionGroup */__webpack_require__.d(__webpack_exports__, "QOptionGroup", function() { return QOptionGroup; });
/* concated harmony reexport QPagination */__webpack_require__.d(__webpack_exports__, "QPagination", function() { return QPagination; });
/* concated harmony reexport QParallax */__webpack_require__.d(__webpack_exports__, "QParallax", function() { return QParallax; });
/* concated harmony reexport QPopover */__webpack_require__.d(__webpack_exports__, "QPopover", function() { return QPopover["a" /* default */]; });
/* concated harmony reexport QPopupEdit */__webpack_require__.d(__webpack_exports__, "QPopupEdit", function() { return QPopupEdit; });
/* concated harmony reexport QProgress */__webpack_require__.d(__webpack_exports__, "QProgress", function() { return QProgress["a" /* default */]; });
/* concated harmony reexport QPullToRefresh */__webpack_require__.d(__webpack_exports__, "QPullToRefresh", function() { return QPullToRefresh; });
/* concated harmony reexport QRadio */__webpack_require__.d(__webpack_exports__, "QRadio", function() { return QRadio["a" /* default */]; });
/* concated harmony reexport QRange */__webpack_require__.d(__webpack_exports__, "QRange", function() { return QRange; });
/* concated harmony reexport QRating */__webpack_require__.d(__webpack_exports__, "QRating", function() { return QRating; });
/* concated harmony reexport QScrollArea */__webpack_require__.d(__webpack_exports__, "QScrollArea", function() { return QScrollArea; });
/* concated harmony reexport QSearch */__webpack_require__.d(__webpack_exports__, "QSearch", function() { return QSearch["a" /* default */]; });
/* concated harmony reexport QSelect */__webpack_require__.d(__webpack_exports__, "QSelect", function() { return QSelect["a" /* default */]; });
/* concated harmony reexport QSlideTransition */__webpack_require__.d(__webpack_exports__, "QSlideTransition", function() { return QSlideTransition; });
/* concated harmony reexport QSlider */__webpack_require__.d(__webpack_exports__, "QSlider", function() { return QSlider; });
/* concated harmony reexport QSpinner */__webpack_require__.d(__webpack_exports__, "QSpinner", function() { return QSpinner["a" /* default */]; });
/* concated harmony reexport QSpinnerAudio */__webpack_require__.d(__webpack_exports__, "QSpinnerAudio", function() { return QSpinnerAudio; });
/* concated harmony reexport QSpinnerBall */__webpack_require__.d(__webpack_exports__, "QSpinnerBall", function() { return QSpinnerBall; });
/* concated harmony reexport QSpinnerBars */__webpack_require__.d(__webpack_exports__, "QSpinnerBars", function() { return QSpinnerBars; });
/* concated harmony reexport QSpinnerCircles */__webpack_require__.d(__webpack_exports__, "QSpinnerCircles", function() { return QSpinnerCircles; });
/* concated harmony reexport QSpinnerComment */__webpack_require__.d(__webpack_exports__, "QSpinnerComment", function() { return QSpinnerComment; });
/* concated harmony reexport QSpinnerCube */__webpack_require__.d(__webpack_exports__, "QSpinnerCube", function() { return QSpinnerCube; });
/* concated harmony reexport QSpinnerDots */__webpack_require__.d(__webpack_exports__, "QSpinnerDots", function() { return QSpinnerDots; });
/* concated harmony reexport QSpinnerFacebook */__webpack_require__.d(__webpack_exports__, "QSpinnerFacebook", function() { return QSpinnerFacebook; });
/* concated harmony reexport QSpinnerGears */__webpack_require__.d(__webpack_exports__, "QSpinnerGears", function() { return QSpinnerGears; });
/* concated harmony reexport QSpinnerGrid */__webpack_require__.d(__webpack_exports__, "QSpinnerGrid", function() { return QSpinnerGrid; });
/* concated harmony reexport QSpinnerHearts */__webpack_require__.d(__webpack_exports__, "QSpinnerHearts", function() { return QSpinnerHearts; });
/* concated harmony reexport QSpinnerHourglass */__webpack_require__.d(__webpack_exports__, "QSpinnerHourglass", function() { return QSpinnerHourglass; });
/* concated harmony reexport QSpinnerInfinity */__webpack_require__.d(__webpack_exports__, "QSpinnerInfinity", function() { return QSpinnerInfinity; });
/* concated harmony reexport QSpinnerIos */__webpack_require__.d(__webpack_exports__, "QSpinnerIos", function() { return QSpinner_ios; });
/* concated harmony reexport QSpinnerMat */__webpack_require__.d(__webpack_exports__, "QSpinnerMat", function() { return QSpinner_mat["a" /* default */]; });
/* concated harmony reexport QSpinnerOval */__webpack_require__.d(__webpack_exports__, "QSpinnerOval", function() { return QSpinnerOval; });
/* concated harmony reexport QSpinnerPie */__webpack_require__.d(__webpack_exports__, "QSpinnerPie", function() { return QSpinnerPie; });
/* concated harmony reexport QSpinnerPuff */__webpack_require__.d(__webpack_exports__, "QSpinnerPuff", function() { return QSpinnerPuff; });
/* concated harmony reexport QSpinnerRadio */__webpack_require__.d(__webpack_exports__, "QSpinnerRadio", function() { return QSpinnerRadio; });
/* concated harmony reexport QSpinnerRings */__webpack_require__.d(__webpack_exports__, "QSpinnerRings", function() { return QSpinnerRings; });
/* concated harmony reexport QSpinnerTail */__webpack_require__.d(__webpack_exports__, "QSpinnerTail", function() { return QSpinnerTail; });
/* concated harmony reexport QStep */__webpack_require__.d(__webpack_exports__, "QStep", function() { return QStep; });
/* concated harmony reexport QStepper */__webpack_require__.d(__webpack_exports__, "QStepper", function() { return QStepper; });
/* concated harmony reexport QStepperNavigation */__webpack_require__.d(__webpack_exports__, "QStepperNavigation", function() { return QStepperNavigation; });
/* concated harmony reexport QRouteTab */__webpack_require__.d(__webpack_exports__, "QRouteTab", function() { return QRouteTab; });
/* concated harmony reexport QTab */__webpack_require__.d(__webpack_exports__, "QTab", function() { return QTab; });
/* concated harmony reexport QTabPane */__webpack_require__.d(__webpack_exports__, "QTabPane", function() { return QTabPane; });
/* concated harmony reexport QTabs */__webpack_require__.d(__webpack_exports__, "QTabs", function() { return QTabs; });
/* concated harmony reexport QTable */__webpack_require__.d(__webpack_exports__, "QTable", function() { return QTable["a" /* default */]; });
/* concated harmony reexport QTh */__webpack_require__.d(__webpack_exports__, "QTh", function() { return QTh["a" /* default */]; });
/* concated harmony reexport QTr */__webpack_require__.d(__webpack_exports__, "QTr", function() { return QTr; });
/* concated harmony reexport QTd */__webpack_require__.d(__webpack_exports__, "QTd", function() { return QTd; });
/* concated harmony reexport QTableColumns */__webpack_require__.d(__webpack_exports__, "QTableColumns", function() { return QTableColumns; });
/* concated harmony reexport QTimeline */__webpack_require__.d(__webpack_exports__, "QTimeline", function() { return QTimeline; });
/* concated harmony reexport QTimelineEntry */__webpack_require__.d(__webpack_exports__, "QTimelineEntry", function() { return QTimelineEntry; });
/* concated harmony reexport QToggle */__webpack_require__.d(__webpack_exports__, "QToggle", function() { return QToggle["a" /* default */]; });
/* concated harmony reexport QToolbar */__webpack_require__.d(__webpack_exports__, "QToolbar", function() { return QToolbar["a" /* default */]; });
/* concated harmony reexport QToolbarTitle */__webpack_require__.d(__webpack_exports__, "QToolbarTitle", function() { return QToolbarTitle["a" /* default */]; });
/* concated harmony reexport QTooltip */__webpack_require__.d(__webpack_exports__, "QTooltip", function() { return QTooltip; });
/* concated harmony reexport QTree */__webpack_require__.d(__webpack_exports__, "QTree", function() { return QTree; });
/* concated harmony reexport QUploader */__webpack_require__.d(__webpack_exports__, "QUploader", function() { return QUploader; });
/* concated harmony reexport QVideo */__webpack_require__.d(__webpack_exports__, "QVideo", function() { return QVideo; });
/* concated harmony reexport BackToTop */__webpack_require__.d(__webpack_exports__, "BackToTop", function() { return back_to_top; });
/* concated harmony reexport CloseOverlay */__webpack_require__.d(__webpack_exports__, "CloseOverlay", function() { return close_overlay; });
/* concated harmony reexport GoBack */__webpack_require__.d(__webpack_exports__, "GoBack", function() { return go_back; });
/* concated harmony reexport Ripple */__webpack_require__.d(__webpack_exports__, "Ripple", function() { return ripple["a" /* default */]; });
/* concated harmony reexport ScrollFire */__webpack_require__.d(__webpack_exports__, "ScrollFire", function() { return scroll_fire; });
/* concated harmony reexport Scroll */__webpack_require__.d(__webpack_exports__, "Scroll", function() { return directives_scroll; });
/* concated harmony reexport TouchHold */__webpack_require__.d(__webpack_exports__, "TouchHold", function() { return touch_hold; });
/* concated harmony reexport TouchPan */__webpack_require__.d(__webpack_exports__, "TouchPan", function() { return touch_pan["a" /* default */]; });
/* concated harmony reexport TouchSwipe */__webpack_require__.d(__webpack_exports__, "TouchSwipe", function() { return touch_swipe["a" /* default */]; });
/* concated harmony reexport ActionSheet */__webpack_require__.d(__webpack_exports__, "ActionSheet", function() { return action_sheet; });
/* concated harmony reexport AddressbarColor */__webpack_require__.d(__webpack_exports__, "AddressbarColor", function() { return addressbar_color; });
/* concated harmony reexport AppFullscreen */__webpack_require__.d(__webpack_exports__, "AppFullscreen", function() { return app_fullscreen; });
/* concated harmony reexport AppVisibility */__webpack_require__.d(__webpack_exports__, "AppVisibility", function() { return app_visibility; });
/* concated harmony reexport Cookies */__webpack_require__.d(__webpack_exports__, "Cookies", function() { return cookies; });
/* concated harmony reexport Dialog */__webpack_require__.d(__webpack_exports__, "Dialog", function() { return dialog; });
/* concated harmony reexport LoadingBar */__webpack_require__.d(__webpack_exports__, "LoadingBar", function() { return loading_bar; });
/* concated harmony reexport Loading */__webpack_require__.d(__webpack_exports__, "Loading", function() { return loading; });
/* concated harmony reexport Meta */__webpack_require__.d(__webpack_exports__, "Meta", function() { return plugins_meta; });
/* concated harmony reexport Notify */__webpack_require__.d(__webpack_exports__, "Notify", function() { return notify["a" /* default */]; });
/* concated harmony reexport Platform */__webpack_require__.d(__webpack_exports__, "Platform", function() { return platform["a" /* default */]; });
/* concated harmony reexport Screen */__webpack_require__.d(__webpack_exports__, "Screen", function() { return screen; });
/* concated harmony reexport LocalStorage */__webpack_require__.d(__webpack_exports__, "LocalStorage", function() { return local_storage; });
/* concated harmony reexport SessionStorage */__webpack_require__.d(__webpack_exports__, "SessionStorage", function() { return session_storage; });
/* concated harmony reexport animate */__webpack_require__.d(__webpack_exports__, "animate", function() { return animate; });
/* concated harmony reexport clone */__webpack_require__.d(__webpack_exports__, "clone", function() { return clone["a" /* default */]; });
/* concated harmony reexport colors */__webpack_require__.d(__webpack_exports__, "colors", function() { return colors["a" /* default */]; });
/* concated harmony reexport date */__webpack_require__.d(__webpack_exports__, "date", function() { return utils_date; });
/* concated harmony reexport debounce */__webpack_require__.d(__webpack_exports__, "debounce", function() { return debounce; });
/* concated harmony reexport dom */__webpack_require__.d(__webpack_exports__, "dom", function() { return dom["b" /* default */]; });
/* concated harmony reexport easing */__webpack_require__.d(__webpack_exports__, "easing", function() { return utils_easing; });
/* concated harmony reexport event */__webpack_require__.d(__webpack_exports__, "event", function() { return utils_event["a" /* default */]; });
/* concated harmony reexport extend */__webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* concated harmony reexport filter */__webpack_require__.d(__webpack_exports__, "filter", function() { return filter; });
/* concated harmony reexport format */__webpack_require__.d(__webpack_exports__, "format", function() { return format["c" /* default */]; });
/* concated harmony reexport frameDebounce */__webpack_require__.d(__webpack_exports__, "frameDebounce", function() { return frame_debounce["a" /* default */]; });
/* concated harmony reexport noop */__webpack_require__.d(__webpack_exports__, "noop", function() { return noop; });
/* concated harmony reexport openURL */__webpack_require__.d(__webpack_exports__, "openURL", function() { return open_url; });
/* concated harmony reexport scroll */__webpack_require__.d(__webpack_exports__, "scroll", function() { return utils_scroll["a" /* default */]; });
/* concated harmony reexport throttle */__webpack_require__.d(__webpack_exports__, "throttle", function() { return throttle; });
/* concated harmony reexport uid */__webpack_require__.d(__webpack_exports__, "uid", function() { return uid["a" /* default */]; });









/* harmony default export */ var index_esm = __webpack_exports__["default"] = (Object(objectSpread["a" /* default */])({}, vue_plugin["a" /* default */], {
  install: function install(Vue, opts) {
    vue_plugin["a" /* default */].install(Vue, Object(objectSpread["a" /* default */])({
      components: components_namespaceObject,
      directives: directives_namespaceObject,
      plugins: plugins_namespaceObject
    }, opts));
  }
}));

/***/ }),

/***/ "65d9":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
  * vue-class-component v6.3.2
  * (c) 2015-present Evan You
  * @license MIT
  */


Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Vue = _interopDefault(__webpack_require__("2b0e"));

var reflectionIsSupported = typeof Reflect !== 'undefined' && Reflect.defineMetadata;
function copyReflectionMetadata(to, from) {
    forwardMetadata(to, from);
    Object.getOwnPropertyNames(from.prototype).forEach(function (key) {
        forwardMetadata(to.prototype, from.prototype, key);
    });
    Object.getOwnPropertyNames(from).forEach(function (key) {
        forwardMetadata(to, from, key);
    });
}
function forwardMetadata(to, from, propertyKey) {
    var metaKeys = propertyKey
        ? Reflect.getOwnMetadataKeys(from, propertyKey)
        : Reflect.getOwnMetadataKeys(from);
    metaKeys.forEach(function (metaKey) {
        var metadata = propertyKey
            ? Reflect.getOwnMetadata(metaKey, from, propertyKey)
            : Reflect.getOwnMetadata(metaKey, from);
        if (propertyKey) {
            Reflect.defineMetadata(metaKey, metadata, to, propertyKey);
        }
        else {
            Reflect.defineMetadata(metaKey, metadata, to);
        }
    });
}

var fakeArray = { __proto__: [] };
var hasProto = fakeArray instanceof Array;
function createDecorator(factory) {
    return function (target, key, index) {
        var Ctor = typeof target === 'function'
            ? target
            : target.constructor;
        if (!Ctor.__decorators__) {
            Ctor.__decorators__ = [];
        }
        if (typeof index !== 'number') {
            index = undefined;
        }
        Ctor.__decorators__.push(function (options) { return factory(options, key, index); });
    };
}
function mixins() {
    var Ctors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        Ctors[_i] = arguments[_i];
    }
    return Vue.extend({ mixins: Ctors });
}
function isPrimitive(value) {
    var type = typeof value;
    return value == null || (type !== 'object' && type !== 'function');
}
function warn(message) {
    if (typeof console !== 'undefined') {
        console.warn('[vue-class-component] ' + message);
    }
}

function collectDataFromConstructor(vm, Component) {
    // override _init to prevent to init as Vue instance
    var originalInit = Component.prototype._init;
    Component.prototype._init = function () {
        var _this = this;
        // proxy to actual vm
        var keys = Object.getOwnPropertyNames(vm);
        // 2.2.0 compat (props are no longer exposed as self properties)
        if (vm.$options.props) {
            for (var key in vm.$options.props) {
                if (!vm.hasOwnProperty(key)) {
                    keys.push(key);
                }
            }
        }
        keys.forEach(function (key) {
            if (key.charAt(0) !== '_') {
                Object.defineProperty(_this, key, {
                    get: function () { return vm[key]; },
                    set: function (value) { vm[key] = value; },
                    configurable: true
                });
            }
        });
    };
    // should be acquired class property values
    var data = new Component();
    // restore original _init to avoid memory leak (#209)
    Component.prototype._init = originalInit;
    // create plain data object
    var plainData = {};
    Object.keys(data).forEach(function (key) {
        if (data[key] !== undefined) {
            plainData[key] = data[key];
        }
    });
    if (false) {}
    return plainData;
}

var $internalHooks = [
    'data',
    'beforeCreate',
    'created',
    'beforeMount',
    'mounted',
    'beforeDestroy',
    'destroyed',
    'beforeUpdate',
    'updated',
    'activated',
    'deactivated',
    'render',
    'errorCaptured' // 2.5
];
function componentFactory(Component, options) {
    if (options === void 0) { options = {}; }
    options.name = options.name || Component._componentTag || Component.name;
    // prototype props.
    var proto = Component.prototype;
    Object.getOwnPropertyNames(proto).forEach(function (key) {
        if (key === 'constructor') {
            return;
        }
        // hooks
        if ($internalHooks.indexOf(key) > -1) {
            options[key] = proto[key];
            return;
        }
        var descriptor = Object.getOwnPropertyDescriptor(proto, key);
        if (descriptor.value !== void 0) {
            // methods
            if (typeof descriptor.value === 'function') {
                (options.methods || (options.methods = {}))[key] = descriptor.value;
            }
            else {
                // typescript decorated data
                (options.mixins || (options.mixins = [])).push({
                    data: function () {
                        var _a;
                        return _a = {}, _a[key] = descriptor.value, _a;
                    }
                });
            }
        }
        else if (descriptor.get || descriptor.set) {
            // computed properties
            (options.computed || (options.computed = {}))[key] = {
                get: descriptor.get,
                set: descriptor.set
            };
        }
    });
    (options.mixins || (options.mixins = [])).push({
        data: function () {
            return collectDataFromConstructor(this, Component);
        }
    });
    // decorate options
    var decorators = Component.__decorators__;
    if (decorators) {
        decorators.forEach(function (fn) { return fn(options); });
        delete Component.__decorators__;
    }
    // find super
    var superProto = Object.getPrototypeOf(Component.prototype);
    var Super = superProto instanceof Vue
        ? superProto.constructor
        : Vue;
    var Extended = Super.extend(options);
    forwardStaticMembers(Extended, Component, Super);
    if (reflectionIsSupported) {
        copyReflectionMetadata(Extended, Component);
    }
    return Extended;
}
var reservedPropertyNames = [
    // Unique id
    'cid',
    // Super Vue constructor
    'super',
    // Component options that will be used by the component
    'options',
    'superOptions',
    'extendOptions',
    'sealedOptions',
    // Private assets
    'component',
    'directive',
    'filter'
];
function forwardStaticMembers(Extended, Original, Super) {
    // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable
    Object.getOwnPropertyNames(Original).forEach(function (key) {
        // `prototype` should not be overwritten
        if (key === 'prototype') {
            return;
        }
        // Some browsers does not allow reconfigure built-in properties
        var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);
        if (extendedDescriptor && !extendedDescriptor.configurable) {
            return;
        }
        var descriptor = Object.getOwnPropertyDescriptor(Original, key);
        // If the user agent does not support `__proto__` or its family (IE <= 10),
        // the sub class properties may be inherited properties from the super class in TypeScript.
        // We need to exclude such properties to prevent to overwrite
        // the component options object which stored on the extended constructor (See #192).
        // If the value is a referenced value (object or function),
        // we can check equality of them and exclude it if they have the same reference.
        // If it is a primitive value, it will be forwarded for safety.
        if (!hasProto) {
            // Only `cid` is explicitly exluded from property forwarding
            // because we cannot detect whether it is a inherited property or not
            // on the no `__proto__` environment even though the property is reserved.
            if (key === 'cid') {
                return;
            }
            var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);
            if (!isPrimitive(descriptor.value) &&
                superDescriptor &&
                superDescriptor.value === descriptor.value) {
                return;
            }
        }
        // Warn if the users manually declare reserved properties
        if (false) {}
        Object.defineProperty(Extended, key, descriptor);
    });
}

function Component(options) {
    if (typeof options === 'function') {
        return componentFactory(options);
    }
    return function (Component) {
        return componentFactory(Component, options);
    };
}
Component.registerHooks = function registerHooks(keys) {
    $internalHooks.push.apply($internalHooks, keys);
};

exports.default = Component;
exports.createDecorator = createDecorator;
exports.mixins = mixins;


/***/ }),

/***/ "66fb":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/KFOlCnqEu92Fr1MmSU5fBBc-.a1471d1d.woff";

/***/ }),

/***/ "6762":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__("5ca1");
var $includes = __webpack_require__("c366")(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__("9c6c")('includes');


/***/ }),

/***/ "6821":
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__("626a");
var defined = __webpack_require__("be13");
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),

/***/ "68c2":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6b54");
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__);


function s4() {
  return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
}

/* harmony default export */ __webpack_exports__["a"] = (function () {
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
});

/***/ }),

/***/ "69a8":
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "6a99":
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__("d3f4");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "6b54":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__("3846");
var anObject = __webpack_require__("cb7c");
var $flags = __webpack_require__("0bfb");
var DESCRIPTORS = __webpack_require__("9e1e");
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__("2aba")(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__("79e5")(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),

/***/ "6f68":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _plugins_platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a60d");

var handlers = [];
/* harmony default export */ __webpack_exports__["a"] = ({
  __installed: false,
  __install: function __install() {
    this.__installed = true;
    window.addEventListener('keyup', function (evt) {
      if (handlers.length === 0) {
        return;
      }

      if (evt.which === 27 || evt.keyCode === 27) {
        handlers[handlers.length - 1]();
      }
    });
  },
  register: function register(handler) {
    if (_plugins_platform_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].is.desktop) {
      if (!this.__installed) {
        this.__install();
      }

      handlers.push(handler);
    }
  },
  pop: function pop() {
    if (_plugins_platform_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].is.desktop) {
      handlers.pop();
    }
  }
});

/***/ }),

/***/ "6f6c":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/KFOlCnqEu92Fr1MmYUtfBBc-.8c2ade50.woff";

/***/ }),

/***/ "7051":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var D_AtWork_Projects_Einstein_src_Einstein_WebUI_node_modules_vue_babel_preset_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("fc11");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("28a5");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _observables_QScrollObservable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("fc6c");
/* harmony import */ var _observables_QResizeObservable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("363b");
/* harmony import */ var _plugins_platform_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("a60d");
/* harmony import */ var _utils_scroll_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("1528");






/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QLayout',
  provide: function provide() {
    return {
      layout: this
    };
  },
  props: {
    container: Boolean,
    view: {
      type: String,
      default: 'hhh lpr fff',
      validator: function validator(v) {
        return /^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(v.toLowerCase());
      }
    }
  },
  data: function data() {
    return {
      height: _plugins_platform_js__WEBPACK_IMPORTED_MODULE_4__[/* onSSR */ "e"] ? 0 : window.innerHeight,
      width: _plugins_platform_js__WEBPACK_IMPORTED_MODULE_4__[/* onSSR */ "e"] || this.container ? 0 : window.innerWidth,
      containerHeight: 0,
      scrollbarWidth: _plugins_platform_js__WEBPACK_IMPORTED_MODULE_4__[/* onSSR */ "e"] ? 0 : Object(_utils_scroll_js__WEBPACK_IMPORTED_MODULE_5__[/* getScrollbarWidth */ "e"])(),
      header: {
        size: 0,
        offset: 0,
        space: false
      },
      right: {
        size: 300,
        offset: 0,
        space: false
      },
      footer: {
        size: 0,
        offset: 0,
        space: false
      },
      left: {
        size: 300,
        offset: 0,
        space: false
      },
      scroll: {
        position: 0,
        direction: 'down'
      }
    };
  },
  computed: {
    rows: function rows() {
      var rows = this.view.toLowerCase().split(' ');
      return {
        top: rows[0].split(''),
        middle: rows[1].split(''),
        bottom: rows[2].split('')
      };
    },
    targetStyle: function targetStyle() {
      if (this.scrollbarWidth !== 0) {
        return Object(D_AtWork_Projects_Einstein_src_Einstein_WebUI_node_modules_vue_babel_preset_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])({}, this.$q.i18n.rtl ? 'left' : 'right', "".concat(this.scrollbarWidth, "px"));
      }
    },
    targetChildStyle: function targetChildStyle() {
      if (this.scrollbarWidth !== 0) {
        var _ref2;

        return _ref2 = {}, Object(D_AtWork_Projects_Einstein_src_Einstein_WebUI_node_modules_vue_babel_preset_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(_ref2, this.$q.i18n.rtl ? 'right' : 'left', 0), Object(D_AtWork_Projects_Einstein_src_Einstein_WebUI_node_modules_vue_babel_preset_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(_ref2, this.$q.i18n.rtl ? 'left' : 'right', "-".concat(this.scrollbarWidth, "px")), Object(D_AtWork_Projects_Einstein_src_Einstein_WebUI_node_modules_vue_babel_preset_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(_ref2, "width", "calc(100% + ".concat(this.scrollbarWidth, "px)")), _ref2;
      }
    }
  },
  created: function created() {
    this.instances = {
      header: null,
      right: null,
      footer: null,
      left: null
    };
  },
  render: function render(h) {
    var layout = h('div', {
      staticClass: 'q-layout'
    }, [h(_observables_QScrollObservable_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], {
      on: {
        scroll: this.__onPageScroll
      }
    }), h(_observables_QResizeObservable_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], {
      on: {
        resize: this.__onPageResize
      }
    }), this.$slots.default]);
    return this.container ? h('div', {
      staticClass: 'q-layout-container relative-position overflow-hidden'
    }, [h(_observables_QResizeObservable_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], {
      on: {
        resize: this.__onContainerResize
      }
    }), h('div', {
      staticClass: 'absolute-full',
      style: this.targetStyle
    }, [h('div', {
      staticClass: 'overflow-auto',
      style: this.targetChildStyle
    }, [layout])])]) : layout;
  },
  methods: {
    __animate: function __animate() {
      var _this = this;

      if (this.timer) {
        clearTimeout(this.timer);
      } else {
        document.body.classList.add('q-layout-animate');
      }

      this.timer = setTimeout(function () {
        document.body.classList.remove('q-layout-animate');
        _this.timer = null;
      }, 150);
    },
    __onPageScroll: function __onPageScroll(data) {
      this.scroll = data;
      this.$emit('scroll', data);
    },
    __onPageResize: function __onPageResize(_ref3) {
      var height = _ref3.height,
          width = _ref3.width;
      var resized = false;

      if (this.height !== height) {
        resized = true;
        this.height = height;
        this.$emit('scrollHeight', height);

        this.__updateScrollbarWidth();
      }

      if (this.width !== width) {
        resized = true;
        this.width = width;
      }

      resized && this.$emit('resize', {
        height: height,
        width: width
      });
    },
    __onContainerResize: function __onContainerResize(_ref4) {
      var height = _ref4.height;

      if (this.containerHeight !== height) {
        this.containerHeight = height;

        this.__updateScrollbarWidth();
      }
    },
    __updateScrollbarWidth: function __updateScrollbarWidth() {
      if (this.container) {
        var width = this.height > this.containerHeight ? Object(_utils_scroll_js__WEBPACK_IMPORTED_MODULE_5__[/* getScrollbarWidth */ "e"])() : 0;

        if (this.scrollbarWidth !== width) {
          this.scrollbarWidth = width;
        }
      }
    }
  }
});

/***/ }),

/***/ "7333":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__("0d58");
var gOPS = __webpack_require__("2621");
var pIE = __webpack_require__("52a7");
var toObject = __webpack_require__("4bf8");
var IObject = __webpack_require__("626a");
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__("79e5")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),

/***/ "73f5":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export isPrintableChar */
/* unused harmony export isObject */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isDate; });
/* unused harmony export isRegexp */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isNumber; });
/* unused harmony export isString */
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6b54");
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_0__);

function isPrintableChar(v) {
  return v > 47 && v < 58 || v === 32 || v === 13 || v > 64 && v < 91 || v > 95 && v < 112 || v > 185 && v < 193 || v > 218 && v < 223;
}
function isObject(v) {
  return Object(v) === v;
}
function isDate(v) {
  return Object.prototype.toString.call(v) === '[object Date]';
}
function isRegexp(v) {
  return Object.prototype.toString.call(v) === '[object RegExp]';
}
function isNumber(v) {
  return typeof v === 'number' && isFinite(v);
}
function isString(v) {
  return typeof v === 'string';
}

/***/ }),

/***/ "7514":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__("5ca1");
var $find = __webpack_require__("0a49")(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__("9c6c")(KEY);


/***/ }),

/***/ "7668":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _spinner_mixin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("0b3d");

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QSpinnerMat',
  mixins: [_spinner_mixin_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]],
  render: function render(h) {
    return h('svg', {
      staticClass: 'q-spinner q-spinner-mat',
      class: this.classes,
      attrs: {
        'width': this.size,
        'height': this.size,
        'viewBox': '25 25 50 50'
      }
    }, [h('circle', {
      staticClass: 'path',
      attrs: {
        'cx': '50',
        'cy': '50',
        'r': '20',
        'fill': 'none',
        'stroke': 'currentColor',
        'stroke-width': '3',
        'stroke-miterlimit': '10'
      }
    })]);
  }
});

/***/ }),

/***/ "768b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _QItem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("506f");
/* harmony import */ var _QItemMain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("b8d9");
/* harmony import */ var _QItemSide_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("7d43");




function push(child, h, name, slot, replace, conf) {
  var defaultProps = {
    props: {
      right: conf.right
    }
  };

  if (slot && replace) {
    child.push(h(name, defaultProps, slot));
    return;
  }

  var v = false;

  for (var p in conf) {
    if (conf.hasOwnProperty(p)) {
      v = conf[p];

      if (v !== void 0 && v !== true) {
        child.push(h(name, {
          props: conf
        }));
        break;
      }
    }
  }

  slot && child.push(h(name, defaultProps, slot));
}

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QItemWrapper',
  props: {
    cfg: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    slotReplace: Boolean
  },
  render: function render(h) {
    var cfg = this.cfg,
        replace = this.slotReplace,
        child = [];
    push(child, h, _QItemSide_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], this.$slots.left, replace, {
      icon: cfg.icon,
      color: cfg.leftColor,
      avatar: cfg.avatar,
      letter: cfg.letter,
      image: cfg.image,
      inverted: cfg.leftInverted,
      textColor: cfg.leftTextColor
    });
    push(child, h, _QItemMain_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"], this.$slots.main, replace, {
      label: cfg.label,
      sublabel: cfg.sublabel,
      labelLines: cfg.labelLines,
      sublabelLines: cfg.sublabelLines,
      inset: cfg.inset
    });
    push(child, h, _QItemSide_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], this.$slots.right, replace, {
      right: true,
      icon: cfg.rightIcon,
      color: cfg.rightColor,
      avatar: cfg.rightAvatar,
      letter: cfg.rightLetter,
      image: cfg.rightImage,
      stamp: cfg.stamp,
      inverted: cfg.rightInverted,
      textColor: cfg.rightTextColor
    });
    child.push(this.$slots.default);
    return h(_QItem_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"], {
      attrs: this.$attrs,
      on: this.$listeners,
      props: cfg
    }, child);
  }
});

/***/ }),

/***/ "7726":
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "77f1":
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__("4588");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),

/***/ "79e5":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "7a56":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("7726");
var dP = __webpack_require__("86cc");
var DESCRIPTORS = __webpack_require__("9e1e");
var SPECIES = __webpack_require__("2b4c")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "7a77":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "7aac":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),

/***/ "7cdf":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__("5ca1");

$export($export.S, 'Number', { isInteger: __webpack_require__("9c12") });


/***/ }),

/***/ "7d2b":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/KFOmCnqEu92Fr1Mu4mxM.bafb105b.woff";

/***/ }),

/***/ "7d43":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("7514");
/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("52b5");


/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QItemSide',
  props: {
    right: Boolean,
    icon: String,
    letter: {
      type: String,
      validator: function validator(v) {
        return v.length === 1;
      }
    },
    inverted: Boolean,
    avatar: String,
    image: String,
    stamp: String,
    color: String,
    textColor: String
  },
  computed: {
    type: function type() {
      var _this = this;

      return ['icon', 'image', 'avatar', 'letter', 'stamp'].find(function (type) {
        return _this[type];
      });
    },
    classes: function classes() {
      var cls = ["q-item-side-".concat(this.right ? 'right' : 'left')];

      if (this.color && !this.icon && !this.letter) {
        cls.push("text-".concat(this.color));
      }

      return cls;
    },
    typeClasses: function typeClasses() {
      var cls = ["q-item-".concat(this.type)];

      if (this.color) {
        if (this.inverted && (this.icon || this.letter)) {
          cls.push("bg-".concat(this.color));
        } else if (!this.textColor) {
          cls.push("text-".concat(this.color));
        }
      }

      this.textColor && cls.push("text-".concat(this.textColor));

      if (this.inverted && (this.icon || this.letter)) {
        cls.push('q-item-inverted');
        cls.push('flex');
        cls.push('flex-center');
      }

      return cls;
    },
    imagePath: function imagePath() {
      return this.image || this.avatar;
    }
  },
  render: function render(h) {
    var child;

    if (this.type) {
      if (this.icon) {
        child = h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"], {
          'class': this.inverted ? null : this.typeClasses,
          props: {
            name: this.icon
          }
        });

        if (this.inverted) {
          child = h('div', {
            'class': this.typeClasses
          }, [child]);
        }
      } else if (this.imagePath) {
        child = h('img', {
          'class': this.typeClasses,
          attrs: {
            src: this.imagePath
          }
        });
      } else {
        child = h('div', {
          'class': this.typeClasses
        }, [this.stamp || this.letter]);
      }
    }

    return h('div', {
      staticClass: 'q-item-side q-item-section',
      'class': this.classes
    }, [child, this.$slots.default]);
  }
});

/***/ }),

/***/ "7f20":
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__("86cc").f;
var has = __webpack_require__("69a8");
var TAG = __webpack_require__("2b4c")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),

/***/ "7f7f":
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__("86cc").f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__("9e1e") && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),

/***/ "8079":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("7726");
var macrotask = __webpack_require__("1991").set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__("2d95")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),

/***/ "8378":
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.0' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "83a1":
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),

/***/ "83f9":
/***/ (function(module, exports, __webpack_require__) {

var escape = __webpack_require__("b041");
exports = module.exports = __webpack_require__("2350")(true);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 100;\n  src: url(" + escape(__webpack_require__("60de")) + ") format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 300;\n  src: url(" + escape(__webpack_require__("66fb")) + ") format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + escape(__webpack_require__("7d2b")) + ") format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 500;\n  src: url(" + escape(__webpack_require__("fcf3")) + ") format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 700;\n  src: url(" + escape(__webpack_require__("32f4")) + ") format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 900;\n  src: url(" + escape(__webpack_require__("6f6c")) + ") format('woff');\n}\n", "", {"version":3,"sources":["D:/AtWork/Projects/Einstein/src/Einstein.WebUI/node_modules/quasar-extras/roboto-font/D:/AtWork/Projects/Einstein/src/Einstein.WebUI/node_modules/quasar-extras/roboto-font/roboto-font.css"],"names":[],"mappings":"AAAA;EACE,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,kDAAiE;CAClE;AACD;EACE,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,kDAAkE;CACnE;AACD;EACE,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,kDAA8D;CAC/D;AACD;EACE,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,kDAAkE;CACnE;AACD;EACE,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,kDAAkE;CACnE;AACD;EACE,sBAAsB;EACtB,mBAAmB;EACnB,iBAAiB;EACjB,kDAAkE;CACnE","file":"roboto-font.css","sourcesContent":["@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 100;\n  src: url(./web-font/KFOkCnqEu92Fr1MmgVxIIzQ.woff) format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 300;\n  src: url(./web-font/KFOlCnqEu92Fr1MmSU5fBBc-.woff) format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: url(./web-font/KFOmCnqEu92Fr1Mu4mxM.woff) format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 500;\n  src: url(./web-font/KFOlCnqEu92Fr1MmEU9fBBc-.woff) format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 700;\n  src: url(./web-font/KFOlCnqEu92Fr1MmWUlfBBc-.woff) format('woff');\n}\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 900;\n  src: url(./web-font/KFOlCnqEu92Fr1MmYUtfBBc-.woff) format('woff');\n}\n"],"sourceRoot":""}]);

// exports


/***/ }),

/***/ "8449":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__("386b")('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),

/***/ "84f2":
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "86cc":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("cb7c");
var IE8_DOM_DEFINE = __webpack_require__("c69a");
var toPrimitive = __webpack_require__("6a99");
var dP = Object.defineProperty;

exports.f = __webpack_require__("9e1e") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "8b97":
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__("d3f4");
var anObject = __webpack_require__("cb7c");
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__("9b43")(Function.call, __webpack_require__("11e9").f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),

/***/ "8c4f":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*!
  * vue-router v3.0.2
  * (c) 2018 Evan You
  * @license MIT
  */
/*  */

function assert (condition, message) {
  if (!condition) {
    throw new Error(("[vue-router] " + message))
  }
}

function warn (condition, message) {
  if (false) {}
}

function isError (err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1
}

function extend (a, b) {
  for (var key in b) {
    a[key] = b[key];
  }
  return a
}

var View = {
  name: 'RouterView',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render (_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;

    // used by devtools to display a router-view badge
    data.routerView = true;

    // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots
    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {});

    // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.
    var depth = 0;
    var inactive = false;
    while (parent && parent._routerRoot !== parent) {
      if (parent.$vnode && parent.$vnode.data.routerView) {
        depth++;
      }
      if (parent._inactive) {
        inactive = true;
      }
      parent = parent.$parent;
    }
    data.routerViewDepth = depth;

    // render previous view if the tree is inactive and kept-alive
    if (inactive) {
      return h(cache[name], data, children)
    }

    var matched = route.matched[depth];
    // render empty node if no matched route
    if (!matched) {
      cache[name] = null;
      return h()
    }

    var component = cache[name] = matched.components[name];

    // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks
    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];
      if (
        (val && current !== vm) ||
        (!val && current === vm)
      ) {
        matched.instances[name] = val;
      }
    }

    // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    };

    // resolve props
    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);
    if (propsToPass) {
      // clone to prevent mutation
      propsToPass = data.props = extend({}, propsToPass);
      // pass non-declared props as attrs
      var attrs = data.attrs = data.attrs || {};
      for (var key in propsToPass) {
        if (!component.props || !(key in component.props)) {
          attrs[key] = propsToPass[key];
          delete propsToPass[key];
        }
      }
    }

    return h(component, data, children)
  }
}

function resolveProps (route, config) {
  switch (typeof config) {
    case 'undefined':
      return
    case 'object':
      return config
    case 'function':
      return config(route)
    case 'boolean':
      return config ? route.params : undefined
    default:
      if (false) {}
  }
}

/*  */

var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode = function (str) { return encodeURIComponent(str)
  .replace(encodeReserveRE, encodeReserveReplacer)
  .replace(commaRE, ','); };

var decode = decodeURIComponent;

function resolveQuery (
  query,
  extraQuery,
  _parseQuery
) {
  if ( extraQuery === void 0 ) extraQuery = {};

  var parse = _parseQuery || parseQuery;
  var parsedQuery;
  try {
    parsedQuery = parse(query || '');
  } catch (e) {
     false && false;
    parsedQuery = {};
  }
  for (var key in extraQuery) {
    parsedQuery[key] = extraQuery[key];
  }
  return parsedQuery
}

function parseQuery (query) {
  var res = {};

  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0
      ? decode(parts.join('='))
      : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });

  return res
}

function stringifyQuery (obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return ''
    }

    if (val === null) {
      return encode(key)
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return
        }
        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&')
    }

    return encode(key) + '=' + encode(val)
  }).filter(function (x) { return x.length > 0; }).join('&') : null;
  return res ? ("?" + res) : ''
}

/*  */

var trailingSlashRE = /\/?$/;

function createRoute (
  record,
  location,
  redirectedFrom,
  router
) {
  var stringifyQuery$$1 = router && router.options.stringifyQuery;

  var query = location.query || {};
  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || (record && record.name),
    meta: (record && record.meta) || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery$$1),
    matched: record ? formatMatch(record) : []
  };
  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
  }
  return Object.freeze(route)
}

function clone (value) {
  if (Array.isArray(value)) {
    return value.map(clone)
  } else if (value && typeof value === 'object') {
    var res = {};
    for (var key in value) {
      res[key] = clone(value[key]);
    }
    return res
  } else {
    return value
  }
}

// the starting route that represents the initial state
var START = createRoute(null, {
  path: '/'
});

function formatMatch (record) {
  var res = [];
  while (record) {
    res.unshift(record);
    record = record.parent;
  }
  return res
}

function getFullPath (
  ref,
  _stringifyQuery
) {
  var path = ref.path;
  var query = ref.query; if ( query === void 0 ) query = {};
  var hash = ref.hash; if ( hash === void 0 ) hash = '';

  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash
}

function isSameRoute (a, b) {
  if (b === START) {
    return a === b
  } else if (!b) {
    return false
  } else if (a.path && b.path) {
    return (
      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query)
    )
  } else if (a.name && b.name) {
    return (
      a.name === b.name &&
      a.hash === b.hash &&
      isObjectEqual(a.query, b.query) &&
      isObjectEqual(a.params, b.params)
    )
  } else {
    return false
  }
}

function isObjectEqual (a, b) {
  if ( a === void 0 ) a = {};
  if ( b === void 0 ) b = {};

  // handle null value #1566
  if (!a || !b) { return a === b }
  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false
  }
  return aKeys.every(function (key) {
    var aVal = a[key];
    var bVal = b[key];
    // check nested equality
    if (typeof aVal === 'object' && typeof bVal === 'object') {
      return isObjectEqual(aVal, bVal)
    }
    return String(aVal) === String(bVal)
  })
}

function isIncludedRoute (current, target) {
  return (
    current.path.replace(trailingSlashRE, '/').indexOf(
      target.path.replace(trailingSlashRE, '/')
    ) === 0 &&
    (!target.hash || current.hash === target.hash) &&
    queryIncludes(current.query, target.query)
  )
}

function queryIncludes (current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false
    }
  }
  return true
}

/*  */

// work around weird flow bug
var toTypes = [String, Object];
var eventTypes = [String, Array];

var Link = {
  name: 'RouterLink',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render (h) {
    var this$1 = this;

    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;

    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass;
    // Support global empty active class
    var activeClassFallback = globalActiveClass == null
      ? 'router-link-active'
      : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null
      ? 'router-link-exact-active'
      : globalExactActiveClass;
    var activeClass = this.activeClass == null
      ? activeClassFallback
      : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null
      ? exactActiveClassFallback
      : this.exactActiveClass;
    var compareTarget = location.path
      ? createRoute(null, location, null, router)
      : route;

    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact
      ? classes[exactActiveClass]
      : isIncludedRoute(current, compareTarget);

    var handler = function (e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location);
        } else {
          router.push(location);
        }
      }
    };

    var on = { click: guardEvent };
    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) { on[e] = handler; });
    } else {
      on[this.event] = handler;
    }

    var data = {
      class: classes
    };

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = { href: href };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);
      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var aData = a.data = extend({}, a.data);
        aData.on = on;
        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default)
  }
}

function guardEvent (e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }
  // don't redirect when preventDefault called
  if (e.defaultPrevented) { return }
  // don't redirect on right click
  if (e.button !== undefined && e.button !== 0) { return }
  // don't redirect if `target="_blank"`
  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');
    if (/\b_blank\b/i.test(target)) { return }
  }
  // this may be a Weex event which doesn't have this method
  if (e.preventDefault) {
    e.preventDefault();
  }
  return true
}

function findAnchor (children) {
  if (children) {
    var child;
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      if (child.tag === 'a') {
        return child
      }
      if (child.children && (child = findAnchor(child.children))) {
        return child
      }
    }
  }
}

var _Vue;

function install (Vue) {
  if (install.installed && _Vue === Vue) { return }
  install.installed = true;

  _Vue = Vue;

  var isDef = function (v) { return v !== undefined; };

  var registerInstance = function (vm, callVal) {
    var i = vm.$options._parentVnode;
    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate () {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;
        this._router.init(this);
        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;
      }
      registerInstance(this, this);
    },
    destroyed: function destroyed () {
      registerInstance(this);
    }
  });

  Object.defineProperty(Vue.prototype, '$router', {
    get: function get () { return this._routerRoot._router }
  });

  Object.defineProperty(Vue.prototype, '$route', {
    get: function get () { return this._routerRoot._route }
  });

  Vue.component('RouterView', View);
  Vue.component('RouterLink', Link);

  var strats = Vue.config.optionMergeStrategies;
  // use the same hook merging strategy for route hooks
  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}

/*  */

var inBrowser = typeof window !== 'undefined';

/*  */

function resolvePath (
  relative,
  base,
  append
) {
  var firstChar = relative.charAt(0);
  if (firstChar === '/') {
    return relative
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative
  }

  var stack = base.split('/');

  // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)
  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  }

  // resolve relative path
  var segments = relative.replace(/^\//, '').split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  }

  // ensure leading slash
  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/')
}

function parsePath (path) {
  var hash = '';
  var query = '';

  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');
  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  }
}

function cleanPath (path) {
  return path.replace(/\/\//g, '/')
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/**
 * Expose `pathToRegexp`.
 */
var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options))
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment;
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys;
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options);
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}
pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

/*  */

// $flow-disable-line
var regexpCompileCache = Object.create(null);

function fillParams (
  path,
  params,
  routeMsg
) {
  try {
    var filler =
      regexpCompileCache[path] ||
      (regexpCompileCache[path] = pathToRegexp_1.compile(path));
    return filler(params || {}, { pretty: true })
  } catch (e) {
    if (false) {}
    return ''
  }
}

/*  */

function createRouteMap (
  routes,
  oldPathList,
  oldPathMap,
  oldNameMap
) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || [];
  // $flow-disable-line
  var pathMap = oldPathMap || Object.create(null);
  // $flow-disable-line
  var nameMap = oldNameMap || Object.create(null);

  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  });

  // ensure wildcard routes are always at the end
  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  }
}

function addRouteRecord (
  pathList,
  pathMap,
  nameMap,
  route,
  parent,
  matchAs
) {
  var path = route.path;
  var name = route.name;
  if (false) {}

  var pathToRegexpOptions = route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(
    path,
    parent,
    pathToRegexpOptions.strict
  );

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || { default: route.component },
    instances: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null
      ? {}
      : route.components
        ? route.props
        : { default: route.props }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (false) {}
    route.children.forEach(function (child) {
      var childMatchAs = matchAs
        ? cleanPath((matchAs + "/" + (child.path)))
        : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias)
      ? route.alias
      : [route.alias];

    aliases.forEach(function (alias) {
      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(
        pathList,
        pathMap,
        nameMap,
        aliasRoute,
        parent,
        record.path || '/' // matchAs
      );
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if (false) {}
  }
}

function compileRouteRegex (path, pathToRegexpOptions) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);
  if (false) { var keys; }
  return regex
}

function normalizePath (path, parent, strict) {
  if (!strict) { path = path.replace(/\/$/, ''); }
  if (path[0] === '/') { return path }
  if (parent == null) { return path }
  return cleanPath(((parent.path) + "/" + path))
}

/*  */

function normalizeLocation (
  raw,
  current,
  append,
  router
) {
  var next = typeof raw === 'string' ? { path: raw } : raw;
  // named target
  if (next.name || next._normalized) {
    return next
  }

  // relative params
  if (!next.path && next.params && current) {
    next = extend({}, next);
    next._normalized = true;
    var params = extend(extend({}, current.params), next.params);
    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, ("path " + (current.path)));
    } else if (false) {}
    return next
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = (current && current.path) || '/';
  var path = parsedPath.path
    ? resolvePath(parsedPath.path, basePath, append || next.append)
    : basePath;

  var query = resolveQuery(
    parsedPath.query,
    next.query,
    router && router.options.parseQuery
  );

  var hash = next.hash || parsedPath.hash;
  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  }
}

/*  */



function createMatcher (
  routes,
  router
) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes (routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match (
    raw,
    currentRoute,
    redirectedFrom
  ) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];
      if (false) {}
      if (!record) { return _createRoute(null, location) }
      var paramNames = record.regex.keys
        .filter(function (key) { return !key.optional; })
        .map(function (key) { return key.name; });

      if (typeof location.params !== 'object') {
        location.params = {};
      }

      if (currentRoute && typeof currentRoute.params === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      if (record) {
        location.path = fillParams(record.path, location.params, ("named route \"" + name + "\""));
        return _createRoute(record, location, redirectedFrom)
      }
    } else if (location.path) {
      location.params = {};
      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];
        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom)
        }
      }
    }
    // no match
    return _createRoute(null, location)
  }

  function redirect (
    record,
    location
  ) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function'
      ? originalRedirect(createRoute(record, location, null, router))
      : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = { path: redirect };
    }

    if (!redirect || typeof redirect !== 'object') {
      if (false) {}
      return _createRoute(null, location)
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];
      if (false) {}
      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location)
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record);
      // 2. resolve params
      var resolvedPath = fillParams(rawPath, params, ("redirect route with path \"" + rawPath + "\""));
      // 3. rematch with existing query and hash
      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location)
    } else {
      if (false) {}
      return _createRoute(null, location)
    }
  }

  function alias (
    record,
    location,
    matchAs
  ) {
    var aliasedPath = fillParams(matchAs, location.params, ("aliased route with path \"" + matchAs + "\""));
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });
    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location)
    }
    return _createRoute(null, location)
  }

  function _createRoute (
    record,
    location,
    redirectedFrom
  ) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location)
    }
    if (record && record.matchAs) {
      return alias(record, location, record.matchAs)
    }
    return createRoute(record, location, redirectedFrom, router)
  }

  return {
    match: match,
    addRoutes: addRoutes
  }
}

function matchRoute (
  regex,
  path,
  params
) {
  var m = path.match(regex);

  if (!m) {
    return false
  } else if (!params) {
    return true
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];
    if (key) {
      // Fix #1994: using * with props: true generates a param named 0
      params[key.name || 'pathMatch'] = val;
    }
  }

  return true
}

function resolveRecordPath (path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true)
}

/*  */

var positionStore = Object.create(null);

function setupScroll () {
  // Fix for #1585 for Firefox
  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
  window.history.replaceState({ key: getStateKey() }, '', window.location.href.replace(window.location.origin, ''));
  window.addEventListener('popstate', function (e) {
    saveScrollPosition();
    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}

function handleScroll (
  router,
  to,
  from,
  isPop
) {
  if (!router.app) {
    return
  }

  var behavior = router.options.scrollBehavior;
  if (!behavior) {
    return
  }

  if (false) {}

  // wait until re-render finishes before scrolling
  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior.call(router, to, from, isPop ? position : null);

    if (!shouldScroll) {
      return
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll.then(function (shouldScroll) {
        scrollToPosition((shouldScroll), position);
      }).catch(function (err) {
        if (false) {}
      });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition () {
  var key = getStateKey();
  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function getScrollPosition () {
  var key = getStateKey();
  if (key) {
    return positionStore[key]
  }
}

function getElementPosition (el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  }
}

function isValidPosition (obj) {
  return isNumber(obj.x) || isNumber(obj.y)
}

function normalizePosition (obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  }
}

function normalizeOffset (obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  }
}

function isNumber (v) {
  return typeof v === 'number'
}

function scrollToPosition (shouldScroll, position) {
  var isObject = typeof shouldScroll === 'object';
  if (isObject && typeof shouldScroll.selector === 'string') {
    var el = document.querySelector(shouldScroll.selector);
    if (el) {
      var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    window.scrollTo(position.x, position.y);
  }
}

/*  */

var supportsPushState = inBrowser && (function () {
  var ua = window.navigator.userAgent;

  if (
    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&
    ua.indexOf('Mobile Safari') !== -1 &&
    ua.indexOf('Chrome') === -1 &&
    ua.indexOf('Windows Phone') === -1
  ) {
    return false
  }

  return window.history && 'pushState' in window.history
})();

// use User Timing api (if present) for more accurate key precision
var Time = inBrowser && window.performance && window.performance.now
  ? window.performance
  : Date;

var _key = genKey();

function genKey () {
  return Time.now().toFixed(3)
}

function getStateKey () {
  return _key
}

function setStateKey (key) {
  _key = key;
}

function pushState (url, replace) {
  saveScrollPosition();
  // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls
  var history = window.history;
  try {
    if (replace) {
      history.replaceState({ key: _key }, '', url);
    } else {
      _key = genKey();
      history.pushState({ key: _key }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState (url) {
  pushState(url, true);
}

/*  */

function runQueue (queue, fn, cb) {
  var step = function (index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };
  step(0);
}

/*  */

function resolveAsyncComponents (matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;

    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;

        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef.default;
          }
          // save resolved on async factory in case it's used elsewhere
          def.resolved = typeof resolvedDef === 'function'
            ? resolvedDef
            : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;
          if (pending <= 0) {
            next();
          }
        });

        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
           false && false;
          if (!error) {
            error = isError(reason)
              ? reason
              : new Error(msg);
            next(error);
          }
        });

        var res;
        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }
        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;
            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) { next(); }
  }
}

function flatMapComponents (
  matched,
  fn
) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) { return fn(
      m.components[key],
      m.instances[key],
      m, key
    ); })
  }))
}

function flatten (arr) {
  return Array.prototype.concat.apply([], arr)
}

var hasSymbol =
  typeof Symbol === 'function' &&
  typeof Symbol.toStringTag === 'symbol';

function isESModule (obj) {
  return obj.__esModule || (hasSymbol && obj[Symbol.toStringTag] === 'Module')
}

// in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.
function once (fn) {
  var called = false;
  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    if (called) { return }
    called = true;
    return fn.apply(this, args)
  }
}

/*  */

var History = function History (router, base) {
  this.router = router;
  this.base = normalizeBase(base);
  // start with a route object that stands for "nowhere"
  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};

History.prototype.listen = function listen (cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady (cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);
    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError (errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {
    var this$1 = this;

  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL();

    // fire ready cbs once
    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) { cb(route); });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }
    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });
    }
  });
};

History.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {
    var this$1 = this;

  var current = this.current;
  var abort = function (err) {
    if (isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) { cb(err); });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }
    onAbort && onAbort(err);
  };
  if (
    isSameRoute(route, current) &&
    // in the case the route map has been dynamically appended to
    route.matched.length === current.matched.length
  ) {
    this.ensureURL();
    return abort()
  }

  var ref = resolveQueue(this.current.matched, route.matched);
    var updated = ref.updated;
    var deactivated = ref.deactivated;
    var activated = ref.activated;

  var queue = [].concat(
    // in-component leave guards
    extractLeaveGuards(deactivated),
    // global before hooks
    this.router.beforeHooks,
    // in-component update hooks
    extractUpdateHooks(updated),
    // in-config enter guards
    activated.map(function (m) { return m.beforeEnter; }),
    // async components
    resolveAsyncComponents(activated)
  );

  this.pending = route;
  var iterator = function (hook, next) {
    if (this$1.pending !== route) {
      return abort()
    }
    try {
      hook(route, current, function (to) {
        if (to === false || isError(to)) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(to);
        } else if (
          typeof to === 'string' ||
          (typeof to === 'object' && (
            typeof to.path === 'string' ||
            typeof to.name === 'string'
          ))
        ) {
          // next('/') or next({ path: '/' }) -> redirect
          abort();
          if (typeof to === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    var postEnterCbs = [];
    var isValid = function () { return this$1.current === route; };
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort()
      }
      this$1.pending = null;
      onComplete(route);
      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          postEnterCbs.forEach(function (cb) { cb(); });
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute (route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function (hook) {
    hook && hook(route, prev);
  });
};

function normalizeBase (base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = (baseEl && baseEl.getAttribute('href')) || '/';
      // strip full URL origin
      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  }
  // make sure there's the starting slash
  if (base.charAt(0) !== '/') {
    base = '/' + base;
  }
  // remove trailing slash
  return base.replace(/\/$/, '')
}

function resolveQueue (
  current,
  next
) {
  var i;
  var max = Math.max(current.length, next.length);
  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break
    }
  }
  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  }
}

function extractGuards (
  records,
  name,
  bind,
  reverse
) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);
    if (guard) {
      return Array.isArray(guard)
        ? guard.map(function (guard) { return bind(guard, instance, match, key); })
        : bind(guard, instance, match, key)
    }
  });
  return flatten(reverse ? guards.reverse() : guards)
}

function extractGuard (
  def,
  key
) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }
  return def.options[key]
}

function extractLeaveGuards (deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)
}

function extractUpdateHooks (updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)
}

function bindGuard (guard, instance) {
  if (instance) {
    return function boundRouteGuard () {
      return guard.apply(instance, arguments)
    }
  }
}

function extractEnterGuards (
  activated,
  cbs,
  isValid
) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key, cbs, isValid)
  })
}

function bindEnterGuard (
  guard,
  match,
  key,
  cbs,
  isValid
) {
  return function routeEnterGuard (to, from, next) {
    return guard(to, from, function (cb) {
      next(cb);
      if (typeof cb === 'function') {
        cbs.push(function () {
          // #750
          // if a router-view is wrapped with an out-in transition,
          // the instance may not have been registered at this time.
          // we will need to poll for registration until current route
          // is no longer valid.
          poll(cb, match.instances, key, isValid);
        });
      }
    })
  }
}

function poll (
  cb, // somehow flow cannot infer this is a function
  instances,
  key,
  isValid
) {
  if (
    instances[key] &&
    !instances[key]._isBeingDestroyed // do not reuse being destroyed instance
  ) {
    cb(instances[key]);
  } else if (isValid()) {
    setTimeout(function () {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}

/*  */

var HTML5History = (function (History$$1) {
  function HTML5History (router, base) {
    var this$1 = this;

    History$$1.call(this, router, base);

    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    var initLocation = getLocation(this.base);
    window.addEventListener('popstate', function (e) {
      var current = this$1.current;

      // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.
      var location = getLocation(this$1.base);
      if (this$1.current === START && location === initLocation) {
        return
      }

      this$1.transitionTo(location, function (route) {
        if (supportsScroll) {
          handleScroll(router, route, current, true);
        }
      });
    });
  }

  if ( History$$1 ) HTML5History.__proto__ = History$$1;
  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.go = function go (n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL (push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {
    return getLocation(this.base)
  };

  return HTML5History;
}(History));

function getLocation (base) {
  var path = decodeURI(window.location.pathname);
  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }
  return (path || '/') + window.location.search + window.location.hash
}

/*  */

var HashHistory = (function (History$$1) {
  function HashHistory (router, base, fallback) {
    History$$1.call(this, router, base);
    // check history fallback deeplinking
    if (fallback && checkFallback(this.base)) {
      return
    }
    ensureSlash();
  }

  if ( History$$1 ) HashHistory.__proto__ = History$$1;
  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );
  HashHistory.prototype.constructor = HashHistory;

  // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early
  HashHistory.prototype.setupListeners = function setupListeners () {
    var this$1 = this;

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function () {
      var current = this$1.current;
      if (!ensureSlash()) {
        return
      }
      this$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }
        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    });
  };

  HashHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go (n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL (push) {
    var current = this.current.fullPath;
    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    return getHash()
  };

  return HashHistory;
}(History));

function checkFallback (base) {
  var location = getLocation(base);
  if (!/^\/#/.test(location)) {
    window.location.replace(
      cleanPath(base + '/#' + location)
    );
    return true
  }
}

function ensureSlash () {
  var path = getHash();
  if (path.charAt(0) === '/') {
    return true
  }
  replaceHash('/' + path);
  return false
}

function getHash () {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#');
  return index === -1 ? '' : decodeURI(href.slice(index + 1))
}

function getUrl (path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return (base + "#" + path)
}

function pushHash (path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash (path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}

/*  */

var AbstractHistory = (function (History$$1) {
  function AbstractHistory (router, base) {
    History$$1.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;
  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go (n) {
    var this$1 = this;

    var targetIndex = this.index + n;
    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return
    }
    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/'
  };

  AbstractHistory.prototype.ensureURL = function ensureURL () {
    // noop
  };

  return AbstractHistory;
}(History));

/*  */



var VueRouter = function VueRouter (options) {
  if ( options === void 0 ) options = {};

  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);

  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;
  if (this.fallback) {
    mode = 'hash';
  }
  if (!inBrowser) {
    mode = 'abstract';
  }
  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break
    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break
    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break
    default:
      if (false) {}
  }
};

var prototypeAccessors = { currentRoute: { configurable: true } };

VueRouter.prototype.match = function match (
  raw,
  current,
  redirectedFrom
) {
  return this.matcher.match(raw, current, redirectedFrom)
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current
};

VueRouter.prototype.init = function init (app /* Vue component instance */) {
    var this$1 = this;

   false && false;

  this.apps.push(app);

  // main app already initialized.
  if (this.app) {
    return
  }

  this.app = app;

  var history = this.history;

  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function () {
      history.setupListeners();
    };
    history.transitionTo(
      history.getCurrentLocation(),
      setupHashListener,
      setupHashListener
    );
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach (fn) {
  return registerHook(this.beforeHooks, fn)
};

VueRouter.prototype.beforeResolve = function beforeResolve (fn) {
  return registerHook(this.resolveHooks, fn)
};

VueRouter.prototype.afterEach = function afterEach (fn) {
  return registerHook(this.afterHooks, fn)
};

VueRouter.prototype.onReady = function onReady (cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError (errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push (location, onComplete, onAbort) {
  this.history.push(location, onComplete, onAbort);
};

VueRouter.prototype.replace = function replace (location, onComplete, onAbort) {
  this.history.replace(location, onComplete, onAbort);
};

VueRouter.prototype.go = function go (n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back () {
  this.go(-1);
};

VueRouter.prototype.forward = function forward () {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {
  var route = to
    ? to.matched
      ? to
      : this.resolve(to).route
    : this.currentRoute;
  if (!route) {
    return []
  }
  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key]
    })
  }))
};

VueRouter.prototype.resolve = function resolve (
  to,
  current,
  append
) {
  var location = normalizeLocation(
    to,
    current || this.history.current,
    append,
    this
  );
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  }
};

VueRouter.prototype.addRoutes = function addRoutes (routes) {
  this.matcher.addRoutes(routes);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties( VueRouter.prototype, prototypeAccessors );

function registerHook (list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);
    if (i > -1) { list.splice(i, 1); }
  }
}

function createHref (base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path
}

VueRouter.install = install;
VueRouter.version = '3.0.2';

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ __webpack_exports__["default"] = (VueRouter);


/***/ }),

/***/ "8df4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__("7a77");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "8e2f":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function (fn) {
  var wait = false,
      frame;

  function debounced() {
    var _this = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (wait) {
      return;
    }

    wait = true;
    frame = requestAnimationFrame(function () {
      fn.apply(_this, args);
      wait = false;
    });
  }

  debounced.cancel = function () {
    window.cancelAnimationFrame(frame);
    wait = false;
  };

  return debounced;
});

/***/ }),

/***/ "9093":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__("ce10");
var hiddenKeys = __webpack_require__("e11e").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),

/***/ "9b43":
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__("d8e8");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "9c12":
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__("d3f4");
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),

/***/ "9c6c":
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__("2b4c")('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__("32e9")(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "9c80":
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),

/***/ "9def":
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__("4588");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),

/***/ "9e1e":
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__("79e5")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "9fa6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;


/***/ }),

/***/ "9fe0":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (function (data) {
  var s = JSON.stringify(data);

  if (s) {
    return JSON.parse(s);
  }
});

/***/ }),

/***/ "a114":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("83f9");
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var add = __webpack_require__("499e").default
var update = add("e0999698", content, false, {"sourceMap":true});
// Hot Module Replacement
if(false) {}

/***/ }),

/***/ "a25f":
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__("7726");
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),

/***/ "a481":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__("cb7c");
var toObject = __webpack_require__("4bf8");
var toLength = __webpack_require__("9def");
var toInteger = __webpack_require__("4588");
var advanceStringIndex = __webpack_require__("0390");
var regExpExec = __webpack_require__("5f1b");
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__("214f")('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return ch;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return ch;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return ch;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),

/***/ "a5b8":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__("d8e8");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "a60d":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isSSR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return fromSSR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return onSSR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return hasWebStorage; });
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("f751");
/* harmony import */ var core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_assign__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var D_AtWork_Projects_Einstein_src_Einstein_WebUI_node_modules_vue_babel_preset_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("efdb");


var isSSR = typeof window === 'undefined';
var fromSSR = false;
var onSSR = isSSR;

function getMatch(userAgent, platformMatch) {
  var match = /(edge)\/([\w.]+)/.exec(userAgent) || /(opr)[\/]([\w.]+)/.exec(userAgent) || /(vivaldi)[\/]([\w.]+)/.exec(userAgent) || /(chrome)[\/]([\w.]+)/.exec(userAgent) || /(iemobile)[\/]([\w.]+)/.exec(userAgent) || /(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(userAgent) || /(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(userAgent) || /(webkit)[\/]([\w.]+)/.exec(userAgent) || /(opera)(?:.*version|)[\/]([\w.]+)/.exec(userAgent) || /(msie) ([\w.]+)/.exec(userAgent) || userAgent.indexOf('trident') >= 0 && /(rv)(?::| )([\w.]+)/.exec(userAgent) || userAgent.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(userAgent) || [];
  return {
    browser: match[5] || match[3] || match[1] || '',
    version: match[2] || match[4] || '0',
    versionNumber: match[4] || match[2] || '0',
    platform: platformMatch[0] || ''
  };
}

function getPlatformMatch(userAgent) {
  return /(ipad)/.exec(userAgent) || /(ipod)/.exec(userAgent) || /(windows phone)/.exec(userAgent) || /(iphone)/.exec(userAgent) || /(kindle)/.exec(userAgent) || /(silk)/.exec(userAgent) || /(android)/.exec(userAgent) || /(win)/.exec(userAgent) || /(mac)/.exec(userAgent) || /(linux)/.exec(userAgent) || /(cros)/.exec(userAgent) || /(playbook)/.exec(userAgent) || /(bb)/.exec(userAgent) || /(blackberry)/.exec(userAgent) || [];
}

function getPlatform(userAgent) {
  userAgent = (userAgent || navigator.userAgent || navigator.vendor || window.opera).toLowerCase();
  var platformMatch = getPlatformMatch(userAgent),
      matched = getMatch(userAgent, platformMatch),
      browser = {};

  if (matched.browser) {
    browser[matched.browser] = true;
    browser.version = matched.version;
    browser.versionNumber = parseInt(matched.versionNumber, 10);
  }

  if (matched.platform) {
    browser[matched.platform] = true;
  }

  if (browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone || browser.ipod || browser.kindle || browser.playbook || browser.silk || browser['windows phone']) {
    browser.mobile = true;
  }

  if (browser.ipod || browser.ipad || browser.iphone) {
    browser.ios = true;
  }

  if (browser['windows phone']) {
    browser.winphone = true;
    delete browser['windows phone'];
  }

  if (browser.cros || browser.mac || browser.linux || browser.win) {
    browser.desktop = true;
  }

  if (browser.chrome || browser.opr || browser.safari || browser.vivaldi) {
    browser.webkit = true;
  }

  if (browser.rv || browser.iemobile) {
    matched.browser = 'ie';
    browser.ie = true;
  }

  if (browser.edge) {
    matched.browser = 'edge';
    browser.edge = true;
  }

  if (browser.safari && browser.blackberry || browser.bb) {
    matched.browser = 'blackberry';
    browser.blackberry = true;
  }

  if (browser.safari && browser.playbook) {
    matched.browser = 'playbook';
    browser.playbook = true;
  }

  if (browser.opr) {
    matched.browser = 'opera';
    browser.opera = true;
  }

  if (browser.safari && browser.android) {
    matched.browser = 'android';
    browser.android = true;
  }

  if (browser.safari && browser.kindle) {
    matched.browser = 'kindle';
    browser.kindle = true;
  }

  if (browser.safari && browser.silk) {
    matched.browser = 'silk';
    browser.silk = true;
  }

  if (browser.vivaldi) {
    matched.browser = 'vivaldi';
    browser.vivaldi = true;
  }

  browser.name = matched.browser;
  browser.platform = matched.platform;

  if (!isSSR) {
    if (window.process && window.process.versions && window.process.versions.electron) {
      browser.electron = true;
    } else if (document.location.href.indexOf('chrome-extension://') === 0) {
      browser.chromeExt = true;
    } else if (window._cordovaNative || window.cordova) {
      browser.cordova = true;
    }

    fromSSR = browser.cordova === void 0 && browser.electron === void 0 && !!document.querySelector('[data-server-rendered]');
    fromSSR && (onSSR = true);
  }

  return browser;
}

var webStorage;
function hasWebStorage() {
  if (webStorage !== void 0) {
    return webStorage;
  }

  try {
    if (window.localStorage) {
      webStorage = true;
      return true;
    }
  } catch (e) {}

  webStorage = false;
  return false;
}

function getClientProperties() {
  return {
    has: {
      touch: function () {
        return !!('ontouchstart' in document.documentElement) || window.navigator.msMaxTouchPoints > 0;
      }(),
      webStorage: hasWebStorage()
    },
    within: {
      iframe: window.self !== window.top
    }
  };
}

/* harmony default export */ __webpack_exports__["a"] = ({
  has: {
    touch: false,
    webStorage: false
  },
  within: {
    iframe: false
  },
  parseSSR: function parseSSR(ssr) {
    return ssr ? {
      is: getPlatform(ssr.req.headers['user-agent']),
      has: this.has,
      within: this.within
    } : Object(D_AtWork_Projects_Einstein_src_Einstein_WebUI_node_modules_vue_babel_preset_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"])({
      is: getPlatform()
    }, getClientProperties());
  },
  install: function install($q, queues, Vue) {
    var _this = this;

    if (isSSR) {
      queues.server.push(function (q, ctx) {
        q.platform = _this.parseSSR(ctx.ssr);
      });
      return;
    }

    this.is = getPlatform();

    if (fromSSR) {
      queues.takeover.push(function (q) {
        onSSR = fromSSR = false;
        Object.assign(q.platform, getClientProperties());
      });
      Vue.util.defineReactive($q, 'platform', this);
    } else {
      Object.assign(this, getClientProperties());
      $q.platform = this;
    }
  }
});

/***/ }),

/***/ "aa77":
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__("5ca1");
var defined = __webpack_require__("be13");
var fails = __webpack_require__("79e5");
var spaces = __webpack_require__("fdef");
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),

/***/ "aae3":
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__("d3f4");
var cof = __webpack_require__("2d95");
var MATCH = __webpack_require__("2b4c")('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),

/***/ "abcf":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return offset; });
/* unused harmony export style */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return height; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return width; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return css; });
/* unused harmony export ready */
/* unused harmony export cssTransform */
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("456d");
/* harmony import */ var core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_keys__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("ac6a");
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_1__);


function offset(el) {
  if (!el || el === window) {
    return {
      top: 0,
      left: 0
    };
  }

  var _el$getBoundingClient = el.getBoundingClientRect(),
      top = _el$getBoundingClient.top,
      left = _el$getBoundingClient.left;

  return {
    top: top,
    left: left
  };
}
function style(el, property) {
  return window.getComputedStyle(el).getPropertyValue(property);
}
function height(el) {
  if (el === window) {
    return window.innerHeight;
  }

  return parseFloat(style(el, 'height'));
}
function width(el) {
  if (el === window) {
    return window.innerWidth;
  }

  return parseFloat(style(el, 'width'));
}
function css(element, css) {
  var style = element.style;
  Object.keys(css).forEach(function (prop) {
    style[prop] = css[prop];
  });
}
function ready(fn) {
  if (typeof fn !== 'function') {
    return;
  }

  if (document.readyState !== 'loading') {
    return fn();
  }

  document.addEventListener('DOMContentLoaded', fn, false);
}
var prefix = ['-webkit-', '-moz-', '-ms-', '-o-'];
function cssTransform(val) {
  var o = {
    transform: val
  };
  prefix.forEach(function (p) {
    o[p + 'transform'] = val;
  });
  return o;
}
/* harmony default export */ __webpack_exports__["b"] = ({
  offset: offset,
  style: style,
  height: height,
  width: width,
  css: css,
  ready: ready,
  cssTransform: cssTransform
});

/***/ }),

/***/ "ac22":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "ac6a":
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__("cadf");
var getKeys = __webpack_require__("0d58");
var redefine = __webpack_require__("2aba");
var global = __webpack_require__("7726");
var hide = __webpack_require__("32e9");
var Iterators = __webpack_require__("84f2");
var wks = __webpack_require__("2b4c");
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),

/***/ "aef6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__("5ca1");
var toLength = __webpack_require__("9def");
var context = __webpack_require__("d2c8");
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__("5147")(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),

/***/ "b041":
/***/ (function(module, exports) {

module.exports = function escape(url) {
    if (typeof url !== 'string') {
        return url
    }
    // If url is already wrapped in quotes, remove them
    if (/^['"].*['"]$/.test(url)) {
        url = url.slice(1, -1);
    }
    // Should url be wrapped?
    // See https://drafts.csswg.org/css-values-3/#urls
    if (/["'() \t\n]/.test(url)) {
        return '"' + url.replace(/"/g, '\\"').replace(/\n/g, '\\n') + '"'
    }

    return url
}


/***/ }),

/***/ "b0c5":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpExec = __webpack_require__("520a");
__webpack_require__("5ca1")({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});


/***/ }),

/***/ "b157":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js
var web_dom_iterable = __webpack_require__("ac6a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.keys.js
var es6_object_keys = __webpack_require__("456d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.split.js
var es6_regexp_split = __webpack_require__("28a5");

// CONCATENATED MODULE: ./node_modules/quasar-framework/i18n/en-us.js

/* harmony default export */ var en_us = ({
  lang: 'en-us',
  label: {
    clear: 'Clear',
    ok: 'OK',
    cancel: 'Cancel',
    close: 'Close',
    set: 'Set',
    select: 'Select',
    reset: 'Reset',
    remove: 'Remove',
    update: 'Update',
    create: 'Create',
    search: 'Search',
    filter: 'Filter',
    refresh: 'Refresh'
  },
  date: {
    days: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    daysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    firstDayOfWeek: 0,
    format24h: false
  },
  pullToRefresh: {
    pull: 'Pull down to refresh',
    release: 'Release to refresh',
    refresh: 'Refreshing...'
  },
  table: {
    noData: 'No data available',
    noResults: 'No matching records found',
    loading: 'Loading...',
    selectedRecords: function selectedRecords(rows) {
      return rows === 1 ? '1 record selected.' : (rows === 0 ? 'No' : rows) + ' records selected.';
    },
    recordsPerPage: 'Records per page:',
    allRows: 'All',
    pagination: function pagination(start, end, total) {
      return start + '-' + end + ' of ' + total;
    },
    columns: 'Columns'
  },
  editor: {
    url: 'URL',
    bold: 'Bold',
    italic: 'Italic',
    strikethrough: 'Strikethrough',
    underline: 'Underline',
    unorderedList: 'Unordered List',
    orderedList: 'Ordered List',
    subscript: 'Subscript',
    superscript: 'Superscript',
    hyperlink: 'Hyperlink',
    toggleFullscreen: 'Toggle Fullscreen',
    quote: 'Quote',
    left: 'Left align',
    center: 'Center align',
    right: 'Right align',
    justify: 'Justify align',
    print: 'Print',
    outdent: 'Decrease indentation',
    indent: 'Increase indentation',
    removeFormat: 'Remove formatting',
    formatting: 'Formatting',
    fontSize: 'Font Size',
    align: 'Align',
    hr: 'Insert Horizontal Rule',
    undo: 'Undo',
    redo: 'Redo',
    header1: 'Header 1',
    header2: 'Header 2',
    header3: 'Header 3',
    header4: 'Header 4',
    header5: 'Header 5',
    header6: 'Header 6',
    paragraph: 'Paragraph',
    code: 'Code',
    size1: 'Very small',
    size2: 'A bit small',
    size3: 'Normal',
    size4: 'Medium-large',
    size5: 'Big',
    size6: 'Very big',
    size7: 'Maximum',
    defaultFont: 'Default Font'
  },
  tree: {
    noNodes: 'No nodes available',
    noResults: 'No matching nodes found'
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/plugins/platform.js
var platform = __webpack_require__("a60d");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/i18n.js




/* harmony default export */ var i18n = __webpack_exports__["a"] = ({
  install: function install($q, queues, Vue, lang) {
    var _this = this;

    if (platform["d" /* isSSR */]) {
      queues.server.push(function (q, ctx) {
        var opt = {
          lang: q.i18n.lang,
          dir: q.i18n.rtl ? 'rtl' : 'ltr'
        },
            fn = ctx.ssr.setHtmlAttrs;

        if (typeof fn === 'function') {
          fn(opt);
        } else {
          ctx.ssr.Q_HTML_ATTRS = Object.keys(opt).map(function (key) {
            return "".concat(key, "=").concat(opt[key]);
          }).join(' ');
        }
      });
    }

    this.set = function () {
      var lang = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : en_us;
      lang.set = _this.set;
      lang.getLocale = _this.getLocale;
      lang.rtl = lang.rtl || false;

      if (!platform["d" /* isSSR */]) {
        var el = document.documentElement;
        el.setAttribute('dir', lang.rtl ? 'rtl' : 'ltr');
        el.setAttribute('lang', lang.lang);
      }

      if (platform["d" /* isSSR */] || $q.i18n) {
        $q.i18n = lang;
      } else {
        Vue.util.defineReactive($q, 'i18n', lang);
      }

      _this.name = lang.lang;
      _this.lang = lang;
    };

    this.set(lang);
  },
  getLocale: function getLocale() {
    if (platform["d" /* isSSR */]) {
      return;
    }

    var val = navigator.language || navigator.languages[0] || navigator.browserLanguage || navigator.userLanguage || navigator.systemLanguage;

    if (val) {
      return val.toLowerCase();
    }
  }
});

/***/ }),

/***/ "b18c":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return listenOpts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return leftClick; });
/* unused harmony export middleClick */
/* unused harmony export rightClick */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getEventKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return position; });
/* unused harmony export targetElement */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getEventPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getMouseWheelDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return stopAndPrevent; });
var listenOpts = {};
Object.defineProperty(listenOpts, 'passive', {
  configurable: true,
  get: function get() {
    var passive;

    try {
      var opts = Object.defineProperty({}, 'passive', {
        get: function get() {
          passive = {
            passive: true
          };
        }
      });
      window.addEventListener('qtest', null, opts);
      window.removeEventListener('qtest', null, opts);
    } catch (e) {}

    listenOpts.passive = passive;
    return passive;
  },
  set: function set(val) {
    Object.defineProperty(this, 'passive', {
      value: val
    });
  }
});
function leftClick(e) {
  return e.button === 0;
}
function middleClick(e) {
  return e.button === 1;
}
function rightClick(e) {
  return e.button === 2;
}
function getEventKey(e) {
  return e.which || e.keyCode;
}
function position(e) {
  var posx, posy;

  if (e.touches && e.touches[0]) {
    e = e.touches[0];
  } else if (e.changedTouches && e.changedTouches[0]) {
    e = e.changedTouches[0];
  }

  if (e.clientX || e.clientY) {
    posx = e.clientX;
    posy = e.clientY;
  } else if (e.pageX || e.pageY) {
    posx = e.pageX - document.body.scrollLeft - document.documentElement.scrollLeft;
    posy = e.pageY - document.body.scrollTop - document.documentElement.scrollTop;
  } else {
    var offset = targetElement(e).getBoundingClientRect();
    posx = (offset.right - offset.left) / 2 + offset.left;
    posy = (offset.bottom - offset.top) / 2 + offset.top;
  }

  return {
    top: posy,
    left: posx
  };
}
function targetElement(e) {
  var target;

  if (e.target) {
    target = e.target;
  } else if (e.srcElement) {
    target = e.srcElement;
  }

  if (target.nodeType === 3) {
    target = target.parentNode;
  }

  return target;
}
function getEventPath(e) {
  if (e.path) {
    return e.path;
  }

  if (e.composedPath) {
    return e.composedPath();
  }

  var path = [];
  var el = e.target;

  while (el) {
    path.push(el);

    if (el.tagName === 'HTML') {
      path.push(document);
      path.push(window);
      return path;
    }

    el = el.parentElement;
  }
}
var LINE_HEIGHT = 40,
    PAGE_HEIGHT = 800;
function getMouseWheelDistance(e) {
  var x = e.deltaX,
      y = e.deltaY;

  if ((x || y) && e.deltaMode) {
    var multiplier = e.deltaMode === 1 ? LINE_HEIGHT : PAGE_HEIGHT;
    x *= multiplier;
    y *= multiplier;
  }

  if (e.shiftKey && !x) {
    var _ref = [x, y];
    y = _ref[0];
    x = _ref[1];
  }

  return {
    x: x,
    y: y
  };
}
function stopAndPrevent(e) {
  e.preventDefault();
  e.stopPropagation();
}
/* harmony default export */ __webpack_exports__["a"] = ({
  listenOpts: listenOpts,
  leftClick: leftClick,
  middleClick: middleClick,
  rightClick: rightClick,
  getEventKey: getEventKey,
  position: position,
  targetElement: targetElement,
  getEventPath: getEventPath,
  getMouseWheelDistance: getMouseWheelDistance,
  stopAndPrevent: stopAndPrevent
});

/***/ }),

/***/ "b50d":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var settle = __webpack_require__("467f");
var buildURL = __webpack_require__("30b5");
var parseHeaders = __webpack_require__("c345");
var isURLSameOrigin = __webpack_require__("3934");
var createError = __webpack_require__("2d83");
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__("9fa6");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if ( true &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__("7aac");

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "b54a":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__("386b")('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),

/***/ "b5b8":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_string_anchor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("8449");
/* harmony import */ var core_js_modules_es6_string_anchor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_anchor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_popup_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("ea22");
/* harmony import */ var _utils_frame_debounce_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("8e2f");
/* harmony import */ var _utils_scroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("1528");
/* harmony import */ var _utils_escape_key_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("6f68");
/* harmony import */ var _mixins_model_toggle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("fb40");
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("b18c");
/* harmony import */ var _mixins_can_render_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("559e");








/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QPopover',
  mixins: [_mixins_model_toggle_js__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"], _mixins_can_render_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]],
  props: {
    anchor: {
      type: String,
      validator: _utils_popup_js__WEBPACK_IMPORTED_MODULE_1__[/* positionValidator */ "c"]
    },
    self: {
      type: String,
      validator: _utils_popup_js__WEBPACK_IMPORTED_MODULE_1__[/* positionValidator */ "c"]
    },
    fit: Boolean,
    cover: Boolean,
    persistent: Boolean,
    keepOnScreen: Boolean,
    maxHeight: String,
    touchPosition: Boolean,
    anchorClick: {
      type: Boolean,
      default: true
    },
    offset: {
      type: Array,
      validator: _utils_popup_js__WEBPACK_IMPORTED_MODULE_1__[/* offsetValidator */ "a"]
    },
    noFocus: Boolean,
    noRefocus: Boolean,
    disable: Boolean
  },
  watch: {
    $route: function $route() {
      this.hide();
    }
  },
  computed: {
    horizSide: function horizSide() {
      return this.$q.i18n.rtl ? 'right' : 'left';
    },
    anchorOrigin: function anchorOrigin() {
      return Object(_utils_popup_js__WEBPACK_IMPORTED_MODULE_1__[/* parsePosition */ "b"])(this.cover ? "top ".concat(this.horizSide) : this.anchor || "bottom ".concat(this.horizSide));
    },
    selfOrigin: function selfOrigin() {
      return Object(_utils_popup_js__WEBPACK_IMPORTED_MODULE_1__[/* parsePosition */ "b"])(this.self || "top ".concat(this.horizSide));
    }
  },
  render: function render(h) {
    if (!this.canRender) {
      return;
    }

    return h('div', {
      staticClass: 'q-popover scroll',
      ref: 'content',
      attrs: {
        tabindex: -1
      },
      on: {
        click: function click(e) {
          e.stopPropagation();
        }
      }
    }, this.$slots.default);
  },
  mounted: function mounted() {
    var _this = this;

    this.__updatePosition = Object(_utils_frame_debounce_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"])(function (_, event, animate) {
      return _this.reposition(event, animate);
    });
    this.$nextTick(function () {
      _this.anchorEl = _this.$el.parentNode;

      _this.anchorEl.removeChild(_this.$el);

      if (_this.anchorEl.classList.contains('q-btn-inner') || _this.anchorEl.classList.contains('q-if-inner') || _this.anchorEl.classList.contains('no-pointer-events')) {
        _this.anchorEl = _this.anchorEl.parentNode;
      }

      if (_this.anchorClick) {
        _this.anchorEl.classList.add('cursor-pointer');

        _this.anchorEl.addEventListener('click', _this.toggle);

        _this.anchorEl.addEventListener('keyup', _this.__toggleKey);
      }
    });
    this.value && this.show();
  },
  beforeDestroy: function beforeDestroy() {
    this.showing && this.__cleanup();

    if (this.anchorClick && this.anchorEl) {
      this.anchorEl.removeEventListener('click', this.toggle);
      this.anchorEl.removeEventListener('keyup', this.__toggleKey);
    }
  },
  methods: {
    __show: function __show(evt) {
      var _this2 = this;

      if (!this.noRefocus) {
        this.__refocusTarget = this.anchorClick && this.anchorEl || document.activeElement;
      }

      document.body.appendChild(this.$el);
      _utils_escape_key_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].register(function () {
        _this2.$emit('escape-key');

        _this2.hide();
      });
      this.scrollTarget = Object(_utils_scroll_js__WEBPACK_IMPORTED_MODULE_3__[/* getScrollTarget */ "d"])(this.anchorEl);
      this.scrollTarget.addEventListener('scroll', this.__updatePosition, _utils_event_js__WEBPACK_IMPORTED_MODULE_6__[/* listenOpts */ "f"].passive);

      if (this.scrollTarget !== window) {
        window.addEventListener('scroll', this.__updatePosition, _utils_event_js__WEBPACK_IMPORTED_MODULE_6__[/* listenOpts */ "f"].passive);
      }

      window.addEventListener('resize', this.__updatePosition, _utils_event_js__WEBPACK_IMPORTED_MODULE_6__[/* listenOpts */ "f"].passive);

      this.__updatePosition(0, evt, true);

      clearTimeout(this.timer);

      if (!this.noFocus && this.$refs.content) {
        this.$refs.content.focus();
      }

      this.timer = setTimeout(function () {
        document.body.addEventListener('mousedown', _this2.__bodyHide, true);
        document.body.addEventListener('touchstart', _this2.__bodyHide, true);
        _this2.showPromise && _this2.showPromiseResolve();
      }, 0);
    },
    __toggleKey: function __toggleKey(evt) {
      if (evt.keyCode === 13) {
        this.toggle(evt);
      }
    },
    __bodyHide: function __bodyHide(evt) {
      if (this.persistent || evt && evt.target && (this.$el.contains(evt.target) || this.anchorEl.contains(evt.target))) {
        return;
      }

      this.hide(evt);
    },
    __hide: function __hide() {
      this.__cleanup();

      this.hidePromise && this.hidePromiseResolve();

      if (!this.noRefocus && this.__refocusTarget) {
        this.__refocusTarget.focus();

        !this.__refocusTarget.classList.contains('q-if') && this.__refocusTarget.blur();
      }
    },
    __cleanup: function __cleanup() {
      clearTimeout(this.timer);
      document.body.removeEventListener('mousedown', this.__bodyHide, true);
      document.body.removeEventListener('touchstart', this.__bodyHide, true);
      this.scrollTarget.removeEventListener('scroll', this.__updatePosition, _utils_event_js__WEBPACK_IMPORTED_MODULE_6__[/* listenOpts */ "f"].passive);

      if (this.scrollTarget !== window) {
        window.removeEventListener('scroll', this.__updatePosition, _utils_event_js__WEBPACK_IMPORTED_MODULE_6__[/* listenOpts */ "f"].passive);
      }

      window.removeEventListener('resize', this.__updatePosition, _utils_event_js__WEBPACK_IMPORTED_MODULE_6__[/* listenOpts */ "f"].passive);
      _utils_escape_key_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"].pop();
      this.$el.remove();
    },
    reposition: function reposition(event, animate) {
      var _this$anchorEl$getBou = this.anchorEl.getBoundingClientRect(),
          top = _this$anchorEl$getBou.top,
          bottom = _this$anchorEl$getBou.bottom,
          left = _this$anchorEl$getBou.left,
          right = _this$anchorEl$getBou.right;

      if (!this.keepOnScreen && (bottom < 0 || top > window.innerHeight || right < 0 || left > window.innerWidth)) {
        return this.hide();
      }

      if (this.fit || this.cover) {
        var style = window.getComputedStyle(this.anchorEl);
        this.$el.style.minWidth = style.getPropertyValue('width');

        if (this.cover) {
          this.$el.style.minHeight = style.getPropertyValue('height');
        }
      }

      if (animate) {
        if (this.touchPosition) {
          var _eventPosition = Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_6__[/* position */ "g"])(event),
              eventTop = _eventPosition.top,
              eventLeft = _eventPosition.left;

          this.touchOffset = {
            left: eventLeft - left,
            top: eventTop - top
          };
        } else {
          delete this.touchOffset;
        }
      }

      Object(_utils_popup_js__WEBPACK_IMPORTED_MODULE_1__[/* setPosition */ "d"])({
        event: event,
        animate: animate,
        el: this.$el,
        offset: this.offset,
        anchorEl: this.anchorEl,
        anchorOrigin: this.anchorOrigin,
        selfOrigin: this.selfOrigin,
        maxHeight: this.maxHeight,
        anchorClick: this.anchorClick,
        touchPosition: this.touchPosition,
        touchOffset: this.touchOffset,
        cover: this.cover
      });
    }
  }
});

/***/ }),

/***/ "b70a":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _QSpinner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("7668");

/* harmony default export */ __webpack_exports__["a"] = ({
  mixins: [_QSpinner__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]],
  name: 'QSpinner'
});

/***/ }),

/***/ "b8d9":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _mixins_item_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("bd60");



function text(h, name, val, n) {
  n = parseInt(n, 10);
  return h('div', {
    staticClass: "q-item-".concat(name).concat(n === 1 ? ' ellipsis' : ''),
    style: Object(_mixins_item_js__WEBPACK_IMPORTED_MODULE_1__[/* textStyle */ "c"])(n),
    domProps: {
      innerHTML: val
    }
  });
}

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QItemMain',
  props: {
    label: String,
    labelLines: [String, Number],
    sublabel: String,
    sublabelLines: [String, Number],
    inset: Boolean,
    tag: {
      type: String,
      default: 'div'
    }
  },
  render: function render(h) {
    return h(this.tag, {
      staticClass: 'q-item-main q-item-section',
      'class': {
        'q-item-main-inset': this.inset
      }
    }, [this.label ? text(h, 'label', this.label, this.labelLines) : null, this.sublabel ? text(h, 'sublabel', this.sublabel, this.sublabelLines) : null, this.$slots.default]);
  }
});

/***/ }),

/***/ "bb0b":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/flUhRq6tzZclQEJ-Vdg-IuiaDsNa.c38ebd3c.woff";

/***/ }),

/***/ "bc3a":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("cee4");

/***/ }),

/***/ "bc9b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _mixins_checkbox_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ecdd");
/* harmony import */ var _mixins_option_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("2828");
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("52b5");



/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QToggle',
  mixins: [_mixins_checkbox_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"], _mixins_option_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]],
  props: {
    icon: String
  },
  computed: {
    currentIcon: function currentIcon() {
      return (this.isTrue ? this.checkedIcon : this.uncheckedIcon) || this.icon;
    },
    iconColor: function iconColor() {
      return  false ? undefined : this.isTrue ? 'white' : 'dark';
    },
    baseClass: function baseClass() {
      if (false) {}
    }
  },
  methods: {
    __swipe: function __swipe(evt) {
      if (evt.direction === 'left') {
        if (this.isTrue) {
          this.toggle();
        }
      } else if (evt.direction === 'right') {
        if (this.isFalse) {
          this.toggle();
        }
      }
    },
    __getContent: function __getContent(h) {
      return [h('div', {
        staticClass: 'q-toggle-base',
        'class': this.baseClass
      }), h('div', {
        staticClass: 'q-toggle-handle row flex-center'
      }, [this.currentIcon ? h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], {
        staticClass: 'q-toggle-icon',
        props: {
          name: this.currentIcon,
          color: this.iconColor
        }
      }) : null,  true ? h('div', {
        ref: 'ripple',
        staticClass: 'q-radial-ripple'
      }) : undefined])];
    }
  },
  beforeCreate: function beforeCreate() {
    this.__kebabTag = 'q-toggle';
  }
});

/***/ }),

/***/ "bcaa":
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__("cb7c");
var isObject = __webpack_require__("d3f4");
var newPromiseCapability = __webpack_require__("a5b8");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "bd60":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return textStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return subItemProps; });
/* harmony import */ var core_js_modules_es6_string_link__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b54a");
/* harmony import */ var core_js_modules_es6_string_link__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_link__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils_router_link_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("1679");



function textStyle(n) {
  return n === void 0 || n < 2 ? {} : {
    overflow: 'hidden',
    display: '-webkit-box',
    '-webkit-box-orient': 'vertical',
    '-webkit-line-clamp': n
  };
}
var subItemProps = {
  icon: String,
  rightIcon: String,
  image: String,
  rightImage: String,
  avatar: String,
  rightAvatar: String,
  letter: String,
  rightLetter: String,
  label: String,
  sublabel: String,
  labelLines: [String, Number],
  sublabelLines: [String, Number]
};
/* harmony default export */ __webpack_exports__["a"] = ({
  mixins: [{
    props: _utils_router_link_js__WEBPACK_IMPORTED_MODULE_2__[/* routerLinkProps */ "d"]
  }],
  props: {
    dark: Boolean,
    link: Boolean,
    dense: Boolean,
    sparse: Boolean,
    separator: Boolean,
    insetSeparator: Boolean,
    multiline: Boolean,
    highlight: Boolean,
    tag: {
      type: String,
      default: 'div'
    }
  },
  computed: {
    itemClasses: function itemClasses() {
      return {
        'q-item': true,
        'q-item-division': true,
        'relative-position': true,
        'q-item-dark': this.dark,
        'q-item-dense': this.dense,
        'q-item-sparse': this.sparse,
        'q-item-separator': this.separator,
        'q-item-inset-separator': this.insetSeparator,
        'q-item-multiline': this.multiline,
        'q-item-highlight': this.highlight,
        'q-item-link': this.to || this.link
      };
    }
  }
});

/***/ }),

/***/ "be13":
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),

/***/ "be90":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _plugins_platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a60d");

/* harmony default export */ __webpack_exports__["a"] = ({
  __history: [],
  add: function add() {},
  remove: function remove() {},
  install: function install($q, cfg) {
    var _this = this;

    if (_plugins_platform_js__WEBPACK_IMPORTED_MODULE_0__[/* isSSR */ "d"] || !$q.platform.is.cordova) {
      return;
    }

    this.add = function (definition) {
      _this.__history.push(definition);
    };

    this.remove = function (definition) {
      var index = _this.__history.indexOf(definition);

      if (index >= 0) {
        _this.__history.splice(index, 1);
      }
    };

    var exit = cfg.cordova === void 0 || cfg.cordova.backButtonExit !== false;
    document.addEventListener('deviceready', function () {
      document.addEventListener('backbutton', function () {
        if (_this.__history.length) {
          _this.__history.pop().handler();
        } else if (exit && window.location.hash === '#/') {
          navigator.app.exitApp();
        } else {
          window.history.back();
        }
      }, false);
    });
  }
});

/***/ }),

/***/ "c345":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "c366":
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__("6821");
var toLength = __webpack_require__("9def");
var toAbsoluteIndex = __webpack_require__("77f1");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "c401":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),

/***/ "c532":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__("1d2b");
var isBuffer = __webpack_require__("044b");

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),

/***/ "c5f6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__("7726");
var has = __webpack_require__("69a8");
var cof = __webpack_require__("2d95");
var inheritIfRequired = __webpack_require__("5dbc");
var toPrimitive = __webpack_require__("6a99");
var fails = __webpack_require__("79e5");
var gOPN = __webpack_require__("9093").f;
var gOPD = __webpack_require__("11e9").f;
var dP = __webpack_require__("86cc").f;
var $trim = __webpack_require__("aa77").trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__("2aeb")(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__("9e1e") ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__("2aba")(global, NUMBER, $Number);
}


/***/ }),

/***/ "c604":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js
var es7_array_includes = __webpack_require__("6762");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.includes.js
var es6_string_includes = __webpack_require__("2fdb");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-top.js
/* harmony default export */ var table_top = ({
  computed: {
    marginalsProps: function marginalsProps() {
      return {
        pagination: this.computedPagination,
        pagesNumber: this.pagesNumber,
        isFirstPage: this.isFirstPage,
        isLastPage: this.isLastPage,
        prevPage: this.prevPage,
        nextPage: this.nextPage,
        inFullscreen: this.inFullscreen,
        toggleFullscreen: this.toggleFullscreen
      };
    }
  },
  methods: {
    getTop: function getTop(h) {
      var top = this.$scopedSlots.top,
          topLeft = this.$scopedSlots['top-left'],
          topRight = this.$scopedSlots['top-right'],
          topSelection = this.$scopedSlots['top-selection'],
          hasSelection = this.hasSelectionMode && topSelection && this.rowsSelectedNumber > 0,
          staticClass = 'q-table-top relative-position row items-center',
          child = [];

      if (top) {
        return h('div', {
          staticClass: staticClass
        }, [top(this.marginalsProps)]);
      }

      if (hasSelection) {
        child.push(topSelection(this.marginalsProps));
      } else {
        if (topLeft) {
          child.push(h('div', {
            staticClass: 'q-table-control'
          }, [topLeft(this.marginalsProps)]));
        } else if (this.title) {
          child.push(h('div', {
            staticClass: 'q-table-control'
          }, [h('div', {
            staticClass: 'q-table-title'
          }, this.title)]));
        }
      }

      if (topRight) {
        child.push(h('div', {
          staticClass: 'q-table-separator col'
        }));
        child.push(h('div', {
          staticClass: 'q-table-control'
        }, [topRight(this.marginalsProps)]));
      }

      if (child.length === 0) {
        return;
      }

      return h('div', {
        staticClass: staticClass
      }, child);
    }
  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.function.name.js
var es6_function_name = __webpack_require__("7f7f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.sort.js
var es6_array_sort = __webpack_require__("55dd");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/progress/QProgress.js
var QProgress = __webpack_require__("d3e7");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/checkbox/QCheckbox.js
var QCheckbox = __webpack_require__("525b");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/table/QTh.js
var QTh = __webpack_require__("62a9");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-header.js





/* harmony default export */ var table_header = ({
  methods: {
    getTableHeader: function getTableHeader(h) {
      var child = [this.getTableHeaderRow(h)];

      if (this.loading) {
        child.push(h('tr', {
          staticClass: 'q-table-progress animate-fade'
        }, [h('td', {
          attrs: {
            colspan: '100%'
          }
        }, [h(QProgress["a" /* default */], {
          props: {
            color: this.color,
            indeterminate: true,
            height: '2px'
          }
        })])]));
      }

      return h('thead', child);
    },
    getTableHeaderRow: function getTableHeaderRow(h) {
      var _this = this;

      var header = this.$scopedSlots.header,
          headerCell = this.$scopedSlots['header-cell'];

      if (header) {
        return header(this.addTableHeaderRowMeta({
          header: true,
          cols: this.computedCols,
          sort: this.sort,
          colsMap: this.computedColsMap
        }));
      }

      var mapFn;

      if (headerCell) {
        mapFn = function mapFn(col) {
          return headerCell({
            col: col,
            cols: _this.computedCols,
            sort: _this.sort,
            colsMap: _this.computedColsMap
          });
        };
      } else {
        mapFn = function mapFn(col) {
          return h(QTh["a" /* default */], {
            key: col.name,
            props: {
              props: {
                col: col,
                cols: _this.computedCols,
                sort: _this.sort,
                colsMap: _this.computedColsMap
              }
            },
            style: col.style,
            'class': col.classes
          }, col.label);
        };
      }

      var child = this.computedCols.map(mapFn);

      if (this.singleSelection && !this.grid) {
        child.unshift(h('th', {
          staticClass: 'q-table-col-auto-width'
        }, [' ']));
      } else if (this.multipleSelection) {
        child.unshift(h('th', {
          staticClass: 'q-table-col-auto-width'
        }, [h(QCheckbox["a" /* default */], {
          props: {
            color: this.color,
            value: this.someRowsSelected ? null : this.allRowsSelected,
            dark: this.dark
          },
          on: {
            input: function input(val) {
              if (_this.someRowsSelected) {
                val = false;
              }

              _this.__updateSelection(_this.computedRows.map(function (row) {
                return row[_this.rowKey];
              }), _this.computedRows, val);
            }
          }
        })]));
      }

      return h('tr', child);
    },
    addTableHeaderRowMeta: function addTableHeaderRowMeta(data) {
      var _this2 = this;

      if (this.multipleSelection) {
        Object.defineProperty(data, 'selected', {
          get: function get() {
            return _this2.someRowsSelected ? 'some' : _this2.allRowsSelected;
          },
          set: function set(val) {
            if (_this2.someRowsSelected) {
              val = false;
            }

            _this2.__updateSelection(_this2.computedRows.map(function (row) {
              return row[_this2.rowKey];
            }), _this2.computedRows, val);
          }
        });
        data.partialSelected = this.someRowsSelected;
        data.multipleSelect = true;
      }

      return data;
    }
  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.assign.js
var es6_object_assign = __webpack_require__("f751");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-body.js



/* harmony default export */ var table_body = ({
  methods: {
    getTableBody: function getTableBody(h) {
      var _this = this;

      var body = this.$scopedSlots.body,
          bodyCell = this.$scopedSlots['body-cell'],
          topRow = this.$scopedSlots['top-row'],
          bottomRow = this.$scopedSlots['bottom-row'];
      var child = [];

      if (body) {
        child = this.computedRows.map(function (row) {
          var key = row[_this.rowKey],
              selected = _this.isRowSelected(key);

          return body(_this.addBodyRowMeta({
            key: key,
            row: row,
            cols: _this.computedCols,
            colsMap: _this.computedColsMap,
            __trClass: selected ? 'selected' : ''
          }));
        });
      } else {
        child = this.computedRows.map(function (row) {
          var key = row[_this.rowKey],
              selected = _this.isRowSelected(key),
              child = bodyCell ? _this.computedCols.map(function (col) {
            return bodyCell(_this.addBodyCellMetaData({
              row: row,
              col: col
            }));
          }) : _this.computedCols.map(function (col) {
            var slot = _this.$scopedSlots["body-cell-".concat(col.name)];

            return slot ? slot(_this.addBodyCellMetaData({
              row: row,
              col: col
            })) : h('td', {
              staticClass: col.__tdClass,
              style: col.style,
              'class': col.classes
            }, _this.getCellValue(col, row));
          });

          if (_this.hasSelectionMode) {
            child.unshift(h('td', {
              staticClass: 'q-table-col-auto-width'
            }, [h(QCheckbox["a" /* default */], {
              props: {
                value: selected,
                color: _this.color,
                dark: _this.dark
              },
              on: {
                input: function input(adding) {
                  _this.__updateSelection([key], [row], adding);
                }
              }
            })]));
          }

          return h('tr', {
            key: key,
            'class': {
              selected: selected
            }
          }, child);
        });
      }

      if (topRow) {
        child.unshift(topRow({
          cols: this.computedCols
        }));
      }

      if (bottomRow) {
        child.push(bottomRow({
          cols: this.computedCols
        }));
      }

      return h('tbody', child);
    },
    addBodyRowMeta: function addBodyRowMeta(data) {
      var _this2 = this;

      if (this.hasSelectionMode) {
        Object.defineProperty(data, 'selected', {
          get: function get() {
            return _this2.isRowSelected(data.key);
          },
          set: function set(adding) {
            _this2.__updateSelection([data.key], [data.row], adding);
          }
        });
      }

      Object.defineProperty(data, 'expand', {
        get: function get() {
          return _this2.rowsExpanded[data.key] === true;
        },
        set: function set(val) {
          _this2.$set(_this2.rowsExpanded, data.key, val);
        }
      });
      data.cols = data.cols.map(function (col) {
        var c = Object.assign({}, col);
        Object.defineProperty(c, 'value', {
          get: function get() {
            return _this2.getCellValue(col, data.row);
          }
        });
        return c;
      });
      return data;
    },
    addBodyCellMetaData: function addBodyCellMetaData(data) {
      var _this3 = this;

      Object.defineProperty(data, 'value', {
        get: function get() {
          return _this3.getCellValue(data.col, data.row);
        }
      });
      return data;
    },
    getCellValue: function getCellValue(col, row) {
      var val = typeof col.field === 'function' ? col.field(row) : row[col.field];
      return col.format ? col.format(val) : val;
    }
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/select/QSelect.js
var QSelect = __webpack_require__("5931");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/btn/QBtn.js
var QBtn = __webpack_require__("482e");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/components/icon/QIcon.js
var QIcon = __webpack_require__("52b5");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-bottom.js



/* harmony default export */ var table_bottom = ({
  computed: {
    navIcon: function navIcon() {
      var ico = [this.$q.icon.table.prevPage, this.$q.icon.table.nextPage];
      return this.$q.i18n.rtl ? ico.reverse() : ico;
    }
  },
  methods: {
    getBottom: function getBottom(h) {
      if (this.hideBottom) {
        return;
      }

      if (this.nothingToDisplay) {
        var message = this.filter ? this.noResultsLabel || this.$q.i18n.table.noResults : this.loading ? this.loadingLabel || this.$q.i18n.table.loading : this.noDataLabel || this.$q.i18n.table.noData;
        return h('div', {
          staticClass: 'q-table-bottom row items-center q-table-nodata'
        }, [h(QIcon["a" /* default */], {
          props: {
            name: this.$q.icon.table.warning
          }
        }), message]);
      }

      var bottom = this.$scopedSlots.bottom;
      return h('div', {
        staticClass: 'q-table-bottom row items-center',
        'class': bottom ? null : 'justify-end'
      }, bottom ? [bottom(this.marginalsProps)] : this.getPaginationRow(h));
    },
    getPaginationRow: function getPaginationRow(h) {
      var _this = this;

      var rowsPerPage = this.computedPagination.rowsPerPage,
          paginationLabel = this.paginationLabel || this.$q.i18n.table.pagination,
          paginationSlot = this.$scopedSlots.pagination;
      return [h('div', {
        staticClass: 'q-table-control'
      }, [h('div', [this.hasSelectionMode && this.rowsSelectedNumber > 0 ? (this.selectedRowsLabel || this.$q.i18n.table.selectedRecords)(this.rowsSelectedNumber) : ''])]), h('div', {
        staticClass: 'q-table-separator col'
      }), this.rowsPerPageOptions.length > 1 && h('div', {
        staticClass: 'q-table-control'
      }, [h('span', {
        staticClass: 'q-table-bottom-item'
      }, [this.rowsPerPageLabel || this.$q.i18n.table.recordsPerPage]), h(QSelect["a" /* default */], {
        staticClass: 'inline q-table-bottom-item',
        props: {
          color: this.color,
          value: rowsPerPage,
          options: this.computedRowsPerPageOptions,
          dark: this.dark,
          hideUnderline: true
        },
        on: {
          input: function input(rowsPerPage) {
            _this.setPagination({
              page: 1,
              rowsPerPage: rowsPerPage
            });
          }
        }
      })]) || void 0, h('div', {
        staticClass: 'q-table-control'
      }, [paginationSlot ? paginationSlot(this.marginalsProps) : [h('span', {
        staticClass: 'q-table-bottom-item'
      }, [rowsPerPage ? paginationLabel(this.firstRowIndex + 1, Math.min(this.lastRowIndex, this.computedRowsNumber), this.computedRowsNumber) : paginationLabel(1, this.computedRowsNumber, this.computedRowsNumber)]), h(QBtn["a" /* default */], {
        props: {
          color: this.color,
          round: true,
          icon: this.navIcon[0],
          dense: true,
          flat: true,
          disable: this.isFirstPage
        },
        on: {
          click: this.prevPage
        }
      }), h(QBtn["a" /* default */], {
        props: {
          color: this.color,
          round: true,
          icon: this.navIcon[1],
          dense: true,
          flat: true,
          disable: this.isLastPage
        },
        on: {
          click: this.nextPage
        }
      })]])];
    }
  }
});
// CONCATENATED MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
// CONCATENATED MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}
// CONCATENATED MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
// CONCATENATED MODULE: ./node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js



function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}
// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find.js
var es6_array_find = __webpack_require__("7514");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/utils/sort.js
function sortString(a, b) {
  if (typeof a !== 'string') {
    throw new TypeError('The value for sorting must be a String');
  }

  return a.localeCompare(b);
}
function sortNumber(a, b) {
  return a - b;
}
function sortDate(a, b) {
  return new Date(a) - new Date(b);
}
function sortBoolean(a, b) {
  return a && !b ? -1 : !a && b ? 1 : 0;
}
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/is.js
var is = __webpack_require__("73f5");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-sort.js






/* harmony default export */ var table_sort = ({
  props: {
    sortMethod: {
      type: Function,
      default: function _default(data, sortBy, descending) {
        var col = this.columns.find(function (def) {
          return def.name === sortBy;
        });

        if (col === null || col.field === void 0) {
          return data;
        }

        var dir = descending ? -1 : 1,
            val = typeof col.field === 'function' ? function (v) {
          return col.field(v);
        } : function (v) {
          return v[col.field];
        };
        return data.sort(function (a, b) {
          var A = val(a),
              B = val(b);

          if (A === null || A === void 0) {
            return -1 * dir;
          }

          if (B === null || B === void 0) {
            return 1 * dir;
          }

          if (col.sort) {
            return col.sort(A, B) * dir;
          }

          if (Object(is["b" /* isNumber */])(A) && Object(is["b" /* isNumber */])(B)) {
            return (A - B) * dir;
          }

          if (Object(is["a" /* isDate */])(A) && Object(is["a" /* isDate */])(B)) {
            return sortDate(A, B) * dir;
          }

          if (typeof A === 'boolean' && typeof B === 'boolean') {
            return (a - b) * dir;
          }

          var _map = [A, B].map(function (s) {
            return (s + '').toLowerCase();
          });

          var _map2 = _slicedToArray(_map, 2);

          A = _map2[0];
          B = _map2[1];
          return A < B ? -1 * dir : A === B ? 0 : dir;
        });
      }
    }
  },
  computed: {
    columnToSort: function columnToSort() {
      var sortBy = this.computedPagination.sortBy;

      if (sortBy) {
        return this.columns.find(function (def) {
          return def.name === sortBy;
        }) || null;
      }
    }
  },
  methods: {
    sort: function sort(col) {
      if (col === Object(col)) {
        col = col.name;
      }

      var _this$computedPaginat = this.computedPagination,
          sortBy = _this$computedPaginat.sortBy,
          descending = _this$computedPaginat.descending;

      if (sortBy !== col) {
        sortBy = col;
        descending = false;
      } else {
        if (this.binaryStateSort) {
          descending = !descending;
        } else {
          if (descending) {
            sortBy = null;
          } else {
            descending = true;
          }
        }
      }

      this.setPagination({
        sortBy: sortBy,
        descending: descending,
        page: 1
      });
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-filter.js
/* harmony default export */ var table_filter = ({
  props: {
    filter: [String, Object],
    filterMethod: {
      type: Function,
      default: function _default(rows, terms) {
        var cols = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.computedCols;
        var cellValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.getCellValue;
        var lowerTerms = terms ? terms.toLowerCase() : '';
        return rows.filter(function (row) {
          return cols.some(function (col) {
            return (cellValue(col, row) + '').toLowerCase().indexOf(lowerTerms) !== -1;
          });
        });
      }
    }
  },
  watch: {
    filter: function filter() {
      var _this = this;

      this.$nextTick(function () {
        _this.setPagination({
          page: 1
        }, true);
      });
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-pagination.js


function samePagination(oldPag, newPag) {
  for (var prop in newPag) {
    if (newPag[prop] !== oldPag[prop]) {
      return false;
    }
  }

  return true;
}

function fixPagination(p) {
  if (p.page < 1) {
    p.page = 1;
  }

  if (p.rowsPerPage !== void 0 && p.rowsPerPage < 1) {
    p.rowsPerPage = 0;
  }

  return p;
}

/* harmony default export */ var table_pagination = ({
  props: {
    pagination: Object,
    rowsPerPageOptions: {
      type: Array,
      default: function _default() {
        return [3, 5, 7, 10, 15, 20, 25, 50, 0];
      }
    }
  },
  data: function data() {
    return {
      innerPagination: {
        sortBy: null,
        descending: false,
        page: 1,
        rowsPerPage: 5
      }
    };
  },
  computed: {
    computedPagination: function computedPagination() {
      return fixPagination(Object.assign({}, this.innerPagination, this.pagination));
    },
    firstRowIndex: function firstRowIndex() {
      var _this$computedPaginat = this.computedPagination,
          page = _this$computedPaginat.page,
          rowsPerPage = _this$computedPaginat.rowsPerPage;
      return (page - 1) * rowsPerPage;
    },
    lastRowIndex: function lastRowIndex() {
      var _this$computedPaginat2 = this.computedPagination,
          page = _this$computedPaginat2.page,
          rowsPerPage = _this$computedPaginat2.rowsPerPage;
      return page * rowsPerPage;
    },
    isFirstPage: function isFirstPage() {
      return this.computedPagination.page === 1;
    },
    pagesNumber: function pagesNumber() {
      return Math.max(1, Math.ceil(this.computedRowsNumber / this.computedPagination.rowsPerPage));
    },
    isLastPage: function isLastPage() {
      if (this.lastRowIndex === 0) {
        return true;
      }

      return this.computedPagination.page >= this.pagesNumber;
    },
    computedRowsPerPageOptions: function computedRowsPerPageOptions() {
      var _this = this;

      return this.rowsPerPageOptions.map(function (count) {
        return {
          label: count === 0 ? _this.$q.i18n.table.allRows : '' + count,
          value: count
        };
      });
    }
  },
  watch: {
    pagesNumber: function pagesNumber(lastPage, oldLastPage) {
      if (lastPage === oldLastPage) {
        return;
      }

      var currentPage = this.computedPagination.page;

      if (lastPage && !currentPage) {
        this.setPagination({
          page: 1
        });
      } else if (lastPage < currentPage) {
        this.setPagination({
          page: lastPage
        });
      }
    }
  },
  methods: {
    __sendServerRequest: function __sendServerRequest(pagination) {
      this.requestServerInteraction({
        pagination: pagination,
        filter: this.filter
      });
    },
    setPagination: function setPagination(val, forceServerRequest) {
      var newPagination = fixPagination(Object.assign({}, this.computedPagination, val));

      if (samePagination(this.computedPagination, newPagination)) {
        if (this.isServerSide && forceServerRequest) {
          this.__sendServerRequest(newPagination);
        }

        return;
      }

      if (this.isServerSide) {
        this.__sendServerRequest(newPagination);

        return;
      }

      if (this.pagination) {
        this.$emit('update:pagination', newPagination);
      } else {
        this.innerPagination = newPagination;
      }
    },
    prevPage: function prevPage() {
      var page = this.computedPagination.page;

      if (page > 1) {
        this.setPagination({
          page: page - 1
        });
      }
    },
    nextPage: function nextPage() {
      var _this$computedPaginat3 = this.computedPagination,
          page = _this$computedPaginat3.page,
          rowsPerPage = _this$computedPaginat3.rowsPerPage;

      if (this.lastRowIndex > 0 && page * rowsPerPage < this.computedRowsNumber) {
        this.setPagination({
          page: page + 1
        });
      }
    }
  },
  created: function created() {
    this.$emit('update:pagination', Object.assign({}, this.computedPagination));
  }
});
// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js
var web_dom_iterable = __webpack_require__("ac6a");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-row-selection.js



/* harmony default export */ var table_row_selection = ({
  props: {
    selection: {
      type: String,
      default: 'none',
      validator: function validator(v) {
        return ['single', 'multiple', 'none'].includes(v);
      }
    },
    selected: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  },
  computed: {
    selectedKeys: function selectedKeys() {
      var _this = this;

      var keys = {};
      this.selected.map(function (row) {
        return row[_this.rowKey];
      }).forEach(function (key) {
        keys[key] = true;
      });
      return keys;
    },
    hasSelectionMode: function hasSelectionMode() {
      return this.selection !== 'none';
    },
    singleSelection: function singleSelection() {
      return this.selection === 'single';
    },
    multipleSelection: function multipleSelection() {
      return this.selection === 'multiple';
    },
    allRowsSelected: function allRowsSelected() {
      var _this2 = this;

      if (this.multipleSelection) {
        return this.computedRows.length > 0 && this.computedRows.every(function (row) {
          return _this2.selectedKeys[row[_this2.rowKey]] === true;
        });
      }
    },
    someRowsSelected: function someRowsSelected() {
      var _this3 = this;

      if (this.multipleSelection) {
        return !this.allRowsSelected && this.computedRows.some(function (row) {
          return _this3.selectedKeys[row[_this3.rowKey]] === true;
        });
      }
    },
    rowsSelectedNumber: function rowsSelectedNumber() {
      return this.selected.length;
    }
  },
  methods: {
    isRowSelected: function isRowSelected(key) {
      return this.selectedKeys[key] === true;
    },
    clearSelection: function clearSelection() {
      this.$emit('update:selected', []);
    },
    __updateSelection: function __updateSelection(keys, rows, adding) {
      var _this4 = this;

      if (this.singleSelection) {
        this.$emit('update:selected', adding ? rows : []);
      } else {
        this.$emit('update:selected', adding ? this.selected.concat(rows) : this.selected.filter(function (row) {
          return !keys.includes(row[_this4.rowKey]);
        }));
      }
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-column-selection.js




/* harmony default export */ var table_column_selection = ({
  props: {
    visibleColumns: Array
  },
  computed: {
    computedCols: function computedCols() {
      var _this = this;

      var _this$computedPaginat = this.computedPagination,
          sortBy = _this$computedPaginat.sortBy,
          descending = _this$computedPaginat.descending;
      var cols = this.visibleColumns ? this.columns.filter(function (col) {
        return col.required || _this.visibleColumns.includes(col.name);
      }) : this.columns;
      return cols.map(function (col) {
        col.align = col.align || 'right';
        col.__iconClass = "q-table-sort-icon q-table-sort-icon-".concat(col.align);
        col.__thClass = "text-".concat(col.align).concat(col.sortable ? ' sortable' : '').concat(col.name === sortBy ? " sorted ".concat(descending ? 'sort-desc' : '') : '');
        col.__tdClass = "text-".concat(col.align);
        return col;
      });
    },
    computedColsMap: function computedColsMap() {
      var names = {};
      this.computedCols.forEach(function (col) {
        names[col.name] = col;
      });
      return names;
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/table-expand.js
/* harmony default export */ var table_expand = ({
  data: function data() {
    return {
      rowsExpanded: {}
    };
  }
});
// EXTERNAL MODULE: ./node_modules/quasar-framework/src/mixins/fullscreen.js
var fullscreen = __webpack_require__("30dd");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/components/table/QTable.js













/* harmony default export */ var QTable = __webpack_exports__["a"] = ({
  name: 'QTable',
  mixins: [fullscreen["a" /* default */], table_top, table_header, table_body, table_bottom, table_sort, table_filter, table_pagination, table_row_selection, table_column_selection, table_expand],
  props: {
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    rowKey: {
      type: String,
      default: 'id'
    },
    color: {
      type: String,
      default: 'grey-8'
    },
    grid: Boolean,
    dense: Boolean,
    columns: Array,
    loading: Boolean,
    title: String,
    hideHeader: Boolean,
    hideBottom: Boolean,
    dark: Boolean,
    separator: {
      type: String,
      default: 'horizontal',
      validator: function validator(v) {
        return ['horizontal', 'vertical', 'cell', 'none'].includes(v);
      }
    },
    binaryStateSort: Boolean,
    noDataLabel: String,
    noResultsLabel: String,
    loadingLabel: String,
    selectedRowsLabel: Function,
    rowsPerPageLabel: String,
    paginationLabel: Function,
    tableStyle: {
      type: [String, Array, Object],
      default: ''
    },
    tableClass: {
      type: [String, Array, Object],
      default: ''
    }
  },
  computed: {
    computedData: function computedData() {
      var rows = this.data.slice().map(function (row, i) {
        row.__index = i;
        return row;
      });

      if (rows.length === 0) {
        return {
          rowsNumber: 0,
          rows: []
        };
      }

      if (this.isServerSide) {
        return {
          rows: rows
        };
      }

      var _this$computedPaginat = this.computedPagination,
          sortBy = _this$computedPaginat.sortBy,
          descending = _this$computedPaginat.descending,
          rowsPerPage = _this$computedPaginat.rowsPerPage;

      if (this.filter) {
        rows = this.filterMethod(rows, this.filter, this.computedCols, this.getCellValue);
      }

      if (this.columnToSort) {
        rows = this.sortMethod(rows, sortBy, descending);
      }

      var rowsNumber = rows.length;

      if (rowsPerPage) {
        rows = rows.slice(this.firstRowIndex, this.lastRowIndex);
      }

      return {
        rowsNumber: rowsNumber,
        rows: rows
      };
    },
    computedRows: function computedRows() {
      return this.computedData.rows;
    },
    computedRowsNumber: function computedRowsNumber() {
      return this.isServerSide ? this.computedPagination.rowsNumber || 0 : this.computedData.rowsNumber;
    },
    nothingToDisplay: function nothingToDisplay() {
      return this.computedRows.length === 0;
    },
    isServerSide: function isServerSide() {
      return this.computedPagination.rowsNumber !== void 0;
    }
  },
  render: function render(h) {
    return h('div', {
      'class': {
        'q-table-grid': this.grid,
        'q-table-container': true,
        'q-table-dark': this.dark,
        'q-table-dense': this.dense,
        fullscreen: this.inFullscreen,
        scroll: this.inFullscreen
      }
    }, [this.getTop(h), this.getBody(h), this.getBottom(h)]);
  },
  methods: {
    requestServerInteraction: function requestServerInteraction(prop) {
      var _this = this;

      this.$nextTick(function () {
        _this.$emit('request', {
          pagination: prop.pagination || _this.computedPagination,
          filter: prop.filter || _this.filter,
          getCellValue: _this.getCellValue
        });
      });
    },
    getBody: function getBody(h) {
      var _this2 = this;

      var hasHeader = !this.hideHeader;

      if (this.grid) {
        var item = this.$scopedSlots.item;

        if (item !== void 0) {
          return [hasHeader && h('div', {
            staticClass: 'q-table-middle scroll'
          }, [h('table', {
            staticClass: "q-table".concat(this.dark ? ' q-table-dark' : '')
          }, [this.getTableHeader(h)])]) || null, h('div', {
            staticClass: 'row'
          }, this.computedRows.map(function (row) {
            var key = row[_this2.rowKey],
                selected = _this2.isRowSelected(key);

            return item(_this2.addBodyRowMeta({
              key: key,
              row: row,
              cols: _this2.computedCols,
              colsMap: _this2.computedColsMap,
              __trClass: selected ? 'selected' : ''
            }));
          }))];
        }
      }

      return h('div', {
        staticClass: 'q-table-middle scroll',
        'class': this.tableClass,
        style: this.tableStyle
      }, [h('table', {
        staticClass: "q-table q-table-".concat(this.separator, "-separator").concat(this.dark ? ' q-table-dark' : '')
      }, [hasHeader && this.getTableHeader(h) || null, this.getTableBody(h)])]);
    }
  }
});

/***/ }),

/***/ "c69a":
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__("9e1e") && !__webpack_require__("79e5")(function () {
  return Object.defineProperty(__webpack_require__("230e")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "c8af":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "ca5a":
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "cadf":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__("9c6c");
var step = __webpack_require__("d53b");
var Iterators = __webpack_require__("84f2");
var toIObject = __webpack_require__("6821");

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__("01f9")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "cb7c":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("d3f4");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "cd1c":
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__("e853");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),

/***/ "cd88":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b18c");
/* harmony import */ var _align_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("5958");


var marginal = {
  type: Array,
  validator: function validator(v) {
    return v.every(function (i) {
      return 'icon' in i;
    });
  }
};
/* harmony default export */ __webpack_exports__["a"] = ({
  mixins: [_align_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]],
  props: {
    prefix: String,
    suffix: String,
    stackLabel: String,
    floatLabel: String,
    placeholder: String,
    error: Boolean,
    warning: Boolean,
    disable: Boolean,
    readonly: Boolean,
    clearable: Boolean,
    color: {
      type: String,
      default: 'primary'
    },
    align: {
      default: 'left'
    },
    dark: Boolean,
    before: marginal,
    after: marginal,
    inverted: Boolean,
    invertedLight: Boolean,
    hideUnderline: Boolean,
    clearValue: {},
    noParentField: Boolean
  },
  computed: {
    inputPlaceholder: function inputPlaceholder() {
      if (!this.floatLabel && !this.stackLabel || this.labelIsAbove) {
        return this.placeholder;
      }
    },
    isInverted: function isInverted() {
      return this.inverted || this.invertedLight;
    },
    isInvertedLight: function isInvertedLight() {
      return this.isInverted && (this.invertedLight && !this.hasError || this.inverted && this.hasWarning);
    },
    isStandard: function isStandard() {
      return !this.isInverted;
    },
    isHideUnderline: function isHideUnderline() {
      return this.isStandard && this.hideUnderline;
    },
    labelIsAbove: function labelIsAbove() {
      return this.focused || this.length || this.additionalLength || this.stackLabel;
    },
    hasContent: function hasContent() {
      return this.length > 0 || this.additionalLength > 0 || this.placeholder || this.placeholder === 0;
    },
    editable: function editable() {
      return !this.disable && !this.readonly;
    },
    computedClearValue: function computedClearValue() {
      return this.clearValue === void 0 ? null : this.clearValue;
    },
    isClearable: function isClearable() {
      return this.editable && this.clearable && this.computedClearValue !== this.model;
    },
    hasError: function hasError() {
      return !!(!this.noParentField && this.field && this.field.error || this.error);
    },
    hasWarning: function hasWarning() {
      return !!(!this.hasError && (!this.noParentField && this.field && this.field.warning || this.warning));
    },
    fakeInputValue: function fakeInputValue() {
      return this.actualValue || this.actualValue === 0 ? this.actualValue : this.placeholder || this.placeholder === 0 ? this.placeholder : '';
    },
    fakeInputClasses: function fakeInputClasses() {
      var hasValue = this.actualValue || this.actualValue === 0;
      return [this.alignClass, {
        invisible: (this.stackLabel || this.floatLabel) && !this.labelIsAbove && !hasValue,
        'q-input-target-placeholder': !hasValue && this.inputPlaceholder
      }];
    }
  },
  methods: {
    clear: function clear(evt) {
      if (!this.editable) {
        return;
      }

      evt && Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_0__[/* stopAndPrevent */ "h"])(evt);
      var val = this.computedClearValue;

      if (this.__setModel) {
        this.__setModel(val, true);
      }

      this.$emit('clear', val);
    }
  }
});

/***/ }),

/***/ "ce10":
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__("69a8");
var toIObject = __webpack_require__("6821");
var arrayIndexOf = __webpack_require__("c366")(false);
var IE_PROTO = __webpack_require__("613b")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "ce67":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QToolbarTitle',
  props: {
    shrink: Boolean
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-toolbar-title',
      'class': this.shrink ? 'col-auto' : null
    }, [this.$slots.default, this.$slots.subtitle ? h('div', {
      staticClass: 'q-toolbar-subtitle'
    }, this.$slots.subtitle) : null]);
  }
});

/***/ }),

/***/ "cee4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");
var bind = __webpack_require__("1d2b");
var Axios = __webpack_require__("0a06");
var defaults = __webpack_require__("2444");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__("7a77");
axios.CancelToken = __webpack_require__("8df4");
axios.isCancel = __webpack_require__("2e67");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__("0df6");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),

/***/ "cf12":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_string_fixed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("d263");
/* harmony import */ var core_js_modules_es6_string_fixed__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_fixed__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("6762");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("2fdb");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _directives_touch_pan_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("f62b");
/* harmony import */ var _utils_format_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("177b");
/* harmony import */ var _mixins_model_toggle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("fb40");
/* harmony import */ var _utils_prevent_scroll_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("f59b");








var duration = 150;
/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QLayoutDrawer',
  inject: {
    layout: {
      default: function _default() {
        console.error('QLayoutDrawer needs to be child of QLayout');
      }
    }
  },
  mixins: [_mixins_model_toggle_js__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"]],
  directives: {
    TouchPan: _directives_touch_pan_js__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]
  },
  props: {
    overlay: Boolean,
    side: {
      type: String,
      default: 'left',
      validator: function validator(v) {
        return ['left', 'right'].includes(v);
      }
    },
    width: {
      type: Number,
      default:  true ? 300 : undefined
    },
    mini: Boolean,
    miniWidth: {
      type: Number,
      default: 60
    },
    breakpoint: {
      type: Number,
      default: 992
    },
    behavior: {
      type: String,
      validator: function validator(v) {
        return ['default', 'desktop', 'mobile'].includes(v);
      },
      default: 'default'
    },
    showIfAbove: Boolean,
    contentStyle: Object,
    contentClass: [String, Object, Array],
    noHideOnRouteChange: Boolean,
    noSwipeOpen: Boolean,
    noSwipeClose: Boolean
  },
  data: function data() {
    var largeScreenState = this.showIfAbove || (this.value !== void 0 ? this.value : true),
        showing = this.behavior !== 'mobile' && this.breakpoint < this.layout.width && !this.overlay ? largeScreenState : false;

    if (this.value !== void 0 && this.value !== showing) {
      this.$emit('input', showing);
    }

    return {
      showing: showing,
      belowBreakpoint: this.behavior === 'mobile' || this.behavior !== 'desktop' && this.breakpoint >= this.layout.width,
      largeScreenState: largeScreenState,
      mobileOpened: false
    };
  },
  watch: {
    belowBreakpoint: function belowBreakpoint(val) {
      if (this.mobileOpened) {
        return;
      }

      if (val) {
        if (!this.overlay) {
          this.largeScreenState = this.showing;
        }

        this.hide(false);
      } else if (!this.overlay) {
        this[this.largeScreenState ? 'show' : 'hide'](false);
      }
    },
    side: function side(_, oldSide) {
      this.layout[oldSide].space = false;
      this.layout[oldSide].offset = 0;
    },
    behavior: function behavior(val) {
      this.__updateLocal('belowBreakpoint', val === 'mobile' || val !== 'desktop' && this.breakpoint >= this.layout.width);
    },
    breakpoint: function breakpoint(val) {
      this.__updateLocal('belowBreakpoint', this.behavior === 'mobile' || this.behavior !== 'desktop' && val >= this.layout.width);
    },
    'layout.width': function layoutWidth(val) {
      this.__updateLocal('belowBreakpoint', this.behavior === 'mobile' || this.behavior !== 'desktop' && this.breakpoint >= val);
    },
    'layout.scrollbarWidth': function layoutScrollbarWidth() {
      this.applyPosition(this.showing ? 0 : void 0);
    },
    offset: function offset(val) {
      this.__update('offset', val);
    },
    onLayout: function onLayout(val) {
      this.$emit('on-layout', val);

      this.__update('space', val);
    },
    $route: function $route() {
      if (this.noHideOnRouteChange) {
        return;
      }

      if (this.mobileOpened || this.onScreenOverlay) {
        this.hide();
      }
    },
    rightSide: function rightSide() {
      this.applyPosition();
    },
    size: function size(val) {
      this.applyPosition();

      this.__update('size', val);
    },
    '$q.i18n.rtl': function $qI18nRtl() {
      this.applyPosition();
    },
    mini: function mini() {
      if (this.value) {
        this.layout.__animate();
      }
    }
  },
  computed: {
    rightSide: function rightSide() {
      return this.side === 'right';
    },
    offset: function offset() {
      return this.showing && !this.mobileOpened && !this.overlay ? this.size : 0;
    },
    size: function size() {
      return this.isMini ? this.miniWidth : this.width;
    },
    fixed: function fixed() {
      return this.overlay || this.layout.view.indexOf(this.rightSide ? 'R' : 'L') > -1;
    },
    onLayout: function onLayout() {
      return this.showing && !this.mobileView && !this.overlay;
    },
    onScreenOverlay: function onScreenOverlay() {
      return this.showing && !this.mobileView && this.overlay;
    },
    backdropClass: function backdropClass() {
      return {
        'no-pointer-events': !this.showing || !this.mobileView
      };
    },
    mobileView: function mobileView() {
      return this.belowBreakpoint || this.mobileOpened;
    },
    headerSlot: function headerSlot() {
      return this.overlay ? false : this.rightSide ? this.layout.rows.top[2] === 'r' : this.layout.rows.top[0] === 'l';
    },
    footerSlot: function footerSlot() {
      return this.overlay ? false : this.rightSide ? this.layout.rows.bottom[2] === 'r' : this.layout.rows.bottom[0] === 'l';
    },
    belowClass: function belowClass() {
      return {
        'fixed': true,
        'on-top': true,
        'q-layout-drawer-delimiter': this.fixed && this.showing,
        'q-layout-drawer-mobile': true,
        'top-padding': true
      };
    },
    aboveClass: function aboveClass() {
      return {
        'fixed': this.fixed || !this.onLayout,
        'q-layout-drawer-mini': this.isMini,
        'q-layout-drawer-normal': !this.isMini,
        'q-layout-drawer-delimiter': this.fixed && this.showing,
        'top-padding': this.headerSlot
      };
    },
    aboveStyle: function aboveStyle() {
      var css = {};

      if (this.layout.header.space && !this.headerSlot) {
        if (this.fixed) {
          css.top = "".concat(this.layout.header.offset, "px");
        } else if (this.layout.header.space) {
          css.top = "".concat(this.layout.header.size, "px");
        }
      }

      if (this.layout.footer.space && !this.footerSlot) {
        if (this.fixed) {
          css.bottom = "".concat(this.layout.footer.offset, "px");
        } else if (this.layout.footer.space) {
          css.bottom = "".concat(this.layout.footer.size, "px");
        }
      }

      return css;
    },
    computedStyle: function computedStyle() {
      return [this.contentStyle, {
        width: "".concat(this.size, "px")
      }, this.mobileView ? '' : this.aboveStyle];
    },
    computedClass: function computedClass() {
      return ["q-layout-drawer-".concat(this.side), this.layout.container ? 'overflow-auto' : 'scroll', this.contentClass, this.mobileView ? this.belowClass : this.aboveClass];
    },
    stateDirection: function stateDirection() {
      return (this.$q.i18n.rtl ? -1 : 1) * (this.rightSide ? 1 : -1);
    },
    isMini: function isMini() {
      return this.mini && !this.mobileView;
    },
    onNativeEvents: function onNativeEvents() {
      var _this = this;

      if (!this.mobileView) {
        return {
          '!click': function click(e) {
            _this.$emit('click', e);
          },
          mouseover: function mouseover(e) {
            _this.$emit('mouseover', e);
          },
          mouseout: function mouseout(e) {
            _this.$emit('mouseout', e);
          }
        };
      }
    }
  },
  methods: {
    applyPosition: function applyPosition(position) {
      var _this2 = this;

      if (position === void 0) {
        this.$nextTick(function () {
          position = _this2.showing ? 0 : _this2.size;

          _this2.applyPosition(_this2.stateDirection * position);
        });
      } else if (this.$refs.content) {
        if (this.layout.container && this.rightSide && (this.mobileView || Math.abs(position) === this.size)) {
          position += this.stateDirection * this.layout.scrollbarWidth;
        }

        this.$refs.content.style.transform = "translateX(".concat(position, "px)");
      }
    },
    applyBackdrop: function applyBackdrop(x) {
      if (this.$refs.backdrop) {
        this.$refs.backdrop.style.backgroundColor = "rgba(0,0,0,".concat(x * 0.4, ")");
      }
    },
    __setScrollable: function __setScrollable(v) {
      if (!this.layout.container) {
        document.body.classList[v ? 'add' : 'remove']('q-body-drawer-toggle');
      }
    },
    __openByTouch: function __openByTouch(evt) {
      if (!this.belowBreakpoint) {
        return;
      }

      var width = this.size,
          position = Object(_utils_format_js__WEBPACK_IMPORTED_MODULE_5__[/* between */ "a"])(evt.distance.x, 0, width);

      if (evt.isFinal) {
        var el = this.$refs.content,
            opened = position >= Math.min(75, width);
        el.classList.remove('no-transition');

        if (opened) {
          this.show();
        } else {
          this.layout.__animate();

          this.applyBackdrop(0);
          this.applyPosition(this.stateDirection * width);
          el.classList.remove('q-layout-drawer-delimiter');
        }

        return;
      }

      this.applyPosition((this.$q.i18n.rtl ? !this.rightSide : this.rightSide) ? Math.max(width - position, 0) : Math.min(0, position - width));
      this.applyBackdrop(Object(_utils_format_js__WEBPACK_IMPORTED_MODULE_5__[/* between */ "a"])(position / width, 0, 1));

      if (evt.isFirst) {
        var _el = this.$refs.content;

        _el.classList.add('no-transition');

        _el.classList.add('q-layout-drawer-delimiter');
      }
    },
    __closeByTouch: function __closeByTouch(evt) {
      if (!this.mobileOpened) {
        return;
      }

      var width = this.size,
          dir = evt.direction === this.side,
          position = (this.$q.i18n.rtl ? !dir : dir) ? Object(_utils_format_js__WEBPACK_IMPORTED_MODULE_5__[/* between */ "a"])(evt.distance.x, 0, width) : 0;

      if (evt.isFinal) {
        var opened = Math.abs(position) < Math.min(75, width);
        this.$refs.content.classList.remove('no-transition');

        if (opened) {
          this.layout.__animate();

          this.applyBackdrop(1);
          this.applyPosition(0);
        } else {
          this.hide();
        }

        return;
      }

      this.applyPosition(this.stateDirection * position);
      this.applyBackdrop(Object(_utils_format_js__WEBPACK_IMPORTED_MODULE_5__[/* between */ "a"])(1 - position / width, 0, 1));

      if (evt.isFirst) {
        this.$refs.content.classList.add('no-transition');
      }
    },
    __show: function __show() {
      var _this3 = this;

      var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      animate && this.layout.__animate();
      this.applyPosition(0);
      var otherSide = this.layout.instances[this.rightSide ? 'left' : 'right'];

      if (otherSide && otherSide.mobileOpened) {
        otherSide.hide();
      }

      if (this.belowBreakpoint) {
        this.mobileOpened = true;
        this.applyBackdrop(1);

        if (!this.layout.container) {
          this.preventedScroll = true;
          Object(_utils_prevent_scroll_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"])(true);
        }
      } else {
        this.__setScrollable(true);
      }

      clearTimeout(this.timer);
      this.timer = setTimeout(function () {
        if (_this3.showPromise) {
          _this3.showPromise.then(function () {
            _this3.__setScrollable(false);
          });

          _this3.showPromiseResolve();
        }
      }, duration);
    },
    __hide: function __hide() {
      var _this4 = this;

      var animate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      animate && this.layout.__animate();

      if (this.mobileOpened) {
        this.mobileOpened = false;
      }

      this.applyPosition(this.stateDirection * this.size);
      this.applyBackdrop(0);

      this.__cleanup();

      clearTimeout(this.timer);
      this.timer = setTimeout(function () {
        _this4.hidePromise && _this4.hidePromiseResolve();
      }, duration);
    },
    __cleanup: function __cleanup() {
      if (this.preventedScroll) {
        this.preventedScroll = false;
        Object(_utils_prevent_scroll_js__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"])(false);
      }

      this.__setScrollable(false);
    },
    __update: function __update(prop, val) {
      if (this.layout[this.side][prop] !== val) {
        this.layout[this.side][prop] = val;
      }
    },
    __updateLocal: function __updateLocal(prop, val) {
      if (this[prop] !== val) {
        this[prop] = val;
      }
    }
  },
  created: function created() {
    this.layout.instances[this.side] = this;

    this.__update('size', this.size);

    this.__update('space', this.onLayout);

    this.__update('offset', this.offset);
  },
  mounted: function mounted() {
    this.applyPosition(this.showing ? 0 : void 0);
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.timer);
    this.showing && this.__cleanup();

    if (this.layout.instances[this.side] === this) {
      this.layout.instances[this.side] = null;

      this.__update('size', 0);

      this.__update('offset', 0);

      this.__update('space', false);
    }
  },
  render: function render(h) {
    var child = [this.mobileView && !this.noSwipeOpen ? h('div', {
      staticClass: "q-layout-drawer-opener fixed-".concat(this.side),
      directives: [{
        name: 'touch-pan',
        modifiers: {
          horizontal: true
        },
        value: this.__openByTouch
      }]
    }) : null, h('div', {
      ref: 'backdrop',
      staticClass: 'fullscreen q-layout-backdrop q-layout-transition',
      'class': this.backdropClass,
      on: {
        click: this.hide
      },
      directives: [{
        name: 'touch-pan',
        modifiers: {
          horizontal: true
        },
        value: this.__closeByTouch
      }]
    })];
    return h('div', {
      staticClass: 'q-drawer-container'
    }, child.concat([h('aside', {
      ref: 'content',
      staticClass: "q-layout-drawer q-layout-transition",
      'class': this.computedClass,
      style: this.computedStyle,
      attrs: this.$attrs,
      on: this.onNativeEvents,
      directives: this.mobileView && !this.noSwipeClose ? [{
        name: 'touch-pan',
        modifiers: {
          horizontal: true
        },
        value: this.__closeByTouch
      }] : null
    }, this.isMini && this.$slots.mini ? [this.$slots.mini] : this.$slots.default)]));
  }
});

/***/ }),

/***/ "d14b":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("4679");
if(typeof content === 'string') content = [[module.i, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var add = __webpack_require__("499e").default
var update = add("0c2692e9", content, false, {"sourceMap":true});
// Hot Module Replacement
if(false) {}

/***/ }),

/***/ "d263":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__("386b")('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),

/***/ "d2c8":
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__("aae3");
var defined = __webpack_require__("be13");

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),

/***/ "d3e7":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_format_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("177b");



function width(val) {
  return {
    width: "".concat(val, "%")
  };
}

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QProgress',
  props: {
    percentage: {
      type: Number,
      default: 0
    },
    color: {
      type: String,
      default: 'primary'
    },
    stripe: Boolean,
    animate: Boolean,
    indeterminate: Boolean,
    buffer: Number,
    height: {
      type: String,
      default: '4px'
    }
  },
  computed: {
    model: function model() {
      return Object(_utils_format_js__WEBPACK_IMPORTED_MODULE_1__[/* between */ "a"])(this.percentage, 0, 100);
    },
    bufferModel: function bufferModel() {
      return Object(_utils_format_js__WEBPACK_IMPORTED_MODULE_1__[/* between */ "a"])(this.buffer || 0, 0, 100 - this.model);
    },
    bufferStyle: function bufferStyle() {
      return width(this.bufferModel);
    },
    trackStyle: function trackStyle() {
      return width(this.buffer ? 100 - this.buffer : 100);
    },
    computedClass: function computedClass() {
      return "text-".concat(this.color);
    },
    computedStyle: function computedStyle() {
      return {
        height: this.height
      };
    },
    modelClass: function modelClass() {
      return {
        animate: this.animate,
        stripe: this.stripe,
        indeterminate: this.indeterminate
      };
    },
    modelStyle: function modelStyle() {
      return width(this.model);
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-progress',
      style: this.computedStyle,
      'class': this.computedClass
    }, [this.buffer && !this.indeterminate ? h('div', {
      staticClass: 'q-progress-buffer',
      style: this.bufferStyle
    }) : null, h('div', {
      staticClass: 'q-progress-track',
      style: this.trackStyle
    }), h('div', {
      staticClass: 'q-progress-model',
      style: this.modelStyle,
      'class': this.modelClass
    })]);
  }
});

/***/ }),

/***/ "d3f4":
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "d53b":
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),

/***/ "d7db":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_number_is_integer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("7cdf");
/* harmony import */ var core_js_modules_es6_number_is_integer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_is_integer__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_1__);


/* harmony default export */ __webpack_exports__["a"] = ({
  props: {
    autofocus: [Boolean, String],
    maxHeight: Number,
    loading: Boolean
  },
  data: function data() {
    return {
      focused: false,
      timer: null,
      isNumberError: false,
      isNegZero: false
    };
  },
  methods: {
    focus: function focus() {
      if (!this.disable) {
        this.$refs.input.focus();
      }
    },
    blur: function blur() {
      this.$refs.input && this.$refs.input.blur();
    },
    select: function select() {
      this.$refs.input.select();
    },
    __onFocus: function __onFocus(e) {
      clearTimeout(this.timer);

      if (this.focused) {
        return;
      }

      this.focused = true;
      this.$refs.input && this.$refs.input.focus();
      this.$emit('focus', e);
    },
    __onInputBlur: function __onInputBlur(e) {
      var _this = this;

      clearTimeout(this.timer);
      this.timer = setTimeout(function () {
        _this.__onBlur(e);
      }, 200);
    },
    __onBlur: function __onBlur(e, destroy) {
      if (this.focused) {
        this.focused = false;
        this.$emit('blur', e);
      }

      this.__emit(destroy);
    },
    __emit: function __emit(destroy) {
      var _this2 = this;

      var isNumberError = this.isNumber && this.isNumberError;
      var value = isNumberError ? this.isNegZero ? -0 : null : this.model;

      if (this.isNumber) {
        this.model = this.value;
      }

      if (isNumberError) {
        this.$emit('input', value);
      }

      var emit = function emit() {
        if (_this2.isNumber) {
          value = parseFloat(value);

          if (Number.isInteger(_this2.decimals)) {
            value = parseFloat(value.toFixed(_this2.decimals));
          }

          if (String(1 / value) !== String(1 / _this2.value)) {
            _this2.$emit('change', value);
          }
        } else if (JSON.stringify(value) !== JSON.stringify(_this2.value)) {
          _this2.$emit('change', value);
        }
      };

      destroy ? emit() : this.$nextTick(emit);
    },
    __onKeydown: function __onKeydown(e) {
      if (e.keyCode === 13) {
        if (this.type === 'textarea') {
          e.stopPropagation();
        } else {
          this.__emit();
        }
      }

      this.$emit('keydown', e);
    },
    __onKeyup: function __onKeyup(e) {
      this.$emit('keyup', e);
    },
    __onClick: function __onClick(e) {
      this.focus();
      this.$emit('click', e);
    },
    __onPaste: function __onPaste(e) {
      this.$emit('paste', e);
    }
  },
  mounted: function mounted() {
    var _this3 = this;

    this.$nextTick(function () {
      var input = _this3.$refs.input;

      if (_this3.autofocus && input) {
        input.focus();

        if (_this3.autofocus === 'select') {
          input.select();
        }
      }
    });
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.timer);
    this.focused && this.__onBlur(void 0, true);
  }
});

/***/ }),

/***/ "d8e8":
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "d925":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "dcbc":
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__("2aba");
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),

/***/ "dd1f":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _mixins_option_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("2828");
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("52b5");
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("b18c");



/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QRadio',
  mixins: [_mixins_option_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]],
  props: {
    val: {
      required: true
    }
  },
  computed: {
    isTrue: function isTrue() {
      return this.value === this.val;
    }
  },
  methods: {
    toggle: function toggle(evt) {
      var blur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (this.disable || this.readonly) {
        return;
      }

      evt && Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_2__[/* stopAndPrevent */ "h"])(evt);
      blur && this.$el.blur();

      if (!this.isTrue) {
        this.__update(this.val);
      }
    },
    __getContent: function __getContent(h) {
      return [h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"], {
        staticClass: 'q-radio-unchecked cursor-pointer absolute-full',
        props: {
          name: this.uncheckedIcon || this.$q.icon.radio.unchecked["mat"]
        }
      }), h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"], {
        staticClass: 'q-radio-checked cursor-pointer absolute-full',
        props: {
          name: this.checkedIcon || this.$q.icon.radio.checked["mat"]
        }
      }),  true ? h('div', {
        ref: 'ripple',
        staticClass: 'q-radial-ripple'
      }) : undefined];
    }
  },
  beforeCreate: function beforeCreate() {
    this.__kebabTag = 'q-radio';
  }
});

/***/ }),

/***/ "df7c":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("4362")))

/***/ }),

/***/ "e11e":
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),

/***/ "e660":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
  inject: {
    field: {
      from: '__field',
      default: null
    }
  },
  props: {
    noParentField: Boolean
  },
  watch: {
    noParentField: function noParentField(val) {
      if (!this.field) {
        return;
      }

      this.field[val ? '__registerInput' : '__unregisterInput'](this);
    }
  },
  beforeMount: function beforeMount() {
    if (!this.noParentField && this.field) {
      this.field.__registerInput(this);
    }
  },
  beforeDestroy: function beforeDestroy() {
    if (!this.noParentField && this.field) {
      this.field.__unregisterInput(this);
    }
  }
});

/***/ }),

/***/ "e683":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "e84f":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.function.name.js
var es6_function_name = __webpack_require__("7f7f");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.keys.js
var es6_object_keys = __webpack_require__("456d");

// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js
var web_dom_iterable = __webpack_require__("ac6a");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find.js
var es6_array_find = __webpack_require__("7514");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.to-string.js
var es6_regexp_to_string = __webpack_require__("6b54");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.ends-with.js
var es6_string_ends_with = __webpack_require__("aef6");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.starts-with.js
var es6_string_starts_with = __webpack_require__("f559");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js
var es7_array_includes = __webpack_require__("6762");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.includes.js
var es6_string_includes = __webpack_require__("2fdb");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.number.constructor.js
var es6_number_constructor = __webpack_require__("c5f6");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.number.is-integer.js
var es6_number_is_integer = __webpack_require__("7cdf");

// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.assign.js
var es6_object_assign = __webpack_require__("f751");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/plugins/platform.js
var platform = __webpack_require__("a60d");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/polyfills.js













function polyfills_assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);

  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];

    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));

    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }

  return to;
}

if (!Object.assign) {
  Object.defineProperty(Object, 'assign', {
    enumerable: false,
    configurable: true,
    writable: true,
    value: polyfills_assign
  });
}

if (!Number.isInteger) {
  Number.isInteger = function (value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
  };
}

if (!Array.prototype.includes) {
  Array.prototype.includes = function (searchEl, startFrom) {
    'use strict';

    var O = Object(this);
    var len = parseInt(O.length, 10) || 0;

    if (len === 0) {
      return false;
    }

    var n = parseInt(startFrom, 10) || 0;
    var k;

    if (n >= 0) {
      k = n;
    } else {
      k = len + n;

      if (k < 0) {
        k = 0;
      }
    }

    var curEl;

    while (k < len) {
      curEl = O[k];

      if (searchEl === curEl || searchEl !== searchEl && curEl !== curEl) {
        return true;
      }

      k++;
    }

    return false;
  };
}

if (!String.prototype.startsWith) {
  String.prototype.startsWith = function (str, position) {
    position = position || 0;
    return this.substr(position, str.length) === str;
  };
}

if (!String.prototype.endsWith) {
  String.prototype.endsWith = function (str, position) {
    var subjectString = this.toString();

    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
      position = subjectString.length;
    }

    position -= str.length;
    var lastIndex = subjectString.indexOf(str, position);
    return lastIndex !== -1 && lastIndex === position;
  };
}

if (!platform["d" /* isSSR */]) {
  if (typeof Element.prototype.matches !== 'function') {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.webkitMatchesSelector || function matches(selector) {
      var element = this,
          elements = (element.document || element.ownerDocument).querySelectorAll(selector),
          index = 0;

      while (elements[index] && elements[index] !== element) {
        ++index;
      }

      return Boolean(elements[index]);
    };
  }

  if (typeof Element.prototype.closest !== 'function') {
    Element.prototype.closest = function closest(selector) {
      var el = this;

      while (el && el.nodeType === 1) {
        if (el.matches(selector)) {
          return el;
        }

        el = el.parentNode;
      }

      return null;
    };
  }

  (function (arr) {
    arr.forEach(function (item) {
      if (item.hasOwnProperty('remove')) {
        return;
      }

      Object.defineProperty(item, 'remove', {
        configurable: true,
        enumerable: true,
        writable: true,
        value: function value() {
          if (this.parentNode !== null) {
            this.parentNode.removeChild(this);
          }
        }
      });
    });
  })([Element.prototype, CharacterData.prototype, DocumentType.prototype]);
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function value(predicate) {
      'use strict';

      if (this == null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      }

      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }

      var value;
      var list = Object(this),
          length = list.length >>> 0,
          thisArg = arguments[1];

      for (var i = 0; i < length; i++) {
        value = list[i];

        if (predicate.call(thisArg, value, i, list)) {
          return value;
        }
      }

      return undefined;
    }
  });
}
// EXTERNAL MODULE: ./node_modules/quasar-framework/package.json
var quasar_framework_package = __webpack_require__("19aa");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/history.js
var src_history = __webpack_require__("be90");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/i18n.js + 1 modules
var i18n = __webpack_require__("b157");

// EXTERNAL MODULE: ./node_modules/quasar-framework/src/utils/colors.js
var colors = __webpack_require__("fb82");

// CONCATENATED MODULE: ./node_modules/quasar-framework/src/body.js




function getBodyClasses(_ref, cfg) {
  var is = _ref.is,
      has = _ref.has,
      within = _ref.within;
  var cls = ["mat", is.desktop ? 'desktop' : 'mobile', has.touch ? 'touch' : 'no-touch', "platform-".concat(is.ios ? 'ios' : 'mat')];

  if (is.cordova) {
    cls.push('cordova');

    if (is.ios && (cfg.cordova === void 0 || cfg.cordova.iosStatusBarPadding !== false)) {
      var ratio = window.devicePixelRatio || 1,
          width = window.screen.width * ratio,
          height = window.screen.height * ratio;

      if (width === 1125 && height === 2436) {
        cls.push('q-ios-statusbar-x');
      }

      if (width !== 1125 || height !== 2001) {
        cls.push('q-ios-statusbar-padding');
      }
    }
  }

  within.iframe && cls.push('within-iframe');
  is.electron && cls.push('electron');
  return cls;
}

function bodyInit(Platform, cfg) {
  var cls = getBodyClasses(Platform, cfg);

  if (Platform.is.ie && Platform.is.versionNumber === 11) {
    cls.forEach(function (c) {
      return document.body.classList.add(c);
    });
  } else {
    document.body.classList.add.apply(document.body.classList, cls);
  }

  if (Platform.is.ios) {
    document.body.addEventListener('touchstart', function () {});
  }
}

function setColors(brand) {
  for (var color in brand) {
    Object(colors["g" /* setBrand */])(color, brand[color]);
  }
}

/* harmony default export */ var body = ({
  install: function install($q, queues, cfg) {
    if (platform["d" /* isSSR */]) {
      queues.server.push(function (q, ctx) {
        var cls = getBodyClasses(q.platform, cfg),
            fn = ctx.ssr.setBodyClasses;

        if (typeof fn === 'function') {
          fn(cls);
        } else {
          ctx.ssr.Q_BODY_CLASSES = cls.join(' ');
        }
      });
      return;
    }

    cfg.brand && setColors(cfg.brand);
    bodyInit($q.platform, cfg);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/icons/material-icons.js
/* harmony default export */ var material_icons = ({
  name: 'material-icons',
  type: {
    positive: 'check_circle',
    negative: 'warning',
    info: 'info',
    warning: 'priority_high'
  },
  arrow: {
    up: 'arrow_upward',
    right: 'arrow_forward',
    down: 'arrow_downward',
    left: 'arrow_back'
  },
  chevron: {
    left: 'chevron_left',
    right: 'chevron_right'
  },
  pullToRefresh: {
    arrow: 'arrow_downward',
    refresh: 'refresh'
  },
  search: {
    icon: 'search',
    clear: 'cancel',
    clearInverted: 'clear'
  },
  carousel: {
    left: 'chevron_left',
    right: 'chevron_right',
    quickNav: 'lens',
    thumbnails: 'view_carousel'
  },
  checkbox: {
    checked: {
      ios: 'check_circle',
      mat: 'check_box'
    },
    unchecked: {
      ios: 'radio_button_unchecked',
      mat: 'check_box_outline_blank'
    },
    indeterminate: {
      ios: 'remove_circle_outline',
      mat: 'indeterminate_check_box'
    }
  },
  chip: {
    close: 'cancel'
  },
  chipsInput: {
    add: 'send'
  },
  collapsible: {
    icon: 'arrow_drop_down'
  },
  datetime: {
    arrowLeft: 'chevron_left',
    arrowRight: 'chevron_right'
  },
  editor: {
    bold: 'format_bold',
    italic: 'format_italic',
    strikethrough: 'strikethrough_s',
    underline: 'format_underlined',
    unorderedList: 'format_list_bulleted',
    orderedList: 'format_list_numbered',
    subscript: 'vertical_align_bottom',
    superscript: 'vertical_align_top',
    hyperlink: 'link',
    toggleFullscreen: 'fullscreen',
    quote: 'format_quote',
    left: 'format_align_left',
    center: 'format_align_center',
    right: 'format_align_right',
    justify: 'format_align_justify',
    print: 'print',
    outdent: 'format_indent_decrease',
    indent: 'format_indent_increase',
    removeFormat: 'format_clear',
    formatting: 'text_format',
    fontSize: 'format_size',
    align: 'format_align_left',
    hr: 'remove',
    undo: 'undo',
    redo: 'redo',
    header: 'format_size',
    code: 'code',
    size: 'format_size',
    font: 'font_download'
  },
  fab: {
    icon: 'add',
    activeIcon: 'close'
  },
  input: {
    showPass: 'visibility',
    hidePass: 'visibility_off',
    showNumber: 'keyboard',
    hideNumber: 'keyboard_hide',
    clear: 'cancel',
    clearInverted: 'clear',
    dropdown: 'arrow_drop_down'
  },
  pagination: {
    first: 'first_page',
    prev: 'keyboard_arrow_left',
    next: 'keyboard_arrow_right',
    last: 'last_page'
  },
  radio: {
    checked: {
      ios: 'check',
      mat: 'radio_button_checked'
    },
    unchecked: {
      ios: '',
      mat: 'radio_button_unchecked'
    }
  },
  rating: {
    icon: 'grade'
  },
  stepper: {
    done: 'check',
    active: 'edit',
    error: 'warning'
  },
  tabs: {
    left: 'chevron_left',
    right: 'chevron_right'
  },
  table: {
    arrowUp: 'arrow_upward',
    warning: 'warning',
    prevPage: 'chevron_left',
    nextPage: 'chevron_right'
  },
  tree: {
    icon: 'play_arrow'
  },
  uploader: {
    done: 'done',
    clear: 'cancel',
    clearInverted: 'clear',
    add: 'add',
    upload: 'cloud_upload',
    expand: 'keyboard_arrow_down',
    file: 'insert_drive_file'
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/icons.js



/* harmony default export */ var icons = ({
  __installed: false,
  install: function install($q, Vue, iconSet) {
    var _this = this;

    this.set = function () {
      var iconDef = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : material_icons;
      iconDef.set = _this.set;

      if (platform["d" /* isSSR */] || $q.icon) {
        $q.icon = iconDef;
      } else {
        Vue.util.defineReactive($q, 'icon', iconDef);
      }

      _this.name = iconDef.name;
      _this.def = iconDef;
    };

    this.set(iconSet);
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/install.js










var install_queues = {
  server: [],
  takeover: []
};
var install_$q = {
  version: quasar_framework_package["a" /* version */],
  theme: "mat"
};
/* harmony default export */ var src_install = (function (Vue) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (this.__installed) {
    return;
  }

  this.__installed = true;
  var cfg = opts.config || {};
  platform["a" /* default */].install(install_$q, install_queues, Vue);
  body.install(install_$q, install_queues, cfg);
  src_history["a" /* default */].install(install_$q, cfg);
  i18n["a" /* default */].install(install_$q, install_queues, Vue, opts.i18n);
  icons.install(install_$q, Vue, opts.iconSet);

  if (platform["d" /* isSSR */]) {
    Vue.mixin({
      beforeCreate: function beforeCreate() {
        this.$q = this.$root.$options.$q;
      }
    });
  } else {
    Vue.prototype.$q = install_$q;
  }

  opts.components && Object.keys(opts.components).forEach(function (key) {
    var c = opts.components[key];

    if (c.name !== undefined && (c.render !== void 0 || c.mixins !== void 0)) {
      Vue.component(c.name, c);
    }
  });
  opts.directives && Object.keys(opts.directives).forEach(function (key) {
    var d = opts.directives[key];

    if (d.name !== undefined && d.unbind !== void 0) {
      Vue.directive(d.name, d);
    }
  });

  if (opts.plugins) {
    var param = {
      $q: install_$q,
      queues: install_queues,
      Vue: Vue,
      cfg: cfg
    };
    Object.keys(opts.plugins).forEach(function (key) {
      var p = opts.plugins[key];

      if (typeof p.install === 'function' && p !== platform["a" /* default */]) {
        p.install(param);
      }
    });
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/ssr-update.js





var mixin = {
  mounted: function mounted() {
    var _this = this;

    install_queues.takeover.forEach(function (run) {
      run(_this.$q);
    });
  }
};
/* harmony default export */ var ssr_update = (function (ctx) {
  if (ctx.ssr) {
    var q = Object.assign({}, install_$q);
    Object.assign(ctx.ssr, {
      Q_HEAD_TAGS: '',
      Q_BODY_ATTRS: '',
      Q_BODY_TAGS: ''
    });
    install_queues.server.forEach(function (run) {
      run(q, ctx);
    });
    ctx.app.$q = q;
  } else {
    var mixins = ctx.app.mixins || [];

    if (!mixins.includes(mixin)) {
      ctx.app.mixins = mixins.concat(mixin);
    }
  }
});
// CONCATENATED MODULE: ./node_modules/quasar-framework/src/vue-plugin.js





var theme = "mat";
/* harmony default export */ var vue_plugin = __webpack_exports__["a"] = ({
  version: quasar_framework_package["a" /* version */],
  install: src_install,
  i18n: i18n["a" /* default */],
  icons: icons,
  theme: theme,
  ssrUpdate: ssr_update
});

/***/ }),

/***/ "e853":
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__("d3f4");
var isArray = __webpack_require__("1169");
var SPECIES = __webpack_require__("2b4c")('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "ea22":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export getAnchorPosition */
/* unused harmony export getTargetPosition */
/* unused harmony export repositionIfNeeded */
/* unused harmony export parseHorizTransformOrigin */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return setPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return positionValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return offsetValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return parsePosition; });
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6762");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("2fdb");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("28a5");
/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("b18c");
/* harmony import */ var _scroll_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("1528");





function getAnchorPosition(el, offset) {
  var _el$getBoundingClient = el.getBoundingClientRect(),
      top = _el$getBoundingClient.top,
      left = _el$getBoundingClient.left,
      right = _el$getBoundingClient.right,
      bottom = _el$getBoundingClient.bottom,
      a = {
    top: top,
    left: left,
    width: el.offsetWidth,
    height: el.offsetHeight
  };

  if (offset) {
    a.top -= offset[1];
    a.left -= offset[0];

    if (bottom) {
      bottom += offset[1];
    }

    if (right) {
      right += offset[0];
    }

    a.width += offset[0];
    a.height += offset[1];
  }

  a.right = right || a.left + a.width;
  a.bottom = bottom || a.top + a.height;
  a.middle = a.left + (a.right - a.left) / 2;
  a.center = a.top + (a.bottom - a.top) / 2;
  return a;
}
function getTargetPosition(el) {
  return {
    top: 0,
    center: el.offsetHeight / 2,
    bottom: el.offsetHeight,
    left: 0,
    middle: el.offsetWidth / 2,
    right: el.offsetWidth
  };
}
function repositionIfNeeded(anchor, target, selfOrigin, anchorOrigin, targetPosition, cover) {
  var margin = Object(_scroll_js__WEBPACK_IMPORTED_MODULE_4__[/* getScrollbarWidth */ "e"])();
  var _window = window,
      innerHeight = _window.innerHeight,
      innerWidth = _window.innerWidth;
  innerHeight -= margin;
  innerWidth -= margin;

  if (targetPosition.top < 0 || targetPosition.top + target.bottom > innerHeight) {
    if (selfOrigin.vertical === 'center') {
      targetPosition.top = anchor[selfOrigin.vertical] > innerHeight / 2 ? innerHeight - target.bottom : 0;
      targetPosition.maxHeight = Math.min(target.bottom, innerHeight);
    } else if (anchor[selfOrigin.vertical] > innerHeight / 2) {
      var anchorY = Math.min(innerHeight, anchorOrigin.vertical === 'center' ? anchor.center : anchorOrigin.vertical === selfOrigin.vertical ? anchor.bottom : anchor.top);
      targetPosition.maxHeight = Math.min(target.bottom, anchorY);
      targetPosition.top = Math.max(0, anchorY - targetPosition.maxHeight);
    } else {
      targetPosition.top = anchorOrigin.vertical === 'center' ? anchor.center : anchorOrigin.vertical === selfOrigin.vertical ? anchor.top : anchor.bottom;
      targetPosition.maxHeight = Math.min(target.bottom, innerHeight - targetPosition.top);
    }
  }

  if (targetPosition.left < 0 || targetPosition.left + target.right > innerWidth) {
    targetPosition.maxWidth = Math.min(target.right, innerWidth);

    if (selfOrigin.horizontal === 'middle') {
      targetPosition.left = anchor[selfOrigin.horizontal] > innerWidth / 2 ? innerWidth - target.right : 0;
    } else if (cover) {
      targetPosition.left = targetPosition.left < 0 ? 0 : innerWidth - target.right;
    } else if (anchor[selfOrigin.horizontal] > innerWidth / 2) {
      var _anchorY = Math.min(innerWidth, anchorOrigin.horizontal === 'middle' ? anchor.center : anchorOrigin.horizontal === selfOrigin.horizontal ? anchor.right : anchor.left);

      targetPosition.maxWidth = Math.min(target.right, _anchorY);
      targetPosition.left = Math.max(0, _anchorY - targetPosition.maxWidth);
    } else {
      targetPosition.left = anchorOrigin.horizontal === 'middle' ? anchor.center : anchorOrigin.horizontal === selfOrigin.horizontal ? anchor.left : anchor.right;
      targetPosition.maxWidth = Math.min(target.right, innerWidth - targetPosition.left);
    }
  }

  return targetPosition;
}
function parseHorizTransformOrigin(pos) {
  return pos === 'middle' ? 'center' : pos;
}
function setPosition(_ref) {
  var el = _ref.el,
      animate = _ref.animate,
      anchorEl = _ref.anchorEl,
      anchorOrigin = _ref.anchorOrigin,
      selfOrigin = _ref.selfOrigin,
      maxHeight = _ref.maxHeight,
      event = _ref.event,
      anchorClick = _ref.anchorClick,
      touchPosition = _ref.touchPosition,
      offset = _ref.offset,
      touchOffset = _ref.touchOffset,
      cover = _ref.cover;
  var anchor;
  el.style.maxHeight = maxHeight || '65vh';
  el.style.maxWidth = '100vw';

  if (event && (!anchorClick || touchPosition)) {
    var _eventPosition = Object(_event_js__WEBPACK_IMPORTED_MODULE_3__[/* position */ "g"])(event),
        top = _eventPosition.top,
        left = _eventPosition.left;

    anchor = {
      top: top,
      left: left,
      width: 1,
      height: 1,
      right: left + 1,
      center: top,
      middle: left,
      bottom: top + 1
    };
  } else {
    if (touchOffset) {
      var _anchorEl$getBounding = anchorEl.getBoundingClientRect(),
          anchorTop = _anchorEl$getBounding.top,
          anchorLeft = _anchorEl$getBounding.left,
          _top = anchorTop + touchOffset.top,
          _left = anchorLeft + touchOffset.left;

      anchor = {
        top: _top,
        left: _left,
        width: 1,
        height: 1,
        right: _left + 1,
        center: _top,
        middle: _left,
        bottom: _top + 1
      };
    } else {
      anchor = getAnchorPosition(anchorEl, offset);
    }
  }

  var target = getTargetPosition(el);
  var targetPosition = {
    top: anchor[anchorOrigin.vertical] - target[selfOrigin.vertical],
    left: anchor[anchorOrigin.horizontal] - target[selfOrigin.horizontal]
  };
  targetPosition = repositionIfNeeded(anchor, target, selfOrigin, anchorOrigin, targetPosition, cover);
  el.style.top = Math.max(0, targetPosition.top) + 'px';
  el.style.left = Math.max(0, targetPosition.left) + 'px';

  if (targetPosition.maxHeight) {
    el.style.maxHeight = "".concat(targetPosition.maxHeight, "px");
  }

  if (targetPosition.maxWidth) {
    el.style.maxWidth = "".concat(targetPosition.maxWidth, "px");
  }

  if (animate) {
    var directions = targetPosition.top < anchor.top ? ['up', 'down'] : ['down', 'up'];
    el.classList.add("animate-popup-".concat(directions[0]));
    el.classList.remove("animate-popup-".concat(directions[1]));
  }
}
function positionValidator(pos) {
  var parts = pos.split(' ');

  if (parts.length !== 2) {
    return false;
  }

  if (!['top', 'center', 'bottom'].includes(parts[0])) {
    console.error('Anchor/Self position must start with one of top/center/bottom');
    return false;
  }

  if (!['left', 'middle', 'right'].includes(parts[1])) {
    console.error('Anchor/Self position must end with one of left/middle/right');
    return false;
  }

  return true;
}
function offsetValidator(val) {
  if (!val) {
    return true;
  }

  if (val.length !== 2) {
    return false;
  }

  if (typeof val[0] !== 'number' || typeof val[1] !== 'number') {
    return false;
  }

  return true;
}
function parsePosition(pos) {
  var parts = pos.split(' ');
  return {
    vertical: parts[0],
    horizontal: parts[1]
  };
}

/***/ }),

/***/ "ebd6":
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__("cb7c");
var aFunction = __webpack_require__("d8e8");
var SPECIES = __webpack_require__("2b4c")('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),

/***/ "ecdd":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b18c");
/* harmony import */ var _directives_touch_swipe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("28c4");


/* harmony default export */ __webpack_exports__["a"] = ({
  directives: {
    TouchSwipe: _directives_touch_swipe_js__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]
  },
  props: {
    val: {},
    trueValue: {
      default: true
    },
    falseValue: {
      default: false
    }
  },
  computed: {
    isTrue: function isTrue() {
      return this.modelIsArray ? this.index > -1 : this.value === this.trueValue;
    },
    isFalse: function isFalse() {
      return this.modelIsArray ? this.index === -1 : this.value === this.falseValue;
    },
    index: function index() {
      if (this.modelIsArray) {
        return this.value.indexOf(this.val);
      }
    },
    modelIsArray: function modelIsArray() {
      return Array.isArray(this.value);
    }
  },
  methods: {
    toggle: function toggle(evt) {
      var blur = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (this.disable || this.readonly) {
        return;
      }

      evt && Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_0__[/* stopAndPrevent */ "h"])(evt);
      blur && this.$el.blur();
      var val;

      if (this.modelIsArray) {
        if (this.isTrue) {
          val = this.value.slice();
          val.splice(this.index, 1);
        } else {
          val = this.value.concat(this.val);
        }
      } else if (this.isTrue) {
        val = this.toggleIndeterminate ? this.indeterminateValue : this.falseValue;
      } else if (this.isFalse) {
        val = this.trueValue;
      } else {
        val = this.falseValue;
      }

      this.__update(val);
    }
  }
});

/***/ }),

/***/ "ef81":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("6762");
/* harmony import */ var core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es7_array_includes__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("2fdb");
/* harmony import */ var core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_includes__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("52b5");
/* harmony import */ var _btn_QBtn_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("482e");




/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QAlert',
  props: {
    type: {
      type: String,
      validator: function validator(v) {
        return ['positive', 'negative', 'warning', 'info'].includes(v);
      }
    },
    color: {
      type: String,
      default: 'negative'
    },
    textColor: String,
    message: String,
    detail: String,
    icon: String,
    avatar: String,
    actions: Array
  },
  computed: {
    computedIcon: function computedIcon() {
      return this.icon ? this.icon : this.$q.icon.type[this.type || this.color];
    },
    classes: function classes() {
      return "bg-".concat(this.type || this.color, " text-").concat(this.textColor || 'white');
    }
  },
  render: function render(h) {
    var _this = this;

    var side = [],
        detail = this.$slots.detail || this.detail;

    if (this.avatar) {
      side.push(h('img', {
        staticClass: 'avatar',
        attrs: {
          src: this.avatar
        }
      }));
    } else if (this.icon || this.type) {
      side.push(h(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"], {
        props: {
          name: this.computedIcon
        }
      }));
    }

    return h('div', [h('div', {
      staticClass: 'q-alert row no-wrap shadow-2',
      'class': this.classes
    }, [side.length ? h('div', {
      staticClass: 'q-alert-side col-auto row flex-center'
    }, side) : null, h('div', {
      staticClass: 'q-alert-content col self-center'
    }, [h('div', this.$slots.default || this.message), detail ? h('div', {
      staticClass: 'q-alert-detail'
    }, [detail]) : null]), this.actions && this.actions.length ? h('div', {
      staticClass: 'q-alert-actions col-auto gutter-xs column flex-center'
    }, this.actions.map(function (action) {
      return h('div', {
        staticClass: 'full-width'
      }, [h(_btn_QBtn_js__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"], {
        staticClass: 'full-width',
        props: {
          flat: true,
          dense: true,
          align: 'left',
          icon: action.icon,
          label: action.closeBtn === true ? typeof action.label === 'string' ? action.label : _this.$q.i18n.label.close : action.label
        },
        on: {
          click: function click() {
            return action.handler();
          }
        }
      })]);
    })) : null])]);
  }
});

/***/ }),

/***/ "efdb":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _objectSpread; });
/* harmony import */ var _defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("fc11");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      Object(_defineProperty__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"])(target, key, source[key]);
    });
  }

  return target;
}

/***/ }),

/***/ "f30c":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QToolbar',
  props: {
    color: {
      type: String,
      default: 'primary'
    },
    textColor: String,
    inverted: Boolean,
    glossy: Boolean
  },
  computed: {
    classes: function classes() {
      var cls = ["q-toolbar-".concat(this.inverted ? 'inverted' : 'normal')];
      this.glossy && cls.push('glossy');

      if (this.inverted) {
        cls.push("text-".concat(this.textColor || this.color));
      } else {
        cls.push("bg-".concat(this.color));
        cls.push("text-".concat(this.textColor || 'white'));
      }

      return cls;
    }
  },
  render: function render(h) {
    return h('div', {
      staticClass: 'q-toolbar row no-wrap items-center relative-position',
      'class': this.classes
    }, this.$slots.default);
  }
});

/***/ }),

/***/ "f559":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__("5ca1");
var toLength = __webpack_require__("9def");
var context = __webpack_require__("d2c8");
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__("5147")(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),

/***/ "f59b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("b18c");
/* harmony import */ var _scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("1528");
/* harmony import */ var _plugins_platform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("a60d");



var registered = 0;

function onWheel(e) {
  if (shouldPreventScroll(e)) {
    Object(_event_js__WEBPACK_IMPORTED_MODULE_0__[/* stopAndPrevent */ "h"])(e);
  }
}

function shouldPreventScroll(e) {
  if (e.target === document.body || e.target.classList.contains('q-layout-backdrop')) {
    return true;
  }

  var path = Object(_event_js__WEBPACK_IMPORTED_MODULE_0__[/* getEventPath */ "c"])(e),
      shift = e.shiftKey && !e.deltaX,
      scrollY = !shift && Math.abs(e.deltaX) <= Math.abs(e.deltaY),
      delta = shift || scrollY ? e.deltaY : e.deltaX;

  for (var index = 0; index < path.length; index++) {
    var el = path[index];

    if (Object(_scroll_js__WEBPACK_IMPORTED_MODULE_1__[/* hasScrollbar */ "f"])(el, scrollY)) {
      return scrollY ? delta < 0 && el.scrollTop === 0 ? true : delta > 0 && el.scrollTop + el.clientHeight === el.scrollHeight : delta < 0 && el.scrollLeft === 0 ? true : delta > 0 && el.scrollLeft + el.clientWidth === el.scrollWidth;
    }
  }

  return true;
}

/* harmony default export */ __webpack_exports__["a"] = (function (register) {
  registered += register ? 1 : -1;

  if (registered > 1) {
    return;
  }

  var action = register ? 'add' : 'remove';

  if (_plugins_platform_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].is.mobile) {
    document.body.classList[action]('q-body-prevent-scroll');
  } else if (_plugins_platform_js__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].is.desktop) {
    window["".concat(action, "EventListener")]('wheel', onWheel);
  }
});

/***/ }),

/***/ "f605":
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),

/***/ "f62b":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("ac6a");
/* harmony import */ var core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_iterable__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("b18c");



function getDirection(mod) {
  if (!mod.horizontal && !mod.vertical) {
    return {
      horizontal: true,
      vertical: true
    };
  }

  var dir = {};
  ['horizontal', 'vertical'].forEach(function (direction) {
    if (mod[direction]) {
      dir[direction] = true;
    }
  });
  return dir;
}

function processChanges(evt, ctx, isFinal) {
  var direction,
      pos = Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_1__[/* position */ "g"])(evt),
      distX = pos.left - ctx.event.x,
      distY = pos.top - ctx.event.y,
      absDistX = Math.abs(distX),
      absDistY = Math.abs(distY);

  if (ctx.direction.horizontal && !ctx.direction.vertical) {
    direction = distX < 0 ? 'left' : 'right';
  } else if (!ctx.direction.horizontal && ctx.direction.vertical) {
    direction = distY < 0 ? 'up' : 'down';
  } else if (absDistX >= absDistY) {
    direction = distX < 0 ? 'left' : 'right';
  } else {
    direction = distY < 0 ? 'up' : 'down';
  }

  return {
    evt: evt,
    position: pos,
    direction: direction,
    isFirst: ctx.event.isFirst,
    isFinal: Boolean(isFinal),
    duration: new Date().getTime() - ctx.event.time,
    distance: {
      x: absDistX,
      y: absDistY
    },
    delta: {
      x: pos.left - ctx.event.lastX,
      y: pos.top - ctx.event.lastY
    }
  };
}

function shouldTrigger(ctx, changes) {
  if (ctx.direction.horizontal && ctx.direction.vertical) {
    return true;
  }

  if (ctx.direction.horizontal && !ctx.direction.vertical) {
    return Math.abs(changes.delta.x) > 0;
  }

  if (!ctx.direction.horizontal && ctx.direction.vertical) {
    return Math.abs(changes.delta.y) > 0;
  }
}

/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'touch-pan',
  bind: function bind(el, binding) {
    var mouse = !binding.modifiers.noMouse,
        stopPropagation = binding.modifiers.stop,
        preventDefault = binding.modifiers.prevent,
        evtOpts = preventDefault || binding.modifiers.mightPrevent ? null : _utils_event_js__WEBPACK_IMPORTED_MODULE_1__[/* listenOpts */ "f"].passive;
    var ctx = {
      handler: binding.value,
      direction: getDirection(binding.modifiers),
      mouseStart: function mouseStart(evt) {
        if (Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_1__[/* leftClick */ "e"])(evt)) {
          document.addEventListener('mousemove', ctx.move, evtOpts);
          document.addEventListener('mouseup', ctx.mouseEnd, evtOpts);
          ctx.start(evt);
        }
      },
      mouseEnd: function mouseEnd(evt) {
        document.removeEventListener('mousemove', ctx.move, evtOpts);
        document.removeEventListener('mouseup', ctx.mouseEnd, evtOpts);
        ctx.end(evt);
      },
      start: function start(evt) {
        var pos = Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_1__[/* position */ "g"])(evt);
        ctx.event = {
          x: pos.left,
          y: pos.top,
          time: new Date().getTime(),
          detected: ctx.direction.horizontal && ctx.direction.vertical,
          abort: false,
          isFirst: true,
          lastX: pos.left,
          lastY: pos.top
        };

        if (ctx.event.detected) {
          el.classList.add('q-touch');
          stopPropagation && evt.stopPropagation();
          preventDefault && evt.preventDefault();
        }
      },
      move: function move(evt) {
        if (ctx.event.abort) {
          return;
        }

        if (ctx.event.detected) {
          stopPropagation && evt.stopPropagation();
          preventDefault && evt.preventDefault();
          var changes = processChanges(evt, ctx, false);

          if (shouldTrigger(ctx, changes)) {
            ctx.handler(changes);
            ctx.event.lastX = changes.position.left;
            ctx.event.lastY = changes.position.top;
            ctx.event.isFirst = false;
          }

          return;
        }

        var pos = Object(_utils_event_js__WEBPACK_IMPORTED_MODULE_1__[/* position */ "g"])(evt),
            distX = Math.abs(pos.left - ctx.event.x),
            distY = Math.abs(pos.top - ctx.event.y);

        if (distX === distY) {
          return;
        }

        ctx.event.detected = true;
        ctx.event.abort = ctx.direction.vertical ? distX > distY : distX < distY;
        ctx.move(evt);
      },
      end: function end(evt) {
        el.classList.remove('q-touch');

        if (ctx.event.abort || !ctx.event.detected || ctx.event.isFirst) {
          return;
        }

        stopPropagation && evt.stopPropagation();
        preventDefault && evt.preventDefault();
        ctx.handler(processChanges(evt, ctx, true));
      }
    };
    el.__qtouchpan = ctx;

    if (mouse) {
      el.addEventListener('mousedown', ctx.mouseStart, evtOpts);
    }

    el.addEventListener('touchstart', ctx.start, evtOpts);
    el.addEventListener('touchmove', ctx.move, evtOpts);
    el.addEventListener('touchend', ctx.end, evtOpts);
  },
  update: function update(el, binding) {
    if (binding.oldValue !== binding.value) {
      el.__qtouchpan.handler = binding.value;
    }
  },
  unbind: function unbind(el, binding) {
    var ctx = el.__qtouchpan;

    if (!ctx) {
      return;
    }

    var evtOpts = binding.modifiers.prevent ? null : _utils_event_js__WEBPACK_IMPORTED_MODULE_1__[/* listenOpts */ "f"].passive;
    el.removeEventListener('mousedown', ctx.mouseStart, evtOpts);
    el.removeEventListener('touchstart', ctx.start, evtOpts);
    el.removeEventListener('touchmove', ctx.move, evtOpts);
    el.removeEventListener('touchend', ctx.end, evtOpts);
    delete el.__qtouchpan;
  }
});

/***/ }),

/***/ "f6b4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__("c532");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "f751":
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__("5ca1");

$export($export.S + $export.F, 'Object', { assign: __webpack_require__("7333") });


/***/ }),

/***/ "fab2":
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__("7726").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "fb40":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _history_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("be90");

/* harmony default export */ __webpack_exports__["a"] = ({
  props: {
    value: Boolean
  },
  data: function data() {
    return {
      showing: false
    };
  },
  watch: {
    value: function value(val) {
      var _this = this;

      if (this.disable && val) {
        this.$emit('input', false);
        return;
      }

      this.$nextTick(function () {
        if (_this.value !== _this.showing) {
          _this[val ? 'show' : 'hide']();
        }
      });
    }
  },
  methods: {
    toggle: function toggle(evt) {
      return this[this.showing ? 'hide' : 'show'](evt);
    },
    show: function show(evt) {
      var _this2 = this;

      if (this.disable || this.showing) {
        return this.showPromise || Promise.resolve(evt);
      }

      this.hidePromise && this.hidePromiseReject();
      this.showing = true;

      if (this.value === false) {
        this.$emit('input', true);
      }

      if (this.$options.modelToggle === void 0 || this.$options.modelToggle.history) {
        this.__historyEntry = {
          handler: this.hide
        };
        _history_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].add(this.__historyEntry);
      }

      if (!this.__show) {
        this.$emit('show', evt);
        return Promise.resolve(evt);
      }

      this.showPromise = new Promise(function (resolve, reject) {
        _this2.showPromiseResolve = function () {
          _this2.showPromise = null;

          _this2.$emit('show', evt);

          resolve(evt);
        };

        _this2.showPromiseReject = function () {
          _this2.showPromise.catch(function () {});

          _this2.showPromise = null;
          reject(null);
        };
      });

      this.__show(evt);

      return this.showPromise || Promise.resolve(evt);
    },
    hide: function hide(evt) {
      var _this3 = this;

      if (this.disable || !this.showing) {
        return this.hidePromise || Promise.resolve(evt);
      }

      this.showPromise && this.showPromiseReject();
      this.showing = false;

      if (this.value === true) {
        this.$emit('input', false);
      }

      this.__removeHistory();

      if (!this.__hide) {
        this.$emit('hide', evt);
        return Promise.resolve();
      }

      this.hidePromise = new Promise(function (resolve, reject) {
        _this3.hidePromiseResolve = function () {
          _this3.hidePromise = null;

          _this3.$emit('hide', evt);

          resolve();
        };

        _this3.hidePromiseReject = function () {
          _this3.hidePromise.catch(function () {});

          _this3.hidePromise = null;
          reject(null);
        };
      });

      this.__hide(evt);

      return this.hidePromise || Promise.resolve(evt);
    },
    __removeHistory: function __removeHistory() {
      if (this.__historyEntry) {
        _history_js__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].remove(this.__historyEntry);
        this.__historyEntry = null;
      }
    }
  },
  beforeDestroy: function beforeDestroy() {
    if (this.showing) {
      this.showPromise && this.showPromiseReject();
      this.hidePromise && this.hidePromiseReject();

      this.__removeHistory();
    }
  }
});

/***/ }),

/***/ "fb82":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return rgbToHex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return hexToRgb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return hsvToRgb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return rgbToHsv; });
/* unused harmony export textToRgb */
/* unused harmony export lighten */
/* unused harmony export luminosity */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return setBrand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return getBrand; });
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("a481");
/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("6b54");
/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_1__);


function rgbToHex(_ref) {
  var r = _ref.r,
      g = _ref.g,
      b = _ref.b,
      a = _ref.a;
  var alpha = a !== void 0;
  r = Math.round(r);
  g = Math.round(g);
  b = Math.round(b);

  if (r > 255 || g > 255 || b > 255 || alpha && a > 100) {
    throw new TypeError('Expected 3 numbers below 256 (and optionally one below 100)');
  }

  a = alpha ? (Math.round(255 * a / 100) | 1 << 8).toString(16).slice(1) : '';
  return '#' + (b | g << 8 | r << 16 | 1 << 24).toString(16).slice(1) + a;
}
function hexToRgb(hex) {
  if (typeof hex !== 'string') {
    throw new TypeError('Expected a string');
  }

  hex = hex.replace(/^#/, '');

  if (hex.length === 3) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  } else if (hex.length === 4) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
  }

  var num = parseInt(hex, 16);
  return hex.length > 6 ? {
    r: num >> 24 & 255,
    g: num >> 16 & 255,
    b: num >> 8 & 255,
    a: Math.round((num & 255) / 2.55)
  } : {
    r: num >> 16,
    g: num >> 8 & 255,
    b: num & 255
  };
}
function hsvToRgb(_ref2) {
  var h = _ref2.h,
      s = _ref2.s,
      v = _ref2.v,
      a = _ref2.a;
  var r, g, b, i, f, p, q, t;
  s = s / 100;
  v = v / 100;
  h = h / 360;
  i = Math.floor(h * 6);
  f = h * 6 - i;
  p = v * (1 - s);
  q = v * (1 - f * s);
  t = v * (1 - (1 - f) * s);

  switch (i % 6) {
    case 0:
      r = v;
      g = t;
      b = p;
      break;

    case 1:
      r = q;
      g = v;
      b = p;
      break;

    case 2:
      r = p;
      g = v;
      b = t;
      break;

    case 3:
      r = p;
      g = q;
      b = v;
      break;

    case 4:
      r = t;
      g = p;
      b = v;
      break;

    case 5:
      r = v;
      g = p;
      b = q;
      break;
  }

  return {
    r: Math.round(r * 255),
    g: Math.round(g * 255),
    b: Math.round(b * 255),
    a: a
  };
}
function rgbToHsv(_ref3) {
  var r = _ref3.r,
      g = _ref3.g,
      b = _ref3.b,
      a = _ref3.a;
  var max = Math.max(r, g, b),
      min = Math.min(r, g, b),
      d = max - min,
      h,
      s = max === 0 ? 0 : d / max,
      v = max / 255;

  switch (max) {
    case min:
      h = 0;
      break;

    case r:
      h = g - b + d * (g < b ? 6 : 0);
      h /= 6 * d;
      break;

    case g:
      h = b - r + d * 2;
      h /= 6 * d;
      break;

    case b:
      h = r - g + d * 4;
      h /= 6 * d;
      break;
  }

  return {
    h: Math.round(h * 360),
    s: Math.round(s * 100),
    v: Math.round(v * 100),
    a: a
  };
}
var reRGBA = /^\s*rgb(a)?\s*\((\s*(\d+)\s*,\s*?){2}(\d+)\s*,?\s*([01]?\.?\d*?)?\s*\)\s*$/;
function textToRgb(color) {
  if (typeof color !== 'string') {
    throw new TypeError('Expected a string');
  }

  var m = reRGBA.exec(color);

  if (m) {
    var rgb = {
      r: Math.max(255, parseInt(m[2], 10)),
      g: Math.max(255, parseInt(m[3], 10)),
      b: Math.max(255, parseInt(m[4], 10))
    };

    if (m[1]) {
      rgb.a = Math.max(1, parseFloat(m[5]));
    }

    return rgb;
  }

  return hexToRgb(color);
}
function lighten(color, percent) {
  if (typeof color !== 'string') {
    throw new TypeError('Expected a string as color');
  }

  if (typeof percent !== 'number') {
    throw new TypeError('Expected a numeric percent');
  }

  var rgb = textToRgb(color),
      t = percent < 0 ? 0 : 255,
      p = Math.abs(percent) / 100,
      R = rgb.r,
      G = rgb.g,
      B = rgb.b;
  return '#' + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
}
function luminosity(color) {
  if (typeof color !== 'string' && (!color || color.r === void 0)) {
    throw new TypeError('Expected a string or a {r, g, b} object as color');
  }

  var rgb = typeof color === 'string' ? textToRgb(color) : color,
      r = rgb.r / 255,
      g = rgb.g / 255,
      b = rgb.b / 255,
      R = r <= 0.03928 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4),
      G = g <= 0.03928 ? g / 12.92 : Math.pow((g + 0.055) / 1.055, 2.4),
      B = b <= 0.03928 ? b / 12.92 : Math.pow((b + 0.055) / 1.055, 2.4);
  return 0.2126 * R + 0.7152 * G + 0.0722 * B;
}
function setBrand(color, value) {
  var element = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.body;

  if (typeof color !== 'string') {
    throw new TypeError('Expected a string as color');
  }

  if (typeof value !== 'string') {
    throw new TypeError('Expected a string as value');
  }

  if (!(element instanceof Element)) {
    throw new TypeError('Expected a DOM element');
  }

  element.style.setProperty("--q-color-".concat(color), value);

  switch (color) {
    case 'negative':
    case 'warning':
      element.style.setProperty("--q-color-".concat(color, "-l"), lighten(value, 46));
      break;

    case 'light':
      element.style.setProperty("--q-color-".concat(color, "-d"), lighten(value, -10));
  }
}
function getBrand(color) {
  var element = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.body;

  if (typeof color !== 'string') {
    throw new TypeError('Expected a string as color');
  }

  if (!(element instanceof Element)) {
    throw new TypeError('Expected a DOM element');
  }

  return getComputedStyle(element).getPropertyValue("--q-color-".concat(color)).trim() || null;
}
/* harmony default export */ __webpack_exports__["a"] = ({
  rgbToHex: rgbToHex,
  hexToRgb: hexToRgb,
  hsvToRgb: hsvToRgb,
  rgbToHsv: rgbToHsv,
  textToRgb: textToRgb,
  lighten: lighten,
  luminosity: luminosity,
  setBrand: setBrand,
  getBrand: getBrand
});

/***/ }),

/***/ "fbf4":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.patchChildren = patchChildren;
exports.h = h;

function isUndef(v) {
  return v === null || v === undefined;
}

function isDef(v) {
  return v !== null && v !== undefined;
}

function sameVval(oldVval, vval) {
  return vval.tag === oldVval.tag && vval.key === oldVval.key;
}

function createVm(vval) {
  var Vm = vval.tag;
  vval.vm = new Vm({
    data: vval.args
  });
}

function updateVval(vval) {
  var keys = Object.keys(vval.args);

  for (var i = 0; i < keys.length; i++) {
    keys.forEach(function (k) {
      vval.vm[k] = vval.args[k];
    });
  }
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) map[key] = i;
  }

  return map;
}

function updateChildren(oldCh, newCh) {
  var oldStartIdx = 0;
  var newStartIdx = 0;
  var oldEndIdx = oldCh.length - 1;
  var oldStartVval = oldCh[0];
  var oldEndVval = oldCh[oldEndIdx];
  var newEndIdx = newCh.length - 1;
  var newStartVval = newCh[0];
  var newEndVval = newCh[newEndIdx];
  var oldKeyToIdx, idxInOld, elmToMove;

  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
    if (isUndef(oldStartVval)) {
      oldStartVval = oldCh[++oldStartIdx];
    } else if (isUndef(oldEndVval)) {
      oldEndVval = oldCh[--oldEndIdx];
    } else if (sameVval(oldStartVval, newStartVval)) {
      patchVval(oldStartVval, newStartVval);
      oldStartVval = oldCh[++oldStartIdx];
      newStartVval = newCh[++newStartIdx];
    } else if (sameVval(oldEndVval, newEndVval)) {
      patchVval(oldEndVval, newEndVval);
      oldEndVval = oldCh[--oldEndIdx];
      newEndVval = newCh[--newEndIdx];
    } else if (sameVval(oldStartVval, newEndVval)) {
      patchVval(oldStartVval, newEndVval);
      oldStartVval = oldCh[++oldStartIdx];
      newEndVval = newCh[--newEndIdx];
    } else if (sameVval(oldEndVval, newStartVval)) {
      patchVval(oldEndVval, newStartVval);
      oldEndVval = oldCh[--oldEndIdx];
      newStartVval = newCh[++newStartIdx];
    } else {
      if (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
      idxInOld = isDef(newStartVval.key) ? oldKeyToIdx[newStartVval.key] : null;

      if (isUndef(idxInOld)) {
        createVm(newStartVval);
        newStartVval = newCh[++newStartIdx];
      } else {
        elmToMove = oldCh[idxInOld];

        if (sameVval(elmToMove, newStartVval)) {
          patchVval(elmToMove, newStartVval);
          oldCh[idxInOld] = undefined;
          newStartVval = newCh[++newStartIdx];
        } else {
          createVm(newStartVval);
          newStartVval = newCh[++newStartIdx];
        }
      }
    }
  }

  if (oldStartIdx > oldEndIdx) {
    addVvals(newCh, newStartIdx, newEndIdx);
  } else if (newStartIdx > newEndIdx) {
    removeVvals(oldCh, oldStartIdx, oldEndIdx);
  }
}

function addVvals(vvals, startIdx, endIdx) {
  for (; startIdx <= endIdx; ++startIdx) {
    createVm(vvals[startIdx]);
  }
}

function removeVvals(vvals, startIdx, endIdx) {
  for (; startIdx <= endIdx; ++startIdx) {
    var ch = vvals[startIdx];

    if (isDef(ch)) {
      ch.vm.$destroy();
      ch.vm = null;
    }
  }
}

function patchVval(oldVval, vval) {
  if (oldVval === vval) {
    return;
  }

  vval.vm = oldVval.vm;
  updateVval(vval);
}

function patchChildren(oldCh, ch) {
  if (isDef(oldCh) && isDef(ch)) {
    if (oldCh !== ch) updateChildren(oldCh, ch);
  } else if (isDef(ch)) {
    addVvals(ch, 0, ch.length - 1);
  } else if (isDef(oldCh)) {
    removeVvals(oldCh, 0, oldCh.length - 1);
  }
}

function h(tag, key, args) {
  return {
    tag: tag,
    key: key,
    args: args
  };
}

/***/ }),

/***/ "fc11":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _defineProperty; });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "fc6c":
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("c5f6");
/* harmony import */ var core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_number_constructor__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_scroll_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("1528");
/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("b18c");



/* harmony default export */ __webpack_exports__["a"] = ({
  name: 'QScrollObservable',
  props: {
    debounce: Number
  },
  render: function render() {},
  data: function data() {
    return {
      pos: 0,
      dir: 'down',
      dirChanged: false,
      dirChangePos: 0
    };
  },
  methods: {
    getPosition: function getPosition() {
      return {
        position: this.pos,
        direction: this.dir,
        directionChanged: this.dirChanged,
        inflexionPosition: this.dirChangePos
      };
    },
    trigger: function trigger(immediately) {
      if (immediately === true || this.debounce === 0) {
        this.emit();
      } else if (!this.timer) {
        this.timer = this.debounce ? setTimeout(this.emit, this.debounce) : requestAnimationFrame(this.emit);
      }
    },
    emit: function emit() {
      var pos = Math.max(0, Object(_utils_scroll_js__WEBPACK_IMPORTED_MODULE_1__[/* getScrollPosition */ "c"])(this.target)),
          delta = pos - this.pos,
          dir = delta < 0 ? 'up' : 'down';
      this.dirChanged = this.dir !== dir;

      if (this.dirChanged) {
        this.dir = dir;
        this.dirChangePos = this.pos;
      }

      this.timer = null;
      this.pos = pos;
      this.$emit('scroll', this.getPosition());
    }
  },
  mounted: function mounted() {
    this.target = Object(_utils_scroll_js__WEBPACK_IMPORTED_MODULE_1__[/* getScrollTarget */ "d"])(this.$el.parentNode);
    this.target.addEventListener('scroll', this.trigger, _utils_event_js__WEBPACK_IMPORTED_MODULE_2__[/* listenOpts */ "f"].passive);
    this.trigger(true);
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.timer);
    cancelAnimationFrame(this.timer);
    this.target.removeEventListener('scroll', this.trigger, _utils_event_js__WEBPACK_IMPORTED_MODULE_2__[/* listenOpts */ "f"].passive);
  }
});

/***/ }),

/***/ "fcf3":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "fonts/KFOlCnqEu92Fr1MmEU9fBBc-.de8b7431.woff";

/***/ }),

/***/ "fdef":
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ })

}]);
//# sourceMappingURL=vendor.fa6687bb.js.map